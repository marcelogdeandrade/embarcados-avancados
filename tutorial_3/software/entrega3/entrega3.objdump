
entrega3.elf:     file format elf32-littlenios2
entrega3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080020

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00001f08 memsz 0x00001f08 flags r-x
    LOAD off    0x00003050 vaddr 0x00100050 paddr 0x00081f28 align 2**12
         filesz 0x000002d4 memsz 0x000002e4 flags rw-
    LOAD off    0x00004000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000050 memsz 0x00000050 flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00080020  00080020  00004050  2**0
                  CONTENTS
  2 .text         00001f08  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  00100000  00100000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002d4  00100050  00081f28  00003050  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00100324  000821fc  00003324  2**2
                  ALLOC, SMALL_DATA
  6 .program_memory 00000000  000821fc  000821fc  00004050  2**0
                  CONTENTS
  7 .data_memory  00000000  00100334  00100334  00004050  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000550  00000000  00000000  00004078  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000751c  00000000  00000000  000045c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000026c2  00000000  00000000  0000bae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002c46  00000000  00000000  0000e1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000a18  00000000  00000000  00010dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001750  00000000  00000000  00011804  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000015da  00000000  00000000  00012f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00014530  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000240  00000000  00000000  00014570  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00015f4a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00015f4d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00015f59  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00015f5a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00015f5b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00015f66  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00015f71  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00015f7c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003d  00000000  00000000  00015f85  2**0
                  CONTENTS, READONLY
 27 .jdi          000061c7  00000000  00000000  00015fc2  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004bcb6  00000000  00000000  0001c189  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080020 l    d  .text	00000000 .text
00100000 l    d  .rodata	00000000 .rodata
00100050 l    d  .rwdata	00000000 .rwdata
00100324 l    d  .bss	00000000 .bss
000821fc l    d  .program_memory	00000000 .program_memory
00100334 l    d  .data_memory	00000000 .data_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../entrega3_bsp//obj/HAL/src/crt0.o
00080058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000801f4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00100050 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00080a94 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00080c2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00080d68 l     F .text	00000034 alt_dev_reg
00100130 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000811a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000812d4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00081300 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000814c0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00081620 l     F .text	0000003c alt_get_errno
0008165c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00080b80 g     F .text	0000007c alt_main
00080144 g     F .text	00000080 _puts_r
00081f28 g       *ABS*	00000000 __flash_rwdata_start
000800f8 g     F .text	0000004c printf
00081928 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00100324 g     O .bss	00000004 errno
0010032c g     O .bss	00000004 alt_argv
00108304 g       *ABS*	00000000 _gp
00080bfc g     F .text	00000030 usleep
00100184 g     O .rwdata	00000180 alt_fd_list
0008194c g     F .text	00000090 alt_find_dev
000815a4 g     F .text	0000007c alt_io_redirect
00081f28 g       *ABS*	00000000 __DTOR_END__
000801c4 g     F .text	00000014 puts
00080ec8 g     F .text	000000ec altera_avalon_jtag_uart_read
000800bc g     F .text	0000003c _printf_r
000809b0 g     F .text	00000064 .hidden __udivsi3
0010031c g     O .rwdata	00000004 alt_max_fd
00100304 g     O .rwdata	00000004 _global_impure_ptr
00100334 g       *ABS*	00000000 __bss_end
00100000 g       *ABS*	00000000 __alt_mem_data_memory
0010015c g     O .rwdata	00000028 alt_dev_null
000812b4 g     F .text	00000020 alt_dcache_flush_all
00100324 g       *ABS*	00000000 __ram_rwdata_end
00100314 g     O .rwdata	00000008 alt_dev_list
00080c68 g     F .text	00000100 write
00100050 g       *ABS*	00000000 __ram_rodata_end
00080a14 g     F .text	00000058 .hidden __umodsi3
00100334 g       *ABS*	00000000 end
00081f28 g       *ABS*	00000000 __CTOR_LIST__
00116a60 g       *ABS*	00000000 __alt_stack_pointer
00080fb4 g     F .text	00000094 altera_avalon_jtag_uart_write
00080260 g     F .text	0000052c ___vfprintf_internal_r
00081d64 g     F .text	00000190 __call_exitprocs
00080020 g     F .text	0000003c _start
00080dd4 g     F .text	00000034 alt_sys_init
00081c0c g     F .text	00000158 __register_exitproc
00080a6c g     F .text	00000028 .hidden __mulsi3
00100050 g       *ABS*	00000000 __ram_rwdata_start
00100000 g       *ABS*	00000000 __ram_rodata_start
00080e08 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00081ae4 g     F .text	000000c4 alt_get_fd
00081048 g     F .text	00000158 alt_busy_sleep
00081bdc g     F .text	00000030 memcmp
00100334 g       *ABS*	00000000 __alt_stack_base
000819dc g     F .text	00000108 alt_find_file
0008133c g     F .text	000000a4 alt_dev_llist_insert
000807a8 g     F .text	000000b8 __sfvwrite_small_dev
00100324 g       *ABS*	00000000 __bss_start
0008005c g     F .text	00000060 main
00100330 g     O .bss	00000004 alt_envp
00080e68 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00100320 g     O .rwdata	00000004 alt_errno
000808b8 g     F .text	00000084 .hidden __divsi3
00081f28 g       *ABS*	00000000 __CTOR_END__
00100000 g       *ABS*	00000000 __flash_rodata_start
00081f28 g       *ABS*	00000000 __DTOR_LIST__
00080d9c g     F .text	00000038 alt_irq_init
000818a4 g     F .text	00000084 alt_release_fd
00081ba8 g     F .text	00000014 atexit
00080860 g     F .text	00000058 _write_r
00100308 g     O .rwdata	00000004 _impure_ptr
00100328 g     O .bss	00000004 alt_argc
00081440 g     F .text	00000060 _do_dtors
0010030c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00100324 g       *ABS*	00000000 _edata
00100334 g       *ABS*	00000000 _end
00080020 g       *ABS*	00000000 __ram_exceptions_end
00081bbc g     F .text	00000020 exit
0008093c g     F .text	00000074 .hidden __modsi3
00116a60 g       *ABS*	00000000 __alt_data_end
00080000 g       *ABS*	00000000 __alt_mem_program_memory
00081ef4 g     F .text	00000034 _exit
000801d8 g     F .text	0000001c strlen
00081748 g     F .text	0000015c open
000814a0 g     F .text	00000020 alt_icache_flush_all
0008078c g     F .text	0000001c __vfprintf_internal
000813e0 g     F .text	00000060 _do_ctors
000811dc g     F .text	000000d8 close
00080afc g     F .text	00000084 alt_load



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08400814 	ori	at,at,32
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00080020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80020:	06c00474 	movhi	sp,17
    ori sp, sp, %lo(__alt_stack_pointer)
   80024:	deda9814 	ori	sp,sp,27232
    movhi gp, %hi(_gp)
   80028:	06800434 	movhi	gp,16
    ori gp, gp, %lo(_gp)
   8002c:	d6a0c114 	ori	gp,gp,33540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80030:	00800434 	movhi	r2,16
    ori r2, r2, %lo(__bss_start)
   80034:	1080c914 	ori	r2,r2,804

    movhi r3, %hi(__bss_end)
   80038:	00c00434 	movhi	r3,16
    ori r3, r3, %lo(__bss_end)
   8003c:	18c0cd14 	ori	r3,r3,820

    beq r2, r3, 1f
   80040:	10c00326 	beq	r2,r3,80050 <_start+0x30>

0:
    stw zero, (r2)
   80044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8004c:	10fffd36 	bltu	r2,r3,80044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80050:	0080afc0 	call	80afc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80054:	0080b800 	call	80b80 <alt_main>

00080058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80058:	003fff06 	br	80058 <alt_after_alt_main>

0008005c <main>:

// LED Peripheral
#define REG_DATA_OFFSET 1
#define ENCODER_0_BASE 0x121000

int main(void){
   8005c:	defffb04 	addi	sp,sp,-20
   80060:	dfc00415 	stw	ra,16(sp)
   80064:	df000315 	stw	fp,12(sp)
   80068:	df000304 	addi	fp,sp,12
  unsigned int led = 0;
   8006c:	e03ffd15 	stw	zero,-12(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   80070:	008004b4 	movhi	r2,18
   80074:	10841004 	addi	r2,r2,4160
   80078:	e0bffe15 	stw	r2,-8(fp)
  int *p_encoder = (int *) ENCODER_0_BASE;
   8007c:	008004b4 	movhi	r2,18
   80080:	10840004 	addi	r2,r2,4096
   80084:	e0bfff15 	stw	r2,-4(fp)

  printf("Embarcados++ \n");
   80088:	01000434 	movhi	r4,16
   8008c:	21000004 	addi	r4,r4,0
   80090:	00801c40 	call	801c4 <puts>

  while(1){
          usleep(50000); // remover durante a simulação
   80094:	0130d414 	movui	r4,50000
   80098:	0080bfc0 	call	80bfc <usleep>
          printf("%d \n", *(p_encoder+REG_DATA_OFFSET));
   8009c:	e0bfff17 	ldw	r2,-4(fp)
   800a0:	10800104 	addi	r2,r2,4
   800a4:	10800017 	ldw	r2,0(r2)
   800a8:	100b883a 	mov	r5,r2
   800ac:	01000434 	movhi	r4,16
   800b0:	21000404 	addi	r4,r4,16
   800b4:	00800f80 	call	800f8 <printf>
  }
   800b8:	003ff606 	br	80094 <main+0x38>

000800bc <_printf_r>:
   800bc:	defffd04 	addi	sp,sp,-12
   800c0:	dfc00015 	stw	ra,0(sp)
   800c4:	d9800115 	stw	r6,4(sp)
   800c8:	d9c00215 	stw	r7,8(sp)
   800cc:	20c00217 	ldw	r3,8(r4)
   800d0:	01800234 	movhi	r6,8
   800d4:	3181ea04 	addi	r6,r6,1960
   800d8:	19800115 	stw	r6,4(r3)
   800dc:	280d883a 	mov	r6,r5
   800e0:	21400217 	ldw	r5,8(r4)
   800e4:	d9c00104 	addi	r7,sp,4
   800e8:	00802600 	call	80260 <___vfprintf_internal_r>
   800ec:	dfc00017 	ldw	ra,0(sp)
   800f0:	dec00304 	addi	sp,sp,12
   800f4:	f800283a 	ret

000800f8 <printf>:
   800f8:	defffc04 	addi	sp,sp,-16
   800fc:	dfc00015 	stw	ra,0(sp)
   80100:	d9400115 	stw	r5,4(sp)
   80104:	d9800215 	stw	r6,8(sp)
   80108:	d9c00315 	stw	r7,12(sp)
   8010c:	00800434 	movhi	r2,16
   80110:	1080c204 	addi	r2,r2,776
   80114:	10800017 	ldw	r2,0(r2)
   80118:	01400234 	movhi	r5,8
   8011c:	2941ea04 	addi	r5,r5,1960
   80120:	10c00217 	ldw	r3,8(r2)
   80124:	d9800104 	addi	r6,sp,4
   80128:	19400115 	stw	r5,4(r3)
   8012c:	200b883a 	mov	r5,r4
   80130:	11000217 	ldw	r4,8(r2)
   80134:	008078c0 	call	8078c <__vfprintf_internal>
   80138:	dfc00017 	ldw	ra,0(sp)
   8013c:	dec00404 	addi	sp,sp,16
   80140:	f800283a 	ret

00080144 <_puts_r>:
   80144:	defffd04 	addi	sp,sp,-12
   80148:	dc000015 	stw	r16,0(sp)
   8014c:	2021883a 	mov	r16,r4
   80150:	2809883a 	mov	r4,r5
   80154:	dfc00215 	stw	ra,8(sp)
   80158:	dc400115 	stw	r17,4(sp)
   8015c:	2823883a 	mov	r17,r5
   80160:	00801d80 	call	801d8 <strlen>
   80164:	81400217 	ldw	r5,8(r16)
   80168:	01000234 	movhi	r4,8
   8016c:	2101ea04 	addi	r4,r4,1960
   80170:	29000115 	stw	r4,4(r5)
   80174:	100f883a 	mov	r7,r2
   80178:	880d883a 	mov	r6,r17
   8017c:	8009883a 	mov	r4,r16
   80180:	00807a80 	call	807a8 <__sfvwrite_small_dev>
   80184:	00ffffc4 	movi	r3,-1
   80188:	10c00926 	beq	r2,r3,801b0 <_puts_r+0x6c>
   8018c:	81400217 	ldw	r5,8(r16)
   80190:	01800434 	movhi	r6,16
   80194:	01c00044 	movi	r7,1
   80198:	28800117 	ldw	r2,4(r5)
   8019c:	31800604 	addi	r6,r6,24
   801a0:	8009883a 	mov	r4,r16
   801a4:	103ee83a 	callr	r2
   801a8:	10bfffe0 	cmpeqi	r2,r2,-1
   801ac:	0085c83a 	sub	r2,zero,r2
   801b0:	dfc00217 	ldw	ra,8(sp)
   801b4:	dc400117 	ldw	r17,4(sp)
   801b8:	dc000017 	ldw	r16,0(sp)
   801bc:	dec00304 	addi	sp,sp,12
   801c0:	f800283a 	ret

000801c4 <puts>:
   801c4:	00800434 	movhi	r2,16
   801c8:	1080c204 	addi	r2,r2,776
   801cc:	200b883a 	mov	r5,r4
   801d0:	11000017 	ldw	r4,0(r2)
   801d4:	00801441 	jmpi	80144 <_puts_r>

000801d8 <strlen>:
   801d8:	2005883a 	mov	r2,r4
   801dc:	10c00007 	ldb	r3,0(r2)
   801e0:	18000226 	beq	r3,zero,801ec <strlen+0x14>
   801e4:	10800044 	addi	r2,r2,1
   801e8:	003ffc06 	br	801dc <strlen+0x4>
   801ec:	1105c83a 	sub	r2,r2,r4
   801f0:	f800283a 	ret

000801f4 <print_repeat>:
   801f4:	defffb04 	addi	sp,sp,-20
   801f8:	dc800315 	stw	r18,12(sp)
   801fc:	dc400215 	stw	r17,8(sp)
   80200:	dc000115 	stw	r16,4(sp)
   80204:	dfc00415 	stw	ra,16(sp)
   80208:	2025883a 	mov	r18,r4
   8020c:	2823883a 	mov	r17,r5
   80210:	d9800005 	stb	r6,0(sp)
   80214:	3821883a 	mov	r16,r7
   80218:	04000a0e 	bge	zero,r16,80244 <print_repeat+0x50>
   8021c:	88800117 	ldw	r2,4(r17)
   80220:	01c00044 	movi	r7,1
   80224:	d80d883a 	mov	r6,sp
   80228:	880b883a 	mov	r5,r17
   8022c:	9009883a 	mov	r4,r18
   80230:	103ee83a 	callr	r2
   80234:	843fffc4 	addi	r16,r16,-1
   80238:	103ff726 	beq	r2,zero,80218 <print_repeat+0x24>
   8023c:	00bfffc4 	movi	r2,-1
   80240:	00000106 	br	80248 <print_repeat+0x54>
   80244:	0005883a 	mov	r2,zero
   80248:	dfc00417 	ldw	ra,16(sp)
   8024c:	dc800317 	ldw	r18,12(sp)
   80250:	dc400217 	ldw	r17,8(sp)
   80254:	dc000117 	ldw	r16,4(sp)
   80258:	dec00504 	addi	sp,sp,20
   8025c:	f800283a 	ret

00080260 <___vfprintf_internal_r>:
   80260:	deffe504 	addi	sp,sp,-108
   80264:	d8c00804 	addi	r3,sp,32
   80268:	ddc01815 	stw	r23,96(sp)
   8026c:	dd801715 	stw	r22,92(sp)
   80270:	dd401615 	stw	r21,88(sp)
   80274:	dd001515 	stw	r20,84(sp)
   80278:	dcc01415 	stw	r19,80(sp)
   8027c:	dc801315 	stw	r18,76(sp)
   80280:	dc401215 	stw	r17,72(sp)
   80284:	dc001115 	stw	r16,68(sp)
   80288:	dfc01a15 	stw	ra,104(sp)
   8028c:	df001915 	stw	fp,100(sp)
   80290:	2029883a 	mov	r20,r4
   80294:	2823883a 	mov	r17,r5
   80298:	382d883a 	mov	r22,r7
   8029c:	d9800f15 	stw	r6,60(sp)
   802a0:	0021883a 	mov	r16,zero
   802a4:	d8000e15 	stw	zero,56(sp)
   802a8:	d8000a15 	stw	zero,40(sp)
   802ac:	002b883a 	mov	r21,zero
   802b0:	0027883a 	mov	r19,zero
   802b4:	0025883a 	mov	r18,zero
   802b8:	d8000c15 	stw	zero,48(sp)
   802bc:	d8000b15 	stw	zero,44(sp)
   802c0:	002f883a 	mov	r23,zero
   802c4:	d8c00915 	stw	r3,36(sp)
   802c8:	d8c00f17 	ldw	r3,60(sp)
   802cc:	19000003 	ldbu	r4,0(r3)
   802d0:	20803fcc 	andi	r2,r4,255
   802d4:	1080201c 	xori	r2,r2,128
   802d8:	10bfe004 	addi	r2,r2,-128
   802dc:	10011e26 	beq	r2,zero,80758 <___vfprintf_internal_r+0x4f8>
   802e0:	00c00044 	movi	r3,1
   802e4:	b8c01426 	beq	r23,r3,80338 <___vfprintf_internal_r+0xd8>
   802e8:	1dc00216 	blt	r3,r23,802f4 <___vfprintf_internal_r+0x94>
   802ec:	b8000626 	beq	r23,zero,80308 <___vfprintf_internal_r+0xa8>
   802f0:	00011506 	br	80748 <___vfprintf_internal_r+0x4e8>
   802f4:	01400084 	movi	r5,2
   802f8:	b9401d26 	beq	r23,r5,80370 <___vfprintf_internal_r+0x110>
   802fc:	014000c4 	movi	r5,3
   80300:	b9402b26 	beq	r23,r5,803b0 <___vfprintf_internal_r+0x150>
   80304:	00011006 	br	80748 <___vfprintf_internal_r+0x4e8>
   80308:	01400944 	movi	r5,37
   8030c:	1140fc26 	beq	r2,r5,80700 <___vfprintf_internal_r+0x4a0>
   80310:	88800117 	ldw	r2,4(r17)
   80314:	d9000005 	stb	r4,0(sp)
   80318:	01c00044 	movi	r7,1
   8031c:	d80d883a 	mov	r6,sp
   80320:	880b883a 	mov	r5,r17
   80324:	a009883a 	mov	r4,r20
   80328:	103ee83a 	callr	r2
   8032c:	1000d81e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   80330:	84000044 	addi	r16,r16,1
   80334:	00010406 	br	80748 <___vfprintf_internal_r+0x4e8>
   80338:	01400c04 	movi	r5,48
   8033c:	1140fa26 	beq	r2,r5,80728 <___vfprintf_internal_r+0x4c8>
   80340:	01400944 	movi	r5,37
   80344:	11400a1e 	bne	r2,r5,80370 <___vfprintf_internal_r+0x110>
   80348:	d8800005 	stb	r2,0(sp)
   8034c:	88800117 	ldw	r2,4(r17)
   80350:	b80f883a 	mov	r7,r23
   80354:	d80d883a 	mov	r6,sp
   80358:	880b883a 	mov	r5,r17
   8035c:	a009883a 	mov	r4,r20
   80360:	103ee83a 	callr	r2
   80364:	1000ca1e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   80368:	84000044 	addi	r16,r16,1
   8036c:	0000f506 	br	80744 <___vfprintf_internal_r+0x4e4>
   80370:	25fff404 	addi	r23,r4,-48
   80374:	bdc03fcc 	andi	r23,r23,255
   80378:	00c00244 	movi	r3,9
   8037c:	1dc00936 	bltu	r3,r23,803a4 <___vfprintf_internal_r+0x144>
   80380:	00bfffc4 	movi	r2,-1
   80384:	90800426 	beq	r18,r2,80398 <___vfprintf_internal_r+0x138>
   80388:	01400284 	movi	r5,10
   8038c:	9009883a 	mov	r4,r18
   80390:	0080a6c0 	call	80a6c <__mulsi3>
   80394:	00000106 	br	8039c <___vfprintf_internal_r+0x13c>
   80398:	0005883a 	mov	r2,zero
   8039c:	b8a5883a 	add	r18,r23,r2
   803a0:	0000e206 	br	8072c <___vfprintf_internal_r+0x4cc>
   803a4:	01400b84 	movi	r5,46
   803a8:	1140e426 	beq	r2,r5,8073c <___vfprintf_internal_r+0x4dc>
   803ac:	05c00084 	movi	r23,2
   803b0:	213ff404 	addi	r4,r4,-48
   803b4:	27003fcc 	andi	fp,r4,255
   803b8:	00c00244 	movi	r3,9
   803bc:	1f000936 	bltu	r3,fp,803e4 <___vfprintf_internal_r+0x184>
   803c0:	00bfffc4 	movi	r2,-1
   803c4:	98800426 	beq	r19,r2,803d8 <___vfprintf_internal_r+0x178>
   803c8:	01400284 	movi	r5,10
   803cc:	9809883a 	mov	r4,r19
   803d0:	0080a6c0 	call	80a6c <__mulsi3>
   803d4:	00000106 	br	803dc <___vfprintf_internal_r+0x17c>
   803d8:	0005883a 	mov	r2,zero
   803dc:	e0a7883a 	add	r19,fp,r2
   803e0:	0000d906 	br	80748 <___vfprintf_internal_r+0x4e8>
   803e4:	00c01b04 	movi	r3,108
   803e8:	10c0d226 	beq	r2,r3,80734 <___vfprintf_internal_r+0x4d4>
   803ec:	013fffc4 	movi	r4,-1
   803f0:	99000226 	beq	r19,r4,803fc <___vfprintf_internal_r+0x19c>
   803f4:	d8000b15 	stw	zero,44(sp)
   803f8:	00000106 	br	80400 <___vfprintf_internal_r+0x1a0>
   803fc:	04c00044 	movi	r19,1
   80400:	01001a44 	movi	r4,105
   80404:	11001626 	beq	r2,r4,80460 <___vfprintf_internal_r+0x200>
   80408:	20800916 	blt	r4,r2,80430 <___vfprintf_internal_r+0x1d0>
   8040c:	010018c4 	movi	r4,99
   80410:	11008826 	beq	r2,r4,80634 <___vfprintf_internal_r+0x3d4>
   80414:	01001904 	movi	r4,100
   80418:	11001126 	beq	r2,r4,80460 <___vfprintf_internal_r+0x200>
   8041c:	01001604 	movi	r4,88
   80420:	1100c81e 	bne	r2,r4,80744 <___vfprintf_internal_r+0x4e4>
   80424:	00c00044 	movi	r3,1
   80428:	d8c00e15 	stw	r3,56(sp)
   8042c:	00001506 	br	80484 <___vfprintf_internal_r+0x224>
   80430:	01001cc4 	movi	r4,115
   80434:	11009826 	beq	r2,r4,80698 <___vfprintf_internal_r+0x438>
   80438:	20800416 	blt	r4,r2,8044c <___vfprintf_internal_r+0x1ec>
   8043c:	01001bc4 	movi	r4,111
   80440:	1100c01e 	bne	r2,r4,80744 <___vfprintf_internal_r+0x4e4>
   80444:	05400204 	movi	r21,8
   80448:	00000f06 	br	80488 <___vfprintf_internal_r+0x228>
   8044c:	01001d44 	movi	r4,117
   80450:	11000d26 	beq	r2,r4,80488 <___vfprintf_internal_r+0x228>
   80454:	01001e04 	movi	r4,120
   80458:	11000a26 	beq	r2,r4,80484 <___vfprintf_internal_r+0x224>
   8045c:	0000b906 	br	80744 <___vfprintf_internal_r+0x4e4>
   80460:	d8c00a17 	ldw	r3,40(sp)
   80464:	b7000104 	addi	fp,r22,4
   80468:	18000726 	beq	r3,zero,80488 <___vfprintf_internal_r+0x228>
   8046c:	df000d15 	stw	fp,52(sp)
   80470:	b5c00017 	ldw	r23,0(r22)
   80474:	b800080e 	bge	r23,zero,80498 <___vfprintf_internal_r+0x238>
   80478:	05efc83a 	sub	r23,zero,r23
   8047c:	02400044 	movi	r9,1
   80480:	00000606 	br	8049c <___vfprintf_internal_r+0x23c>
   80484:	05400404 	movi	r21,16
   80488:	b0c00104 	addi	r3,r22,4
   8048c:	d8c00d15 	stw	r3,52(sp)
   80490:	b5c00017 	ldw	r23,0(r22)
   80494:	d8000a15 	stw	zero,40(sp)
   80498:	0013883a 	mov	r9,zero
   8049c:	d839883a 	mov	fp,sp
   804a0:	b8001726 	beq	r23,zero,80500 <___vfprintf_internal_r+0x2a0>
   804a4:	a80b883a 	mov	r5,r21
   804a8:	b809883a 	mov	r4,r23
   804ac:	da401015 	stw	r9,64(sp)
   804b0:	00809b00 	call	809b0 <__udivsi3>
   804b4:	a80b883a 	mov	r5,r21
   804b8:	1009883a 	mov	r4,r2
   804bc:	102d883a 	mov	r22,r2
   804c0:	0080a6c0 	call	80a6c <__mulsi3>
   804c4:	b885c83a 	sub	r2,r23,r2
   804c8:	00c00244 	movi	r3,9
   804cc:	da401017 	ldw	r9,64(sp)
   804d0:	18800216 	blt	r3,r2,804dc <___vfprintf_internal_r+0x27c>
   804d4:	10800c04 	addi	r2,r2,48
   804d8:	00000506 	br	804f0 <___vfprintf_internal_r+0x290>
   804dc:	d8c00e17 	ldw	r3,56(sp)
   804e0:	18000226 	beq	r3,zero,804ec <___vfprintf_internal_r+0x28c>
   804e4:	10800dc4 	addi	r2,r2,55
   804e8:	00000106 	br	804f0 <___vfprintf_internal_r+0x290>
   804ec:	108015c4 	addi	r2,r2,87
   804f0:	e0800005 	stb	r2,0(fp)
   804f4:	b02f883a 	mov	r23,r22
   804f8:	e7000044 	addi	fp,fp,1
   804fc:	003fe806 	br	804a0 <___vfprintf_internal_r+0x240>
   80500:	e6efc83a 	sub	r23,fp,sp
   80504:	9dc5c83a 	sub	r2,r19,r23
   80508:	0080090e 	bge	zero,r2,80530 <___vfprintf_internal_r+0x2d0>
   8050c:	e085883a 	add	r2,fp,r2
   80510:	01400c04 	movi	r5,48
   80514:	d8c00917 	ldw	r3,36(sp)
   80518:	e009883a 	mov	r4,fp
   8051c:	e0c0032e 	bgeu	fp,r3,8052c <___vfprintf_internal_r+0x2cc>
   80520:	e7000044 	addi	fp,fp,1
   80524:	21400005 	stb	r5,0(r4)
   80528:	e0bffa1e 	bne	fp,r2,80514 <___vfprintf_internal_r+0x2b4>
   8052c:	e6efc83a 	sub	r23,fp,sp
   80530:	d8c00b17 	ldw	r3,44(sp)
   80534:	4dd1883a 	add	r8,r9,r23
   80538:	922dc83a 	sub	r22,r18,r8
   8053c:	18001626 	beq	r3,zero,80598 <___vfprintf_internal_r+0x338>
   80540:	48000a26 	beq	r9,zero,8056c <___vfprintf_internal_r+0x30c>
   80544:	00800b44 	movi	r2,45
   80548:	d8800805 	stb	r2,32(sp)
   8054c:	88800117 	ldw	r2,4(r17)
   80550:	01c00044 	movi	r7,1
   80554:	d9800804 	addi	r6,sp,32
   80558:	880b883a 	mov	r5,r17
   8055c:	a009883a 	mov	r4,r20
   80560:	103ee83a 	callr	r2
   80564:	10004a1e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   80568:	84000044 	addi	r16,r16,1
   8056c:	0580070e 	bge	zero,r22,8058c <___vfprintf_internal_r+0x32c>
   80570:	b00f883a 	mov	r7,r22
   80574:	01800c04 	movi	r6,48
   80578:	880b883a 	mov	r5,r17
   8057c:	a009883a 	mov	r4,r20
   80580:	00801f40 	call	801f4 <print_repeat>
   80584:	1000421e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   80588:	85a1883a 	add	r16,r16,r22
   8058c:	e02d883a 	mov	r22,fp
   80590:	bf2fc83a 	sub	r23,r23,fp
   80594:	00002006 	br	80618 <___vfprintf_internal_r+0x3b8>
   80598:	0580090e 	bge	zero,r22,805c0 <___vfprintf_internal_r+0x360>
   8059c:	b00f883a 	mov	r7,r22
   805a0:	01800804 	movi	r6,32
   805a4:	880b883a 	mov	r5,r17
   805a8:	a009883a 	mov	r4,r20
   805ac:	da401015 	stw	r9,64(sp)
   805b0:	00801f40 	call	801f4 <print_repeat>
   805b4:	da401017 	ldw	r9,64(sp)
   805b8:	1000351e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   805bc:	85a1883a 	add	r16,r16,r22
   805c0:	483ff226 	beq	r9,zero,8058c <___vfprintf_internal_r+0x32c>
   805c4:	00800b44 	movi	r2,45
   805c8:	d8800805 	stb	r2,32(sp)
   805cc:	88800117 	ldw	r2,4(r17)
   805d0:	01c00044 	movi	r7,1
   805d4:	d9800804 	addi	r6,sp,32
   805d8:	880b883a 	mov	r5,r17
   805dc:	a009883a 	mov	r4,r20
   805e0:	103ee83a 	callr	r2
   805e4:	10002a1e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   805e8:	84000044 	addi	r16,r16,1
   805ec:	003fe706 	br	8058c <___vfprintf_internal_r+0x32c>
   805f0:	b5bfffc4 	addi	r22,r22,-1
   805f4:	b0800003 	ldbu	r2,0(r22)
   805f8:	01c00044 	movi	r7,1
   805fc:	d9800804 	addi	r6,sp,32
   80600:	d8800805 	stb	r2,32(sp)
   80604:	88800117 	ldw	r2,4(r17)
   80608:	880b883a 	mov	r5,r17
   8060c:	a009883a 	mov	r4,r20
   80610:	103ee83a 	callr	r2
   80614:	10001e1e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   80618:	8585c83a 	sub	r2,r16,r22
   8061c:	b5c9883a 	add	r4,r22,r23
   80620:	e085883a 	add	r2,fp,r2
   80624:	013ff216 	blt	zero,r4,805f0 <___vfprintf_internal_r+0x390>
   80628:	1021883a 	mov	r16,r2
   8062c:	dd800d17 	ldw	r22,52(sp)
   80630:	00004406 	br	80744 <___vfprintf_internal_r+0x4e4>
   80634:	00800044 	movi	r2,1
   80638:	1480080e 	bge	r2,r18,8065c <___vfprintf_internal_r+0x3fc>
   8063c:	95ffffc4 	addi	r23,r18,-1
   80640:	b80f883a 	mov	r7,r23
   80644:	01800804 	movi	r6,32
   80648:	880b883a 	mov	r5,r17
   8064c:	a009883a 	mov	r4,r20
   80650:	00801f40 	call	801f4 <print_repeat>
   80654:	10000e1e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   80658:	85e1883a 	add	r16,r16,r23
   8065c:	b0800017 	ldw	r2,0(r22)
   80660:	01c00044 	movi	r7,1
   80664:	d80d883a 	mov	r6,sp
   80668:	d8800005 	stb	r2,0(sp)
   8066c:	88800117 	ldw	r2,4(r17)
   80670:	880b883a 	mov	r5,r17
   80674:	a009883a 	mov	r4,r20
   80678:	b5c00104 	addi	r23,r22,4
   8067c:	103ee83a 	callr	r2
   80680:	1000031e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   80684:	84000044 	addi	r16,r16,1
   80688:	b82d883a 	mov	r22,r23
   8068c:	00002d06 	br	80744 <___vfprintf_internal_r+0x4e4>
   80690:	00bfffc4 	movi	r2,-1
   80694:	00003106 	br	8075c <___vfprintf_internal_r+0x4fc>
   80698:	b5c00017 	ldw	r23,0(r22)
   8069c:	b7000104 	addi	fp,r22,4
   806a0:	b809883a 	mov	r4,r23
   806a4:	00801d80 	call	801d8 <strlen>
   806a8:	9091c83a 	sub	r8,r18,r2
   806ac:	102d883a 	mov	r22,r2
   806b0:	0200090e 	bge	zero,r8,806d8 <___vfprintf_internal_r+0x478>
   806b4:	400f883a 	mov	r7,r8
   806b8:	01800804 	movi	r6,32
   806bc:	880b883a 	mov	r5,r17
   806c0:	a009883a 	mov	r4,r20
   806c4:	da001015 	stw	r8,64(sp)
   806c8:	00801f40 	call	801f4 <print_repeat>
   806cc:	da001017 	ldw	r8,64(sp)
   806d0:	103fef1e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   806d4:	8221883a 	add	r16,r16,r8
   806d8:	88800117 	ldw	r2,4(r17)
   806dc:	b00f883a 	mov	r7,r22
   806e0:	b80d883a 	mov	r6,r23
   806e4:	880b883a 	mov	r5,r17
   806e8:	a009883a 	mov	r4,r20
   806ec:	103ee83a 	callr	r2
   806f0:	103fe71e 	bne	r2,zero,80690 <___vfprintf_internal_r+0x430>
   806f4:	85a1883a 	add	r16,r16,r22
   806f8:	e02d883a 	mov	r22,fp
   806fc:	00001106 	br	80744 <___vfprintf_internal_r+0x4e4>
   80700:	00c00044 	movi	r3,1
   80704:	04ffffc4 	movi	r19,-1
   80708:	d8000e15 	stw	zero,56(sp)
   8070c:	d8c00a15 	stw	r3,40(sp)
   80710:	05400284 	movi	r21,10
   80714:	9825883a 	mov	r18,r19
   80718:	d8000c15 	stw	zero,48(sp)
   8071c:	d8000b15 	stw	zero,44(sp)
   80720:	182f883a 	mov	r23,r3
   80724:	00000806 	br	80748 <___vfprintf_internal_r+0x4e8>
   80728:	ddc00b15 	stw	r23,44(sp)
   8072c:	05c00084 	movi	r23,2
   80730:	00000506 	br	80748 <___vfprintf_internal_r+0x4e8>
   80734:	00c00044 	movi	r3,1
   80738:	d8c00c15 	stw	r3,48(sp)
   8073c:	05c000c4 	movi	r23,3
   80740:	00000106 	br	80748 <___vfprintf_internal_r+0x4e8>
   80744:	002f883a 	mov	r23,zero
   80748:	d8c00f17 	ldw	r3,60(sp)
   8074c:	18c00044 	addi	r3,r3,1
   80750:	d8c00f15 	stw	r3,60(sp)
   80754:	003edc06 	br	802c8 <___vfprintf_internal_r+0x68>
   80758:	8005883a 	mov	r2,r16
   8075c:	dfc01a17 	ldw	ra,104(sp)
   80760:	df001917 	ldw	fp,100(sp)
   80764:	ddc01817 	ldw	r23,96(sp)
   80768:	dd801717 	ldw	r22,92(sp)
   8076c:	dd401617 	ldw	r21,88(sp)
   80770:	dd001517 	ldw	r20,84(sp)
   80774:	dcc01417 	ldw	r19,80(sp)
   80778:	dc801317 	ldw	r18,76(sp)
   8077c:	dc401217 	ldw	r17,72(sp)
   80780:	dc001117 	ldw	r16,68(sp)
   80784:	dec01b04 	addi	sp,sp,108
   80788:	f800283a 	ret

0008078c <__vfprintf_internal>:
   8078c:	00800434 	movhi	r2,16
   80790:	1080c204 	addi	r2,r2,776
   80794:	300f883a 	mov	r7,r6
   80798:	280d883a 	mov	r6,r5
   8079c:	200b883a 	mov	r5,r4
   807a0:	11000017 	ldw	r4,0(r2)
   807a4:	00802601 	jmpi	80260 <___vfprintf_internal_r>

000807a8 <__sfvwrite_small_dev>:
   807a8:	2880000b 	ldhu	r2,0(r5)
   807ac:	1080020c 	andi	r2,r2,8
   807b0:	10002126 	beq	r2,zero,80838 <__sfvwrite_small_dev+0x90>
   807b4:	2880008f 	ldh	r2,2(r5)
   807b8:	defffa04 	addi	sp,sp,-24
   807bc:	dc000015 	stw	r16,0(sp)
   807c0:	dfc00515 	stw	ra,20(sp)
   807c4:	dd000415 	stw	r20,16(sp)
   807c8:	dcc00315 	stw	r19,12(sp)
   807cc:	dc800215 	stw	r18,8(sp)
   807d0:	dc400115 	stw	r17,4(sp)
   807d4:	2821883a 	mov	r16,r5
   807d8:	10001216 	blt	r2,zero,80824 <__sfvwrite_small_dev+0x7c>
   807dc:	2027883a 	mov	r19,r4
   807e0:	3025883a 	mov	r18,r6
   807e4:	3823883a 	mov	r17,r7
   807e8:	05010004 	movi	r20,1024
   807ec:	04400b0e 	bge	zero,r17,8081c <__sfvwrite_small_dev+0x74>
   807f0:	880f883a 	mov	r7,r17
   807f4:	a440010e 	bge	r20,r17,807fc <__sfvwrite_small_dev+0x54>
   807f8:	01c10004 	movi	r7,1024
   807fc:	8140008f 	ldh	r5,2(r16)
   80800:	900d883a 	mov	r6,r18
   80804:	9809883a 	mov	r4,r19
   80808:	00808600 	call	80860 <_write_r>
   8080c:	0080050e 	bge	zero,r2,80824 <__sfvwrite_small_dev+0x7c>
   80810:	88a3c83a 	sub	r17,r17,r2
   80814:	90a5883a 	add	r18,r18,r2
   80818:	003ff406 	br	807ec <__sfvwrite_small_dev+0x44>
   8081c:	0005883a 	mov	r2,zero
   80820:	00000706 	br	80840 <__sfvwrite_small_dev+0x98>
   80824:	8080000b 	ldhu	r2,0(r16)
   80828:	10801014 	ori	r2,r2,64
   8082c:	8080000d 	sth	r2,0(r16)
   80830:	00bfffc4 	movi	r2,-1
   80834:	00000206 	br	80840 <__sfvwrite_small_dev+0x98>
   80838:	00bfffc4 	movi	r2,-1
   8083c:	f800283a 	ret
   80840:	dfc00517 	ldw	ra,20(sp)
   80844:	dd000417 	ldw	r20,16(sp)
   80848:	dcc00317 	ldw	r19,12(sp)
   8084c:	dc800217 	ldw	r18,8(sp)
   80850:	dc400117 	ldw	r17,4(sp)
   80854:	dc000017 	ldw	r16,0(sp)
   80858:	dec00604 	addi	sp,sp,24
   8085c:	f800283a 	ret

00080860 <_write_r>:
   80860:	defffd04 	addi	sp,sp,-12
   80864:	dc000015 	stw	r16,0(sp)
   80868:	04000434 	movhi	r16,16
   8086c:	dc400115 	stw	r17,4(sp)
   80870:	8400c904 	addi	r16,r16,804
   80874:	2023883a 	mov	r17,r4
   80878:	2809883a 	mov	r4,r5
   8087c:	300b883a 	mov	r5,r6
   80880:	380d883a 	mov	r6,r7
   80884:	dfc00215 	stw	ra,8(sp)
   80888:	80000015 	stw	zero,0(r16)
   8088c:	0080c680 	call	80c68 <write>
   80890:	00ffffc4 	movi	r3,-1
   80894:	10c0031e 	bne	r2,r3,808a4 <_write_r+0x44>
   80898:	80c00017 	ldw	r3,0(r16)
   8089c:	18000126 	beq	r3,zero,808a4 <_write_r+0x44>
   808a0:	88c00015 	stw	r3,0(r17)
   808a4:	dfc00217 	ldw	ra,8(sp)
   808a8:	dc400117 	ldw	r17,4(sp)
   808ac:	dc000017 	ldw	r16,0(sp)
   808b0:	dec00304 	addi	sp,sp,12
   808b4:	f800283a 	ret

000808b8 <__divsi3>:
   808b8:	20001b16 	blt	r4,zero,80928 <__divsi3+0x70>
   808bc:	000f883a 	mov	r7,zero
   808c0:	28001616 	blt	r5,zero,8091c <__divsi3+0x64>
   808c4:	200d883a 	mov	r6,r4
   808c8:	29001a2e 	bgeu	r5,r4,80934 <__divsi3+0x7c>
   808cc:	00800804 	movi	r2,32
   808d0:	00c00044 	movi	r3,1
   808d4:	00000106 	br	808dc <__divsi3+0x24>
   808d8:	10000d26 	beq	r2,zero,80910 <__divsi3+0x58>
   808dc:	294b883a 	add	r5,r5,r5
   808e0:	10bfffc4 	addi	r2,r2,-1
   808e4:	18c7883a 	add	r3,r3,r3
   808e8:	293ffb36 	bltu	r5,r4,808d8 <__divsi3+0x20>
   808ec:	0005883a 	mov	r2,zero
   808f0:	18000726 	beq	r3,zero,80910 <__divsi3+0x58>
   808f4:	0005883a 	mov	r2,zero
   808f8:	31400236 	bltu	r6,r5,80904 <__divsi3+0x4c>
   808fc:	314dc83a 	sub	r6,r6,r5
   80900:	10c4b03a 	or	r2,r2,r3
   80904:	1806d07a 	srli	r3,r3,1
   80908:	280ad07a 	srli	r5,r5,1
   8090c:	183ffa1e 	bne	r3,zero,808f8 <__divsi3+0x40>
   80910:	38000126 	beq	r7,zero,80918 <__divsi3+0x60>
   80914:	0085c83a 	sub	r2,zero,r2
   80918:	f800283a 	ret
   8091c:	014bc83a 	sub	r5,zero,r5
   80920:	39c0005c 	xori	r7,r7,1
   80924:	003fe706 	br	808c4 <__divsi3+0xc>
   80928:	0109c83a 	sub	r4,zero,r4
   8092c:	01c00044 	movi	r7,1
   80930:	003fe306 	br	808c0 <__divsi3+0x8>
   80934:	00c00044 	movi	r3,1
   80938:	003fee06 	br	808f4 <__divsi3+0x3c>

0008093c <__modsi3>:
   8093c:	20001716 	blt	r4,zero,8099c <__modsi3+0x60>
   80940:	000f883a 	mov	r7,zero
   80944:	2005883a 	mov	r2,r4
   80948:	28001216 	blt	r5,zero,80994 <__modsi3+0x58>
   8094c:	2900162e 	bgeu	r5,r4,809a8 <__modsi3+0x6c>
   80950:	01800804 	movi	r6,32
   80954:	00c00044 	movi	r3,1
   80958:	00000106 	br	80960 <__modsi3+0x24>
   8095c:	30000a26 	beq	r6,zero,80988 <__modsi3+0x4c>
   80960:	294b883a 	add	r5,r5,r5
   80964:	31bfffc4 	addi	r6,r6,-1
   80968:	18c7883a 	add	r3,r3,r3
   8096c:	293ffb36 	bltu	r5,r4,8095c <__modsi3+0x20>
   80970:	18000526 	beq	r3,zero,80988 <__modsi3+0x4c>
   80974:	1806d07a 	srli	r3,r3,1
   80978:	11400136 	bltu	r2,r5,80980 <__modsi3+0x44>
   8097c:	1145c83a 	sub	r2,r2,r5
   80980:	280ad07a 	srli	r5,r5,1
   80984:	183ffb1e 	bne	r3,zero,80974 <__modsi3+0x38>
   80988:	38000126 	beq	r7,zero,80990 <__modsi3+0x54>
   8098c:	0085c83a 	sub	r2,zero,r2
   80990:	f800283a 	ret
   80994:	014bc83a 	sub	r5,zero,r5
   80998:	003fec06 	br	8094c <__modsi3+0x10>
   8099c:	0109c83a 	sub	r4,zero,r4
   809a0:	01c00044 	movi	r7,1
   809a4:	003fe706 	br	80944 <__modsi3+0x8>
   809a8:	00c00044 	movi	r3,1
   809ac:	003ff106 	br	80974 <__modsi3+0x38>

000809b0 <__udivsi3>:
   809b0:	200d883a 	mov	r6,r4
   809b4:	2900152e 	bgeu	r5,r4,80a0c <__udivsi3+0x5c>
   809b8:	28001416 	blt	r5,zero,80a0c <__udivsi3+0x5c>
   809bc:	00800804 	movi	r2,32
   809c0:	00c00044 	movi	r3,1
   809c4:	00000206 	br	809d0 <__udivsi3+0x20>
   809c8:	10000e26 	beq	r2,zero,80a04 <__udivsi3+0x54>
   809cc:	28000516 	blt	r5,zero,809e4 <__udivsi3+0x34>
   809d0:	294b883a 	add	r5,r5,r5
   809d4:	10bfffc4 	addi	r2,r2,-1
   809d8:	18c7883a 	add	r3,r3,r3
   809dc:	293ffa36 	bltu	r5,r4,809c8 <__udivsi3+0x18>
   809e0:	18000826 	beq	r3,zero,80a04 <__udivsi3+0x54>
   809e4:	0005883a 	mov	r2,zero
   809e8:	31400236 	bltu	r6,r5,809f4 <__udivsi3+0x44>
   809ec:	314dc83a 	sub	r6,r6,r5
   809f0:	10c4b03a 	or	r2,r2,r3
   809f4:	1806d07a 	srli	r3,r3,1
   809f8:	280ad07a 	srli	r5,r5,1
   809fc:	183ffa1e 	bne	r3,zero,809e8 <__udivsi3+0x38>
   80a00:	f800283a 	ret
   80a04:	0005883a 	mov	r2,zero
   80a08:	f800283a 	ret
   80a0c:	00c00044 	movi	r3,1
   80a10:	003ff406 	br	809e4 <__udivsi3+0x34>

00080a14 <__umodsi3>:
   80a14:	2005883a 	mov	r2,r4
   80a18:	2900122e 	bgeu	r5,r4,80a64 <__umodsi3+0x50>
   80a1c:	28001116 	blt	r5,zero,80a64 <__umodsi3+0x50>
   80a20:	01800804 	movi	r6,32
   80a24:	00c00044 	movi	r3,1
   80a28:	00000206 	br	80a34 <__umodsi3+0x20>
   80a2c:	30000c26 	beq	r6,zero,80a60 <__umodsi3+0x4c>
   80a30:	28000516 	blt	r5,zero,80a48 <__umodsi3+0x34>
   80a34:	294b883a 	add	r5,r5,r5
   80a38:	31bfffc4 	addi	r6,r6,-1
   80a3c:	18c7883a 	add	r3,r3,r3
   80a40:	293ffa36 	bltu	r5,r4,80a2c <__umodsi3+0x18>
   80a44:	18000626 	beq	r3,zero,80a60 <__umodsi3+0x4c>
   80a48:	1806d07a 	srli	r3,r3,1
   80a4c:	11400136 	bltu	r2,r5,80a54 <__umodsi3+0x40>
   80a50:	1145c83a 	sub	r2,r2,r5
   80a54:	280ad07a 	srli	r5,r5,1
   80a58:	183ffb1e 	bne	r3,zero,80a48 <__umodsi3+0x34>
   80a5c:	f800283a 	ret
   80a60:	f800283a 	ret
   80a64:	00c00044 	movi	r3,1
   80a68:	003ff706 	br	80a48 <__umodsi3+0x34>

00080a6c <__mulsi3>:
   80a6c:	0005883a 	mov	r2,zero
   80a70:	20000726 	beq	r4,zero,80a90 <__mulsi3+0x24>
   80a74:	20c0004c 	andi	r3,r4,1
   80a78:	2008d07a 	srli	r4,r4,1
   80a7c:	18000126 	beq	r3,zero,80a84 <__mulsi3+0x18>
   80a80:	1145883a 	add	r2,r2,r5
   80a84:	294b883a 	add	r5,r5,r5
   80a88:	203ffa1e 	bne	r4,zero,80a74 <__mulsi3+0x8>
   80a8c:	f800283a 	ret
   80a90:	f800283a 	ret

00080a94 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   80a94:	defffc04 	addi	sp,sp,-16
   80a98:	df000315 	stw	fp,12(sp)
   80a9c:	df000304 	addi	fp,sp,12
   80aa0:	e13ffd15 	stw	r4,-12(fp)
   80aa4:	e17ffe15 	stw	r5,-8(fp)
   80aa8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   80aac:	e0fffe17 	ldw	r3,-8(fp)
   80ab0:	e0bffd17 	ldw	r2,-12(fp)
   80ab4:	18800c26 	beq	r3,r2,80ae8 <alt_load_section+0x54>
  {
    while( to != end )
   80ab8:	00000806 	br	80adc <alt_load_section+0x48>
    {
      *to++ = *from++;
   80abc:	e0bffe17 	ldw	r2,-8(fp)
   80ac0:	10c00104 	addi	r3,r2,4
   80ac4:	e0fffe15 	stw	r3,-8(fp)
   80ac8:	e0fffd17 	ldw	r3,-12(fp)
   80acc:	19000104 	addi	r4,r3,4
   80ad0:	e13ffd15 	stw	r4,-12(fp)
   80ad4:	18c00017 	ldw	r3,0(r3)
   80ad8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80adc:	e0fffe17 	ldw	r3,-8(fp)
   80ae0:	e0bfff17 	ldw	r2,-4(fp)
   80ae4:	18bff51e 	bne	r3,r2,80abc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   80ae8:	0001883a 	nop
   80aec:	e037883a 	mov	sp,fp
   80af0:	df000017 	ldw	fp,0(sp)
   80af4:	dec00104 	addi	sp,sp,4
   80af8:	f800283a 	ret

00080afc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80afc:	defffe04 	addi	sp,sp,-8
   80b00:	dfc00115 	stw	ra,4(sp)
   80b04:	df000015 	stw	fp,0(sp)
   80b08:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80b0c:	01800434 	movhi	r6,16
   80b10:	3180c904 	addi	r6,r6,804
   80b14:	01400434 	movhi	r5,16
   80b18:	29401404 	addi	r5,r5,80
   80b1c:	01000234 	movhi	r4,8
   80b20:	2107ca04 	addi	r4,r4,7976
   80b24:	0080a940 	call	80a94 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   80b28:	01800234 	movhi	r6,8
   80b2c:	31800804 	addi	r6,r6,32
   80b30:	01400234 	movhi	r5,8
   80b34:	29400804 	addi	r5,r5,32
   80b38:	01000234 	movhi	r4,8
   80b3c:	21000804 	addi	r4,r4,32
   80b40:	0080a940 	call	80a94 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   80b44:	01800434 	movhi	r6,16
   80b48:	31801404 	addi	r6,r6,80
   80b4c:	01400434 	movhi	r5,16
   80b50:	29400004 	addi	r5,r5,0
   80b54:	01000434 	movhi	r4,16
   80b58:	21000004 	addi	r4,r4,0
   80b5c:	0080a940 	call	80a94 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   80b60:	00812b40 	call	812b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
   80b64:	00814a00 	call	814a0 <alt_icache_flush_all>
}
   80b68:	0001883a 	nop
   80b6c:	e037883a 	mov	sp,fp
   80b70:	dfc00117 	ldw	ra,4(sp)
   80b74:	df000017 	ldw	fp,0(sp)
   80b78:	dec00204 	addi	sp,sp,8
   80b7c:	f800283a 	ret

00080b80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80b80:	defffd04 	addi	sp,sp,-12
   80b84:	dfc00215 	stw	ra,8(sp)
   80b88:	df000115 	stw	fp,4(sp)
   80b8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80b90:	0009883a 	mov	r4,zero
   80b94:	0080d9c0 	call	80d9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   80b98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80b9c:	0080dd40 	call	80dd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80ba0:	01800434 	movhi	r6,16
   80ba4:	31800704 	addi	r6,r6,28
   80ba8:	01400434 	movhi	r5,16
   80bac:	29400704 	addi	r5,r5,28
   80bb0:	01000434 	movhi	r4,16
   80bb4:	21000704 	addi	r4,r4,28
   80bb8:	00815a40 	call	815a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   80bbc:	00813e00 	call	813e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   80bc0:	01000234 	movhi	r4,8
   80bc4:	21051004 	addi	r4,r4,5184
   80bc8:	0081ba80 	call	81ba8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80bcc:	d0a00917 	ldw	r2,-32732(gp)
   80bd0:	d0e00a17 	ldw	r3,-32728(gp)
   80bd4:	d1200b17 	ldw	r4,-32724(gp)
   80bd8:	200d883a 	mov	r6,r4
   80bdc:	180b883a 	mov	r5,r3
   80be0:	1009883a 	mov	r4,r2
   80be4:	008005c0 	call	8005c <main>
   80be8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   80bec:	01000044 	movi	r4,1
   80bf0:	00811dc0 	call	811dc <close>
  exit (result);
   80bf4:	e13fff17 	ldw	r4,-4(fp)
   80bf8:	0081bbc0 	call	81bbc <exit>

00080bfc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   80bfc:	defffd04 	addi	sp,sp,-12
   80c00:	dfc00215 	stw	ra,8(sp)
   80c04:	df000115 	stw	fp,4(sp)
   80c08:	df000104 	addi	fp,sp,4
   80c0c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   80c10:	e13fff17 	ldw	r4,-4(fp)
   80c14:	00810480 	call	81048 <alt_busy_sleep>
}
   80c18:	e037883a 	mov	sp,fp
   80c1c:	dfc00117 	ldw	ra,4(sp)
   80c20:	df000017 	ldw	fp,0(sp)
   80c24:	dec00204 	addi	sp,sp,8
   80c28:	f800283a 	ret

00080c2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   80c2c:	defffe04 	addi	sp,sp,-8
   80c30:	dfc00115 	stw	ra,4(sp)
   80c34:	df000015 	stw	fp,0(sp)
   80c38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   80c3c:	d0a00717 	ldw	r2,-32740(gp)
   80c40:	10000326 	beq	r2,zero,80c50 <alt_get_errno+0x24>
   80c44:	d0a00717 	ldw	r2,-32740(gp)
   80c48:	103ee83a 	callr	r2
   80c4c:	00000106 	br	80c54 <alt_get_errno+0x28>
   80c50:	d0a00804 	addi	r2,gp,-32736
}
   80c54:	e037883a 	mov	sp,fp
   80c58:	dfc00117 	ldw	ra,4(sp)
   80c5c:	df000017 	ldw	fp,0(sp)
   80c60:	dec00204 	addi	sp,sp,8
   80c64:	f800283a 	ret

00080c68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   80c68:	defff904 	addi	sp,sp,-28
   80c6c:	dfc00615 	stw	ra,24(sp)
   80c70:	df000515 	stw	fp,20(sp)
   80c74:	df000504 	addi	fp,sp,20
   80c78:	e13ffd15 	stw	r4,-12(fp)
   80c7c:	e17ffe15 	stw	r5,-8(fp)
   80c80:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   80c84:	e0bffd17 	ldw	r2,-12(fp)
   80c88:	10000816 	blt	r2,zero,80cac <write+0x44>
   80c8c:	01400304 	movi	r5,12
   80c90:	e13ffd17 	ldw	r4,-12(fp)
   80c94:	0080a6c0 	call	80a6c <__mulsi3>
   80c98:	1007883a 	mov	r3,r2
   80c9c:	00800434 	movhi	r2,16
   80ca0:	10806104 	addi	r2,r2,388
   80ca4:	1885883a 	add	r2,r3,r2
   80ca8:	00000106 	br	80cb0 <write+0x48>
   80cac:	0005883a 	mov	r2,zero
   80cb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   80cb4:	e0bffb17 	ldw	r2,-20(fp)
   80cb8:	10002126 	beq	r2,zero,80d40 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   80cbc:	e0bffb17 	ldw	r2,-20(fp)
   80cc0:	10800217 	ldw	r2,8(r2)
   80cc4:	108000cc 	andi	r2,r2,3
   80cc8:	10001826 	beq	r2,zero,80d2c <write+0xc4>
   80ccc:	e0bffb17 	ldw	r2,-20(fp)
   80cd0:	10800017 	ldw	r2,0(r2)
   80cd4:	10800617 	ldw	r2,24(r2)
   80cd8:	10001426 	beq	r2,zero,80d2c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   80cdc:	e0bffb17 	ldw	r2,-20(fp)
   80ce0:	10800017 	ldw	r2,0(r2)
   80ce4:	10800617 	ldw	r2,24(r2)
   80ce8:	e0ffff17 	ldw	r3,-4(fp)
   80cec:	180d883a 	mov	r6,r3
   80cf0:	e17ffe17 	ldw	r5,-8(fp)
   80cf4:	e13ffb17 	ldw	r4,-20(fp)
   80cf8:	103ee83a 	callr	r2
   80cfc:	e0bffc15 	stw	r2,-16(fp)
   80d00:	e0bffc17 	ldw	r2,-16(fp)
   80d04:	1000070e 	bge	r2,zero,80d24 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   80d08:	0080c2c0 	call	80c2c <alt_get_errno>
   80d0c:	1007883a 	mov	r3,r2
   80d10:	e0bffc17 	ldw	r2,-16(fp)
   80d14:	0085c83a 	sub	r2,zero,r2
   80d18:	18800015 	stw	r2,0(r3)
        return -1;
   80d1c:	00bfffc4 	movi	r2,-1
   80d20:	00000c06 	br	80d54 <write+0xec>
      }
      return rval;
   80d24:	e0bffc17 	ldw	r2,-16(fp)
   80d28:	00000a06 	br	80d54 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   80d2c:	0080c2c0 	call	80c2c <alt_get_errno>
   80d30:	1007883a 	mov	r3,r2
   80d34:	00800344 	movi	r2,13
   80d38:	18800015 	stw	r2,0(r3)
   80d3c:	00000406 	br	80d50 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   80d40:	0080c2c0 	call	80c2c <alt_get_errno>
   80d44:	1007883a 	mov	r3,r2
   80d48:	00801444 	movi	r2,81
   80d4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   80d50:	00bfffc4 	movi	r2,-1
}
   80d54:	e037883a 	mov	sp,fp
   80d58:	dfc00117 	ldw	ra,4(sp)
   80d5c:	df000017 	ldw	fp,0(sp)
   80d60:	dec00204 	addi	sp,sp,8
   80d64:	f800283a 	ret

00080d68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80d68:	defffd04 	addi	sp,sp,-12
   80d6c:	dfc00215 	stw	ra,8(sp)
   80d70:	df000115 	stw	fp,4(sp)
   80d74:	df000104 	addi	fp,sp,4
   80d78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80d7c:	d1600404 	addi	r5,gp,-32752
   80d80:	e13fff17 	ldw	r4,-4(fp)
   80d84:	008133c0 	call	8133c <alt_dev_llist_insert>
}
   80d88:	e037883a 	mov	sp,fp
   80d8c:	dfc00117 	ldw	ra,4(sp)
   80d90:	df000017 	ldw	fp,0(sp)
   80d94:	dec00204 	addi	sp,sp,8
   80d98:	f800283a 	ret

00080d9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80d9c:	defffd04 	addi	sp,sp,-12
   80da0:	dfc00215 	stw	ra,8(sp)
   80da4:	df000115 	stw	fp,4(sp)
   80da8:	df000104 	addi	fp,sp,4
   80dac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   80db0:	00819280 	call	81928 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80db4:	00800044 	movi	r2,1
   80db8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80dbc:	0001883a 	nop
   80dc0:	e037883a 	mov	sp,fp
   80dc4:	dfc00117 	ldw	ra,4(sp)
   80dc8:	df000017 	ldw	fp,0(sp)
   80dcc:	dec00204 	addi	sp,sp,8
   80dd0:	f800283a 	ret

00080dd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80dd4:	defffe04 	addi	sp,sp,-8
   80dd8:	dfc00115 	stw	ra,4(sp)
   80ddc:	df000015 	stw	fp,0(sp)
   80de0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   80de4:	01000434 	movhi	r4,16
   80de8:	21004c04 	addi	r4,r4,304
   80dec:	0080d680 	call	80d68 <alt_dev_reg>
}
   80df0:	0001883a 	nop
   80df4:	e037883a 	mov	sp,fp
   80df8:	dfc00117 	ldw	ra,4(sp)
   80dfc:	df000017 	ldw	fp,0(sp)
   80e00:	dec00204 	addi	sp,sp,8
   80e04:	f800283a 	ret

00080e08 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80e08:	defffa04 	addi	sp,sp,-24
   80e0c:	dfc00515 	stw	ra,20(sp)
   80e10:	df000415 	stw	fp,16(sp)
   80e14:	df000404 	addi	fp,sp,16
   80e18:	e13ffd15 	stw	r4,-12(fp)
   80e1c:	e17ffe15 	stw	r5,-8(fp)
   80e20:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80e24:	e0bffd17 	ldw	r2,-12(fp)
   80e28:	10800017 	ldw	r2,0(r2)
   80e2c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   80e30:	e0bffc17 	ldw	r2,-16(fp)
   80e34:	10c00a04 	addi	r3,r2,40
   80e38:	e0bffd17 	ldw	r2,-12(fp)
   80e3c:	10800217 	ldw	r2,8(r2)
   80e40:	100f883a 	mov	r7,r2
   80e44:	e1bfff17 	ldw	r6,-4(fp)
   80e48:	e17ffe17 	ldw	r5,-8(fp)
   80e4c:	1809883a 	mov	r4,r3
   80e50:	0080ec80 	call	80ec8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80e54:	e037883a 	mov	sp,fp
   80e58:	dfc00117 	ldw	ra,4(sp)
   80e5c:	df000017 	ldw	fp,0(sp)
   80e60:	dec00204 	addi	sp,sp,8
   80e64:	f800283a 	ret

00080e68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80e68:	defffa04 	addi	sp,sp,-24
   80e6c:	dfc00515 	stw	ra,20(sp)
   80e70:	df000415 	stw	fp,16(sp)
   80e74:	df000404 	addi	fp,sp,16
   80e78:	e13ffd15 	stw	r4,-12(fp)
   80e7c:	e17ffe15 	stw	r5,-8(fp)
   80e80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80e84:	e0bffd17 	ldw	r2,-12(fp)
   80e88:	10800017 	ldw	r2,0(r2)
   80e8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80e90:	e0bffc17 	ldw	r2,-16(fp)
   80e94:	10c00a04 	addi	r3,r2,40
   80e98:	e0bffd17 	ldw	r2,-12(fp)
   80e9c:	10800217 	ldw	r2,8(r2)
   80ea0:	100f883a 	mov	r7,r2
   80ea4:	e1bfff17 	ldw	r6,-4(fp)
   80ea8:	e17ffe17 	ldw	r5,-8(fp)
   80eac:	1809883a 	mov	r4,r3
   80eb0:	0080fb40 	call	80fb4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80eb4:	e037883a 	mov	sp,fp
   80eb8:	dfc00117 	ldw	ra,4(sp)
   80ebc:	df000017 	ldw	fp,0(sp)
   80ec0:	dec00204 	addi	sp,sp,8
   80ec4:	f800283a 	ret

00080ec8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   80ec8:	defff704 	addi	sp,sp,-36
   80ecc:	df000815 	stw	fp,32(sp)
   80ed0:	df000804 	addi	fp,sp,32
   80ed4:	e13ffc15 	stw	r4,-16(fp)
   80ed8:	e17ffd15 	stw	r5,-12(fp)
   80edc:	e1bffe15 	stw	r6,-8(fp)
   80ee0:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   80ee4:	e0bffc17 	ldw	r2,-16(fp)
   80ee8:	10800017 	ldw	r2,0(r2)
   80eec:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   80ef0:	e0bffd17 	ldw	r2,-12(fp)
   80ef4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   80ef8:	e0bffe17 	ldw	r2,-8(fp)
   80efc:	e0fffd17 	ldw	r3,-12(fp)
   80f00:	1885883a 	add	r2,r3,r2
   80f04:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   80f08:	00001206 	br	80f54 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80f0c:	e0bff917 	ldw	r2,-28(fp)
   80f10:	10800037 	ldwio	r2,0(r2)
   80f14:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   80f18:	e0bffb17 	ldw	r2,-20(fp)
   80f1c:	10a0000c 	andi	r2,r2,32768
   80f20:	10000626 	beq	r2,zero,80f3c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80f24:	e0bff817 	ldw	r2,-32(fp)
   80f28:	10c00044 	addi	r3,r2,1
   80f2c:	e0fff815 	stw	r3,-32(fp)
   80f30:	e0fffb17 	ldw	r3,-20(fp)
   80f34:	10c00005 	stb	r3,0(r2)
   80f38:	00000606 	br	80f54 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   80f3c:	e0fff817 	ldw	r3,-32(fp)
   80f40:	e0bffd17 	ldw	r2,-12(fp)
   80f44:	1880071e 	bne	r3,r2,80f64 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   80f48:	e0bfff17 	ldw	r2,-4(fp)
   80f4c:	1090000c 	andi	r2,r2,16384
   80f50:	1000061e 	bne	r2,zero,80f6c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   80f54:	e0fff817 	ldw	r3,-32(fp)
   80f58:	e0bffa17 	ldw	r2,-24(fp)
   80f5c:	18bfeb36 	bltu	r3,r2,80f0c <altera_avalon_jtag_uart_read+0x44>
   80f60:	00000306 	br	80f70 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   80f64:	0001883a 	nop
   80f68:	00000106 	br	80f70 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   80f6c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   80f70:	e0fff817 	ldw	r3,-32(fp)
   80f74:	e0bffd17 	ldw	r2,-12(fp)
   80f78:	18800426 	beq	r3,r2,80f8c <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   80f7c:	e0fff817 	ldw	r3,-32(fp)
   80f80:	e0bffd17 	ldw	r2,-12(fp)
   80f84:	1885c83a 	sub	r2,r3,r2
   80f88:	00000606 	br	80fa4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   80f8c:	e0bfff17 	ldw	r2,-4(fp)
   80f90:	1090000c 	andi	r2,r2,16384
   80f94:	10000226 	beq	r2,zero,80fa0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   80f98:	00bffd44 	movi	r2,-11
   80f9c:	00000106 	br	80fa4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   80fa0:	00bffec4 	movi	r2,-5
}
   80fa4:	e037883a 	mov	sp,fp
   80fa8:	df000017 	ldw	fp,0(sp)
   80fac:	dec00104 	addi	sp,sp,4
   80fb0:	f800283a 	ret

00080fb4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   80fb4:	defff904 	addi	sp,sp,-28
   80fb8:	df000615 	stw	fp,24(sp)
   80fbc:	df000604 	addi	fp,sp,24
   80fc0:	e13ffc15 	stw	r4,-16(fp)
   80fc4:	e17ffd15 	stw	r5,-12(fp)
   80fc8:	e1bffe15 	stw	r6,-8(fp)
   80fcc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   80fd0:	e0bffc17 	ldw	r2,-16(fp)
   80fd4:	10800017 	ldw	r2,0(r2)
   80fd8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   80fdc:	e0bffe17 	ldw	r2,-8(fp)
   80fe0:	e0fffd17 	ldw	r3,-12(fp)
   80fe4:	1885883a 	add	r2,r3,r2
   80fe8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   80fec:	00000e06 	br	81028 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   80ff0:	e0bffa17 	ldw	r2,-24(fp)
   80ff4:	10800104 	addi	r2,r2,4
   80ff8:	10800037 	ldwio	r2,0(r2)
   80ffc:	10bfffec 	andhi	r2,r2,65535
   81000:	10000926 	beq	r2,zero,81028 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   81004:	e0fffa17 	ldw	r3,-24(fp)
   81008:	e0bffd17 	ldw	r2,-12(fp)
   8100c:	11000044 	addi	r4,r2,1
   81010:	e13ffd15 	stw	r4,-12(fp)
   81014:	10800003 	ldbu	r2,0(r2)
   81018:	10803fcc 	andi	r2,r2,255
   8101c:	1080201c 	xori	r2,r2,128
   81020:	10bfe004 	addi	r2,r2,-128
   81024:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   81028:	e0fffd17 	ldw	r3,-12(fp)
   8102c:	e0bffb17 	ldw	r2,-20(fp)
   81030:	18bfef36 	bltu	r3,r2,80ff0 <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   81034:	e0bffe17 	ldw	r2,-8(fp)
}
   81038:	e037883a 	mov	sp,fp
   8103c:	df000017 	ldw	fp,0(sp)
   81040:	dec00104 	addi	sp,sp,4
   81044:	f800283a 	ret

00081048 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   81048:	defffa04 	addi	sp,sp,-24
   8104c:	dfc00515 	stw	ra,20(sp)
   81050:	df000415 	stw	fp,16(sp)
   81054:	df000404 	addi	fp,sp,16
   81058:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   8105c:	00800244 	movi	r2,9
   81060:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   81064:	014003f4 	movhi	r5,15
   81068:	29509004 	addi	r5,r5,16960
   8106c:	e13ffd17 	ldw	r4,-12(fp)
   81070:	0080a6c0 	call	80a6c <__mulsi3>
   81074:	100b883a 	mov	r5,r2
   81078:	0100bef4 	movhi	r4,763
   8107c:	213c2004 	addi	r4,r4,-3968
   81080:	00809b00 	call	809b0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   81084:	100b883a 	mov	r5,r2
   81088:	01200034 	movhi	r4,32768
   8108c:	213fffc4 	addi	r4,r4,-1
   81090:	00809b00 	call	809b0 <__udivsi3>
   81094:	100b883a 	mov	r5,r2
   81098:	e13fff17 	ldw	r4,-4(fp)
   8109c:	00809b00 	call	809b0 <__udivsi3>
   810a0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   810a4:	e0bffe17 	ldw	r2,-8(fp)
   810a8:	10002a26 	beq	r2,zero,81154 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   810ac:	e03ffc15 	stw	zero,-16(fp)
   810b0:	00001706 	br	81110 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   810b4:	00a00034 	movhi	r2,32768
   810b8:	10bfffc4 	addi	r2,r2,-1
   810bc:	10bfffc4 	addi	r2,r2,-1
   810c0:	103ffe1e 	bne	r2,zero,810bc <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   810c4:	014003f4 	movhi	r5,15
   810c8:	29509004 	addi	r5,r5,16960
   810cc:	e13ffd17 	ldw	r4,-12(fp)
   810d0:	0080a6c0 	call	80a6c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   810d4:	100b883a 	mov	r5,r2
   810d8:	0100bef4 	movhi	r4,763
   810dc:	213c2004 	addi	r4,r4,-3968
   810e0:	00809b00 	call	809b0 <__udivsi3>
   810e4:	100b883a 	mov	r5,r2
   810e8:	01200034 	movhi	r4,32768
   810ec:	213fffc4 	addi	r4,r4,-1
   810f0:	00809b00 	call	809b0 <__udivsi3>
   810f4:	1007883a 	mov	r3,r2
   810f8:	e0bfff17 	ldw	r2,-4(fp)
   810fc:	10c5c83a 	sub	r2,r2,r3
   81100:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   81104:	e0bffc17 	ldw	r2,-16(fp)
   81108:	10800044 	addi	r2,r2,1
   8110c:	e0bffc15 	stw	r2,-16(fp)
   81110:	e0fffc17 	ldw	r3,-16(fp)
   81114:	e0bffe17 	ldw	r2,-8(fp)
   81118:	18bfe616 	blt	r3,r2,810b4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8111c:	014003f4 	movhi	r5,15
   81120:	29509004 	addi	r5,r5,16960
   81124:	e13ffd17 	ldw	r4,-12(fp)
   81128:	0080a6c0 	call	80a6c <__mulsi3>
   8112c:	100b883a 	mov	r5,r2
   81130:	0100bef4 	movhi	r4,763
   81134:	213c2004 	addi	r4,r4,-3968
   81138:	00809b00 	call	809b0 <__udivsi3>
   8113c:	e17fff17 	ldw	r5,-4(fp)
   81140:	1009883a 	mov	r4,r2
   81144:	0080a6c0 	call	80a6c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   81148:	10bfffc4 	addi	r2,r2,-1
   8114c:	103ffe1e 	bne	r2,zero,81148 <alt_busy_sleep+0x100>
   81150:	00000d06 	br	81188 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   81154:	014003f4 	movhi	r5,15
   81158:	29509004 	addi	r5,r5,16960
   8115c:	e13ffd17 	ldw	r4,-12(fp)
   81160:	0080a6c0 	call	80a6c <__mulsi3>
   81164:	100b883a 	mov	r5,r2
   81168:	0100bef4 	movhi	r4,763
   8116c:	213c2004 	addi	r4,r4,-3968
   81170:	00809b00 	call	809b0 <__udivsi3>
   81174:	e17fff17 	ldw	r5,-4(fp)
   81178:	1009883a 	mov	r4,r2
   8117c:	0080a6c0 	call	80a6c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   81180:	10bfffc4 	addi	r2,r2,-1
   81184:	00bffe16 	blt	zero,r2,81180 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   81188:	0005883a 	mov	r2,zero
}
   8118c:	e037883a 	mov	sp,fp
   81190:	dfc00117 	ldw	ra,4(sp)
   81194:	df000017 	ldw	fp,0(sp)
   81198:	dec00204 	addi	sp,sp,8
   8119c:	f800283a 	ret

000811a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   811a0:	defffe04 	addi	sp,sp,-8
   811a4:	dfc00115 	stw	ra,4(sp)
   811a8:	df000015 	stw	fp,0(sp)
   811ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   811b0:	d0a00717 	ldw	r2,-32740(gp)
   811b4:	10000326 	beq	r2,zero,811c4 <alt_get_errno+0x24>
   811b8:	d0a00717 	ldw	r2,-32740(gp)
   811bc:	103ee83a 	callr	r2
   811c0:	00000106 	br	811c8 <alt_get_errno+0x28>
   811c4:	d0a00804 	addi	r2,gp,-32736
}
   811c8:	e037883a 	mov	sp,fp
   811cc:	dfc00117 	ldw	ra,4(sp)
   811d0:	df000017 	ldw	fp,0(sp)
   811d4:	dec00204 	addi	sp,sp,8
   811d8:	f800283a 	ret

000811dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   811dc:	defffb04 	addi	sp,sp,-20
   811e0:	dfc00415 	stw	ra,16(sp)
   811e4:	df000315 	stw	fp,12(sp)
   811e8:	df000304 	addi	fp,sp,12
   811ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   811f0:	e0bfff17 	ldw	r2,-4(fp)
   811f4:	10000816 	blt	r2,zero,81218 <close+0x3c>
   811f8:	01400304 	movi	r5,12
   811fc:	e13fff17 	ldw	r4,-4(fp)
   81200:	0080a6c0 	call	80a6c <__mulsi3>
   81204:	1007883a 	mov	r3,r2
   81208:	00800434 	movhi	r2,16
   8120c:	10806104 	addi	r2,r2,388
   81210:	1885883a 	add	r2,r3,r2
   81214:	00000106 	br	8121c <close+0x40>
   81218:	0005883a 	mov	r2,zero
   8121c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   81220:	e0bffd17 	ldw	r2,-12(fp)
   81224:	10001926 	beq	r2,zero,8128c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   81228:	e0bffd17 	ldw	r2,-12(fp)
   8122c:	10800017 	ldw	r2,0(r2)
   81230:	10800417 	ldw	r2,16(r2)
   81234:	10000626 	beq	r2,zero,81250 <close+0x74>
   81238:	e0bffd17 	ldw	r2,-12(fp)
   8123c:	10800017 	ldw	r2,0(r2)
   81240:	10800417 	ldw	r2,16(r2)
   81244:	e13ffd17 	ldw	r4,-12(fp)
   81248:	103ee83a 	callr	r2
   8124c:	00000106 	br	81254 <close+0x78>
   81250:	0005883a 	mov	r2,zero
   81254:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   81258:	e13fff17 	ldw	r4,-4(fp)
   8125c:	00818a40 	call	818a4 <alt_release_fd>
    if (rval < 0)
   81260:	e0bffe17 	ldw	r2,-8(fp)
   81264:	1000070e 	bge	r2,zero,81284 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   81268:	00811a00 	call	811a0 <alt_get_errno>
   8126c:	1007883a 	mov	r3,r2
   81270:	e0bffe17 	ldw	r2,-8(fp)
   81274:	0085c83a 	sub	r2,zero,r2
   81278:	18800015 	stw	r2,0(r3)
      return -1;
   8127c:	00bfffc4 	movi	r2,-1
   81280:	00000706 	br	812a0 <close+0xc4>
    }
    return 0;
   81284:	0005883a 	mov	r2,zero
   81288:	00000506 	br	812a0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8128c:	00811a00 	call	811a0 <alt_get_errno>
   81290:	1007883a 	mov	r3,r2
   81294:	00801444 	movi	r2,81
   81298:	18800015 	stw	r2,0(r3)
    return -1;
   8129c:	00bfffc4 	movi	r2,-1
  }
}
   812a0:	e037883a 	mov	sp,fp
   812a4:	dfc00117 	ldw	ra,4(sp)
   812a8:	df000017 	ldw	fp,0(sp)
   812ac:	dec00204 	addi	sp,sp,8
   812b0:	f800283a 	ret

000812b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   812b4:	deffff04 	addi	sp,sp,-4
   812b8:	df000015 	stw	fp,0(sp)
   812bc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   812c0:	0001883a 	nop
   812c4:	e037883a 	mov	sp,fp
   812c8:	df000017 	ldw	fp,0(sp)
   812cc:	dec00104 	addi	sp,sp,4
   812d0:	f800283a 	ret

000812d4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   812d4:	defffc04 	addi	sp,sp,-16
   812d8:	df000315 	stw	fp,12(sp)
   812dc:	df000304 	addi	fp,sp,12
   812e0:	e13ffd15 	stw	r4,-12(fp)
   812e4:	e17ffe15 	stw	r5,-8(fp)
   812e8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   812ec:	e0bfff17 	ldw	r2,-4(fp)
}
   812f0:	e037883a 	mov	sp,fp
   812f4:	df000017 	ldw	fp,0(sp)
   812f8:	dec00104 	addi	sp,sp,4
   812fc:	f800283a 	ret

00081300 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81300:	defffe04 	addi	sp,sp,-8
   81304:	dfc00115 	stw	ra,4(sp)
   81308:	df000015 	stw	fp,0(sp)
   8130c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81310:	d0a00717 	ldw	r2,-32740(gp)
   81314:	10000326 	beq	r2,zero,81324 <alt_get_errno+0x24>
   81318:	d0a00717 	ldw	r2,-32740(gp)
   8131c:	103ee83a 	callr	r2
   81320:	00000106 	br	81328 <alt_get_errno+0x28>
   81324:	d0a00804 	addi	r2,gp,-32736
}
   81328:	e037883a 	mov	sp,fp
   8132c:	dfc00117 	ldw	ra,4(sp)
   81330:	df000017 	ldw	fp,0(sp)
   81334:	dec00204 	addi	sp,sp,8
   81338:	f800283a 	ret

0008133c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8133c:	defffa04 	addi	sp,sp,-24
   81340:	dfc00515 	stw	ra,20(sp)
   81344:	df000415 	stw	fp,16(sp)
   81348:	df000404 	addi	fp,sp,16
   8134c:	e13ffe15 	stw	r4,-8(fp)
   81350:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   81354:	e0bffe17 	ldw	r2,-8(fp)
   81358:	10000326 	beq	r2,zero,81368 <alt_dev_llist_insert+0x2c>
   8135c:	e0bffe17 	ldw	r2,-8(fp)
   81360:	10800217 	ldw	r2,8(r2)
   81364:	1000061e 	bne	r2,zero,81380 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   81368:	00813000 	call	81300 <alt_get_errno>
   8136c:	1007883a 	mov	r3,r2
   81370:	00800584 	movi	r2,22
   81374:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   81378:	00bffa84 	movi	r2,-22
   8137c:	00001306 	br	813cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   81380:	e0bffe17 	ldw	r2,-8(fp)
   81384:	e0ffff17 	ldw	r3,-4(fp)
   81388:	e0fffc15 	stw	r3,-16(fp)
   8138c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   81390:	e0bffd17 	ldw	r2,-12(fp)
   81394:	e0fffc17 	ldw	r3,-16(fp)
   81398:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8139c:	e0bffc17 	ldw	r2,-16(fp)
   813a0:	10c00017 	ldw	r3,0(r2)
   813a4:	e0bffd17 	ldw	r2,-12(fp)
   813a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   813ac:	e0bffc17 	ldw	r2,-16(fp)
   813b0:	10800017 	ldw	r2,0(r2)
   813b4:	e0fffd17 	ldw	r3,-12(fp)
   813b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   813bc:	e0bffc17 	ldw	r2,-16(fp)
   813c0:	e0fffd17 	ldw	r3,-12(fp)
   813c4:	10c00015 	stw	r3,0(r2)

  return 0;  
   813c8:	0005883a 	mov	r2,zero
}
   813cc:	e037883a 	mov	sp,fp
   813d0:	dfc00117 	ldw	ra,4(sp)
   813d4:	df000017 	ldw	fp,0(sp)
   813d8:	dec00204 	addi	sp,sp,8
   813dc:	f800283a 	ret

000813e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   813e0:	defffd04 	addi	sp,sp,-12
   813e4:	dfc00215 	stw	ra,8(sp)
   813e8:	df000115 	stw	fp,4(sp)
   813ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   813f0:	00800234 	movhi	r2,8
   813f4:	1087c904 	addi	r2,r2,7972
   813f8:	e0bfff15 	stw	r2,-4(fp)
   813fc:	00000606 	br	81418 <_do_ctors+0x38>
        (*ctor) (); 
   81400:	e0bfff17 	ldw	r2,-4(fp)
   81404:	10800017 	ldw	r2,0(r2)
   81408:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8140c:	e0bfff17 	ldw	r2,-4(fp)
   81410:	10bfff04 	addi	r2,r2,-4
   81414:	e0bfff15 	stw	r2,-4(fp)
   81418:	e0ffff17 	ldw	r3,-4(fp)
   8141c:	00800234 	movhi	r2,8
   81420:	1087ca04 	addi	r2,r2,7976
   81424:	18bff62e 	bgeu	r3,r2,81400 <_do_ctors+0x20>
        (*ctor) (); 
}
   81428:	0001883a 	nop
   8142c:	e037883a 	mov	sp,fp
   81430:	dfc00117 	ldw	ra,4(sp)
   81434:	df000017 	ldw	fp,0(sp)
   81438:	dec00204 	addi	sp,sp,8
   8143c:	f800283a 	ret

00081440 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   81440:	defffd04 	addi	sp,sp,-12
   81444:	dfc00215 	stw	ra,8(sp)
   81448:	df000115 	stw	fp,4(sp)
   8144c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   81450:	00800234 	movhi	r2,8
   81454:	1087c904 	addi	r2,r2,7972
   81458:	e0bfff15 	stw	r2,-4(fp)
   8145c:	00000606 	br	81478 <_do_dtors+0x38>
        (*dtor) (); 
   81460:	e0bfff17 	ldw	r2,-4(fp)
   81464:	10800017 	ldw	r2,0(r2)
   81468:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8146c:	e0bfff17 	ldw	r2,-4(fp)
   81470:	10bfff04 	addi	r2,r2,-4
   81474:	e0bfff15 	stw	r2,-4(fp)
   81478:	e0ffff17 	ldw	r3,-4(fp)
   8147c:	00800234 	movhi	r2,8
   81480:	1087ca04 	addi	r2,r2,7976
   81484:	18bff62e 	bgeu	r3,r2,81460 <_do_dtors+0x20>
        (*dtor) (); 
}
   81488:	0001883a 	nop
   8148c:	e037883a 	mov	sp,fp
   81490:	dfc00117 	ldw	ra,4(sp)
   81494:	df000017 	ldw	fp,0(sp)
   81498:	dec00204 	addi	sp,sp,8
   8149c:	f800283a 	ret

000814a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   814a0:	deffff04 	addi	sp,sp,-4
   814a4:	df000015 	stw	fp,0(sp)
   814a8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   814ac:	0001883a 	nop
   814b0:	e037883a 	mov	sp,fp
   814b4:	df000017 	ldw	fp,0(sp)
   814b8:	dec00104 	addi	sp,sp,4
   814bc:	f800283a 	ret

000814c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   814c0:	defff804 	addi	sp,sp,-32
   814c4:	dfc00715 	stw	ra,28(sp)
   814c8:	df000615 	stw	fp,24(sp)
   814cc:	dc000515 	stw	r16,20(sp)
   814d0:	df000604 	addi	fp,sp,24
   814d4:	e13ffb15 	stw	r4,-20(fp)
   814d8:	e17ffc15 	stw	r5,-16(fp)
   814dc:	e1bffd15 	stw	r6,-12(fp)
   814e0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   814e4:	e1bffe17 	ldw	r6,-8(fp)
   814e8:	e17ffd17 	ldw	r5,-12(fp)
   814ec:	e13ffc17 	ldw	r4,-16(fp)
   814f0:	00817480 	call	81748 <open>
   814f4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   814f8:	e0bffa17 	ldw	r2,-24(fp)
   814fc:	10002216 	blt	r2,zero,81588 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   81500:	04000434 	movhi	r16,16
   81504:	84006104 	addi	r16,r16,388
   81508:	e0bffa17 	ldw	r2,-24(fp)
   8150c:	01400304 	movi	r5,12
   81510:	1009883a 	mov	r4,r2
   81514:	0080a6c0 	call	80a6c <__mulsi3>
   81518:	8085883a 	add	r2,r16,r2
   8151c:	10c00017 	ldw	r3,0(r2)
   81520:	e0bffb17 	ldw	r2,-20(fp)
   81524:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   81528:	04000434 	movhi	r16,16
   8152c:	84006104 	addi	r16,r16,388
   81530:	e0bffa17 	ldw	r2,-24(fp)
   81534:	01400304 	movi	r5,12
   81538:	1009883a 	mov	r4,r2
   8153c:	0080a6c0 	call	80a6c <__mulsi3>
   81540:	8085883a 	add	r2,r16,r2
   81544:	10800104 	addi	r2,r2,4
   81548:	10c00017 	ldw	r3,0(r2)
   8154c:	e0bffb17 	ldw	r2,-20(fp)
   81550:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   81554:	04000434 	movhi	r16,16
   81558:	84006104 	addi	r16,r16,388
   8155c:	e0bffa17 	ldw	r2,-24(fp)
   81560:	01400304 	movi	r5,12
   81564:	1009883a 	mov	r4,r2
   81568:	0080a6c0 	call	80a6c <__mulsi3>
   8156c:	8085883a 	add	r2,r16,r2
   81570:	10800204 	addi	r2,r2,8
   81574:	10c00017 	ldw	r3,0(r2)
   81578:	e0bffb17 	ldw	r2,-20(fp)
   8157c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   81580:	e13ffa17 	ldw	r4,-24(fp)
   81584:	00818a40 	call	818a4 <alt_release_fd>
  }
} 
   81588:	0001883a 	nop
   8158c:	e6ffff04 	addi	sp,fp,-4
   81590:	dfc00217 	ldw	ra,8(sp)
   81594:	df000117 	ldw	fp,4(sp)
   81598:	dc000017 	ldw	r16,0(sp)
   8159c:	dec00304 	addi	sp,sp,12
   815a0:	f800283a 	ret

000815a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   815a4:	defffb04 	addi	sp,sp,-20
   815a8:	dfc00415 	stw	ra,16(sp)
   815ac:	df000315 	stw	fp,12(sp)
   815b0:	df000304 	addi	fp,sp,12
   815b4:	e13ffd15 	stw	r4,-12(fp)
   815b8:	e17ffe15 	stw	r5,-8(fp)
   815bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   815c0:	01c07fc4 	movi	r7,511
   815c4:	01800044 	movi	r6,1
   815c8:	e17ffd17 	ldw	r5,-12(fp)
   815cc:	01000434 	movhi	r4,16
   815d0:	21006404 	addi	r4,r4,400
   815d4:	00814c00 	call	814c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   815d8:	01c07fc4 	movi	r7,511
   815dc:	000d883a 	mov	r6,zero
   815e0:	e17ffe17 	ldw	r5,-8(fp)
   815e4:	01000434 	movhi	r4,16
   815e8:	21006104 	addi	r4,r4,388
   815ec:	00814c00 	call	814c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   815f0:	01c07fc4 	movi	r7,511
   815f4:	01800044 	movi	r6,1
   815f8:	e17fff17 	ldw	r5,-4(fp)
   815fc:	01000434 	movhi	r4,16
   81600:	21006704 	addi	r4,r4,412
   81604:	00814c00 	call	814c0 <alt_open_fd>
}  
   81608:	0001883a 	nop
   8160c:	e037883a 	mov	sp,fp
   81610:	dfc00117 	ldw	ra,4(sp)
   81614:	df000017 	ldw	fp,0(sp)
   81618:	dec00204 	addi	sp,sp,8
   8161c:	f800283a 	ret

00081620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81620:	defffe04 	addi	sp,sp,-8
   81624:	dfc00115 	stw	ra,4(sp)
   81628:	df000015 	stw	fp,0(sp)
   8162c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81630:	d0a00717 	ldw	r2,-32740(gp)
   81634:	10000326 	beq	r2,zero,81644 <alt_get_errno+0x24>
   81638:	d0a00717 	ldw	r2,-32740(gp)
   8163c:	103ee83a 	callr	r2
   81640:	00000106 	br	81648 <alt_get_errno+0x28>
   81644:	d0a00804 	addi	r2,gp,-32736
}
   81648:	e037883a 	mov	sp,fp
   8164c:	dfc00117 	ldw	ra,4(sp)
   81650:	df000017 	ldw	fp,0(sp)
   81654:	dec00204 	addi	sp,sp,8
   81658:	f800283a 	ret

0008165c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8165c:	defffb04 	addi	sp,sp,-20
   81660:	dfc00415 	stw	ra,16(sp)
   81664:	df000315 	stw	fp,12(sp)
   81668:	dc000215 	stw	r16,8(sp)
   8166c:	df000304 	addi	fp,sp,12
   81670:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   81674:	e0bffe17 	ldw	r2,-8(fp)
   81678:	10800217 	ldw	r2,8(r2)
   8167c:	10d00034 	orhi	r3,r2,16384
   81680:	e0bffe17 	ldw	r2,-8(fp)
   81684:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81688:	e03ffd15 	stw	zero,-12(fp)
   8168c:	00002306 	br	8171c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   81690:	04000434 	movhi	r16,16
   81694:	84006104 	addi	r16,r16,388
   81698:	e0bffd17 	ldw	r2,-12(fp)
   8169c:	01400304 	movi	r5,12
   816a0:	1009883a 	mov	r4,r2
   816a4:	0080a6c0 	call	80a6c <__mulsi3>
   816a8:	8085883a 	add	r2,r16,r2
   816ac:	10c00017 	ldw	r3,0(r2)
   816b0:	e0bffe17 	ldw	r2,-8(fp)
   816b4:	10800017 	ldw	r2,0(r2)
   816b8:	1880151e 	bne	r3,r2,81710 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   816bc:	04000434 	movhi	r16,16
   816c0:	84006104 	addi	r16,r16,388
   816c4:	e0bffd17 	ldw	r2,-12(fp)
   816c8:	01400304 	movi	r5,12
   816cc:	1009883a 	mov	r4,r2
   816d0:	0080a6c0 	call	80a6c <__mulsi3>
   816d4:	8085883a 	add	r2,r16,r2
   816d8:	10800204 	addi	r2,r2,8
   816dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   816e0:	10000b0e 	bge	r2,zero,81710 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   816e4:	01400304 	movi	r5,12
   816e8:	e13ffd17 	ldw	r4,-12(fp)
   816ec:	0080a6c0 	call	80a6c <__mulsi3>
   816f0:	1007883a 	mov	r3,r2
   816f4:	00800434 	movhi	r2,16
   816f8:	10806104 	addi	r2,r2,388
   816fc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   81700:	e0bffe17 	ldw	r2,-8(fp)
   81704:	18800226 	beq	r3,r2,81710 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   81708:	00bffcc4 	movi	r2,-13
   8170c:	00000806 	br	81730 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   81710:	e0bffd17 	ldw	r2,-12(fp)
   81714:	10800044 	addi	r2,r2,1
   81718:	e0bffd15 	stw	r2,-12(fp)
   8171c:	d0a00617 	ldw	r2,-32744(gp)
   81720:	1007883a 	mov	r3,r2
   81724:	e0bffd17 	ldw	r2,-12(fp)
   81728:	18bfd92e 	bgeu	r3,r2,81690 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8172c:	0005883a 	mov	r2,zero
}
   81730:	e6ffff04 	addi	sp,fp,-4
   81734:	dfc00217 	ldw	ra,8(sp)
   81738:	df000117 	ldw	fp,4(sp)
   8173c:	dc000017 	ldw	r16,0(sp)
   81740:	dec00304 	addi	sp,sp,12
   81744:	f800283a 	ret

00081748 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   81748:	defff604 	addi	sp,sp,-40
   8174c:	dfc00915 	stw	ra,36(sp)
   81750:	df000815 	stw	fp,32(sp)
   81754:	df000804 	addi	fp,sp,32
   81758:	e13ffd15 	stw	r4,-12(fp)
   8175c:	e17ffe15 	stw	r5,-8(fp)
   81760:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   81764:	00bfffc4 	movi	r2,-1
   81768:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   8176c:	00bffb44 	movi	r2,-19
   81770:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   81774:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   81778:	d1600404 	addi	r5,gp,-32752
   8177c:	e13ffd17 	ldw	r4,-12(fp)
   81780:	008194c0 	call	8194c <alt_find_dev>
   81784:	e0bff815 	stw	r2,-32(fp)
   81788:	e0bff817 	ldw	r2,-32(fp)
   8178c:	1000051e 	bne	r2,zero,817a4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   81790:	e13ffd17 	ldw	r4,-12(fp)
   81794:	00819dc0 	call	819dc <alt_find_file>
   81798:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   8179c:	00800044 	movi	r2,1
   817a0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   817a4:	e0bff817 	ldw	r2,-32(fp)
   817a8:	10002b26 	beq	r2,zero,81858 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   817ac:	e13ff817 	ldw	r4,-32(fp)
   817b0:	0081ae40 	call	81ae4 <alt_get_fd>
   817b4:	e0bff915 	stw	r2,-28(fp)
   817b8:	e0bff917 	ldw	r2,-28(fp)
   817bc:	1000030e 	bge	r2,zero,817cc <open+0x84>
    {
      status = index;
   817c0:	e0bff917 	ldw	r2,-28(fp)
   817c4:	e0bffa15 	stw	r2,-24(fp)
   817c8:	00002506 	br	81860 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   817cc:	01400304 	movi	r5,12
   817d0:	e13ff917 	ldw	r4,-28(fp)
   817d4:	0080a6c0 	call	80a6c <__mulsi3>
   817d8:	1007883a 	mov	r3,r2
   817dc:	00800434 	movhi	r2,16
   817e0:	10806104 	addi	r2,r2,388
   817e4:	1885883a 	add	r2,r3,r2
   817e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   817ec:	e0fffe17 	ldw	r3,-8(fp)
   817f0:	00900034 	movhi	r2,16384
   817f4:	10bfffc4 	addi	r2,r2,-1
   817f8:	1886703a 	and	r3,r3,r2
   817fc:	e0bffc17 	ldw	r2,-16(fp)
   81800:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   81804:	e0bffb17 	ldw	r2,-20(fp)
   81808:	1000051e 	bne	r2,zero,81820 <open+0xd8>
   8180c:	e13ffc17 	ldw	r4,-16(fp)
   81810:	008165c0 	call	8165c <alt_file_locked>
   81814:	e0bffa15 	stw	r2,-24(fp)
   81818:	e0bffa17 	ldw	r2,-24(fp)
   8181c:	10001016 	blt	r2,zero,81860 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   81820:	e0bff817 	ldw	r2,-32(fp)
   81824:	10800317 	ldw	r2,12(r2)
   81828:	10000826 	beq	r2,zero,8184c <open+0x104>
   8182c:	e0bff817 	ldw	r2,-32(fp)
   81830:	10800317 	ldw	r2,12(r2)
   81834:	e1ffff17 	ldw	r7,-4(fp)
   81838:	e1bffe17 	ldw	r6,-8(fp)
   8183c:	e17ffd17 	ldw	r5,-12(fp)
   81840:	e13ffc17 	ldw	r4,-16(fp)
   81844:	103ee83a 	callr	r2
   81848:	00000106 	br	81850 <open+0x108>
   8184c:	0005883a 	mov	r2,zero
   81850:	e0bffa15 	stw	r2,-24(fp)
   81854:	00000206 	br	81860 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   81858:	00bffb44 	movi	r2,-19
   8185c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   81860:	e0bffa17 	ldw	r2,-24(fp)
   81864:	1000090e 	bge	r2,zero,8188c <open+0x144>
  {
    alt_release_fd (index);  
   81868:	e13ff917 	ldw	r4,-28(fp)
   8186c:	00818a40 	call	818a4 <alt_release_fd>
    ALT_ERRNO = -status;
   81870:	00816200 	call	81620 <alt_get_errno>
   81874:	1007883a 	mov	r3,r2
   81878:	e0bffa17 	ldw	r2,-24(fp)
   8187c:	0085c83a 	sub	r2,zero,r2
   81880:	18800015 	stw	r2,0(r3)
    return -1;
   81884:	00bfffc4 	movi	r2,-1
   81888:	00000106 	br	81890 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   8188c:	e0bff917 	ldw	r2,-28(fp)
}
   81890:	e037883a 	mov	sp,fp
   81894:	dfc00117 	ldw	ra,4(sp)
   81898:	df000017 	ldw	fp,0(sp)
   8189c:	dec00204 	addi	sp,sp,8
   818a0:	f800283a 	ret

000818a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   818a4:	defffc04 	addi	sp,sp,-16
   818a8:	dfc00315 	stw	ra,12(sp)
   818ac:	df000215 	stw	fp,8(sp)
   818b0:	dc000115 	stw	r16,4(sp)
   818b4:	df000204 	addi	fp,sp,8
   818b8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   818bc:	e0bffe17 	ldw	r2,-8(fp)
   818c0:	108000d0 	cmplti	r2,r2,3
   818c4:	1000111e 	bne	r2,zero,8190c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   818c8:	04000434 	movhi	r16,16
   818cc:	84006104 	addi	r16,r16,388
   818d0:	e0bffe17 	ldw	r2,-8(fp)
   818d4:	01400304 	movi	r5,12
   818d8:	1009883a 	mov	r4,r2
   818dc:	0080a6c0 	call	80a6c <__mulsi3>
   818e0:	8085883a 	add	r2,r16,r2
   818e4:	10800204 	addi	r2,r2,8
   818e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   818ec:	04000434 	movhi	r16,16
   818f0:	84006104 	addi	r16,r16,388
   818f4:	e0bffe17 	ldw	r2,-8(fp)
   818f8:	01400304 	movi	r5,12
   818fc:	1009883a 	mov	r4,r2
   81900:	0080a6c0 	call	80a6c <__mulsi3>
   81904:	8085883a 	add	r2,r16,r2
   81908:	10000015 	stw	zero,0(r2)
  }
}
   8190c:	0001883a 	nop
   81910:	e6ffff04 	addi	sp,fp,-4
   81914:	dfc00217 	ldw	ra,8(sp)
   81918:	df000117 	ldw	fp,4(sp)
   8191c:	dc000017 	ldw	r16,0(sp)
   81920:	dec00304 	addi	sp,sp,12
   81924:	f800283a 	ret

00081928 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   81928:	deffff04 	addi	sp,sp,-4
   8192c:	df000015 	stw	fp,0(sp)
   81930:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   81934:	000170fa 	wrctl	ienable,zero
}
   81938:	0001883a 	nop
   8193c:	e037883a 	mov	sp,fp
   81940:	df000017 	ldw	fp,0(sp)
   81944:	dec00104 	addi	sp,sp,4
   81948:	f800283a 	ret

0008194c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8194c:	defffa04 	addi	sp,sp,-24
   81950:	dfc00515 	stw	ra,20(sp)
   81954:	df000415 	stw	fp,16(sp)
   81958:	df000404 	addi	fp,sp,16
   8195c:	e13ffe15 	stw	r4,-8(fp)
   81960:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   81964:	e0bfff17 	ldw	r2,-4(fp)
   81968:	10800017 	ldw	r2,0(r2)
   8196c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   81970:	e13ffe17 	ldw	r4,-8(fp)
   81974:	00801d80 	call	801d8 <strlen>
   81978:	10800044 	addi	r2,r2,1
   8197c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   81980:	00000d06 	br	819b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   81984:	e0bffc17 	ldw	r2,-16(fp)
   81988:	10800217 	ldw	r2,8(r2)
   8198c:	e0fffd17 	ldw	r3,-12(fp)
   81990:	180d883a 	mov	r6,r3
   81994:	e17ffe17 	ldw	r5,-8(fp)
   81998:	1009883a 	mov	r4,r2
   8199c:	0081bdc0 	call	81bdc <memcmp>
   819a0:	1000021e 	bne	r2,zero,819ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   819a4:	e0bffc17 	ldw	r2,-16(fp)
   819a8:	00000706 	br	819c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   819ac:	e0bffc17 	ldw	r2,-16(fp)
   819b0:	10800017 	ldw	r2,0(r2)
   819b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   819b8:	e0fffc17 	ldw	r3,-16(fp)
   819bc:	e0bfff17 	ldw	r2,-4(fp)
   819c0:	18bff01e 	bne	r3,r2,81984 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   819c4:	0005883a 	mov	r2,zero
}
   819c8:	e037883a 	mov	sp,fp
   819cc:	dfc00117 	ldw	ra,4(sp)
   819d0:	df000017 	ldw	fp,0(sp)
   819d4:	dec00204 	addi	sp,sp,8
   819d8:	f800283a 	ret

000819dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   819dc:	defffb04 	addi	sp,sp,-20
   819e0:	dfc00415 	stw	ra,16(sp)
   819e4:	df000315 	stw	fp,12(sp)
   819e8:	df000304 	addi	fp,sp,12
   819ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   819f0:	d0a00217 	ldw	r2,-32760(gp)
   819f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   819f8:	00003106 	br	81ac0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   819fc:	e0bffd17 	ldw	r2,-12(fp)
   81a00:	10800217 	ldw	r2,8(r2)
   81a04:	1009883a 	mov	r4,r2
   81a08:	00801d80 	call	801d8 <strlen>
   81a0c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   81a10:	e0bffd17 	ldw	r2,-12(fp)
   81a14:	10c00217 	ldw	r3,8(r2)
   81a18:	e0bffe17 	ldw	r2,-8(fp)
   81a1c:	10bfffc4 	addi	r2,r2,-1
   81a20:	1885883a 	add	r2,r3,r2
   81a24:	10800003 	ldbu	r2,0(r2)
   81a28:	10803fcc 	andi	r2,r2,255
   81a2c:	1080201c 	xori	r2,r2,128
   81a30:	10bfe004 	addi	r2,r2,-128
   81a34:	10800bd8 	cmpnei	r2,r2,47
   81a38:	1000031e 	bne	r2,zero,81a48 <alt_find_file+0x6c>
    {
      len -= 1;
   81a3c:	e0bffe17 	ldw	r2,-8(fp)
   81a40:	10bfffc4 	addi	r2,r2,-1
   81a44:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81a48:	e0bffe17 	ldw	r2,-8(fp)
   81a4c:	e0ffff17 	ldw	r3,-4(fp)
   81a50:	1885883a 	add	r2,r3,r2
   81a54:	10800003 	ldbu	r2,0(r2)
   81a58:	10803fcc 	andi	r2,r2,255
   81a5c:	1080201c 	xori	r2,r2,128
   81a60:	10bfe004 	addi	r2,r2,-128
   81a64:	10800be0 	cmpeqi	r2,r2,47
   81a68:	1000081e 	bne	r2,zero,81a8c <alt_find_file+0xb0>
   81a6c:	e0bffe17 	ldw	r2,-8(fp)
   81a70:	e0ffff17 	ldw	r3,-4(fp)
   81a74:	1885883a 	add	r2,r3,r2
   81a78:	10800003 	ldbu	r2,0(r2)
   81a7c:	10803fcc 	andi	r2,r2,255
   81a80:	1080201c 	xori	r2,r2,128
   81a84:	10bfe004 	addi	r2,r2,-128
   81a88:	10000a1e 	bne	r2,zero,81ab4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   81a8c:	e0bffd17 	ldw	r2,-12(fp)
   81a90:	10800217 	ldw	r2,8(r2)
   81a94:	e0fffe17 	ldw	r3,-8(fp)
   81a98:	180d883a 	mov	r6,r3
   81a9c:	e17fff17 	ldw	r5,-4(fp)
   81aa0:	1009883a 	mov	r4,r2
   81aa4:	0081bdc0 	call	81bdc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   81aa8:	1000021e 	bne	r2,zero,81ab4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   81aac:	e0bffd17 	ldw	r2,-12(fp)
   81ab0:	00000706 	br	81ad0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   81ab4:	e0bffd17 	ldw	r2,-12(fp)
   81ab8:	10800017 	ldw	r2,0(r2)
   81abc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   81ac0:	e0fffd17 	ldw	r3,-12(fp)
   81ac4:	d0a00204 	addi	r2,gp,-32760
   81ac8:	18bfcc1e 	bne	r3,r2,819fc <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   81acc:	0005883a 	mov	r2,zero
}
   81ad0:	e037883a 	mov	sp,fp
   81ad4:	dfc00117 	ldw	ra,4(sp)
   81ad8:	df000017 	ldw	fp,0(sp)
   81adc:	dec00204 	addi	sp,sp,8
   81ae0:	f800283a 	ret

00081ae4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   81ae4:	defffa04 	addi	sp,sp,-24
   81ae8:	dfc00515 	stw	ra,20(sp)
   81aec:	df000415 	stw	fp,16(sp)
   81af0:	dc000315 	stw	r16,12(sp)
   81af4:	df000404 	addi	fp,sp,16
   81af8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   81afc:	00bffa04 	movi	r2,-24
   81b00:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81b04:	e03ffc15 	stw	zero,-16(fp)
   81b08:	00001d06 	br	81b80 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   81b0c:	04000434 	movhi	r16,16
   81b10:	84006104 	addi	r16,r16,388
   81b14:	e0bffc17 	ldw	r2,-16(fp)
   81b18:	01400304 	movi	r5,12
   81b1c:	1009883a 	mov	r4,r2
   81b20:	0080a6c0 	call	80a6c <__mulsi3>
   81b24:	8085883a 	add	r2,r16,r2
   81b28:	10800017 	ldw	r2,0(r2)
   81b2c:	1000111e 	bne	r2,zero,81b74 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   81b30:	04000434 	movhi	r16,16
   81b34:	84006104 	addi	r16,r16,388
   81b38:	e0bffc17 	ldw	r2,-16(fp)
   81b3c:	01400304 	movi	r5,12
   81b40:	1009883a 	mov	r4,r2
   81b44:	0080a6c0 	call	80a6c <__mulsi3>
   81b48:	8085883a 	add	r2,r16,r2
   81b4c:	e0fffe17 	ldw	r3,-8(fp)
   81b50:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   81b54:	d0e00617 	ldw	r3,-32744(gp)
   81b58:	e0bffc17 	ldw	r2,-16(fp)
   81b5c:	1880020e 	bge	r3,r2,81b68 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   81b60:	e0bffc17 	ldw	r2,-16(fp)
   81b64:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   81b68:	e0bffc17 	ldw	r2,-16(fp)
   81b6c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   81b70:	00000606 	br	81b8c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   81b74:	e0bffc17 	ldw	r2,-16(fp)
   81b78:	10800044 	addi	r2,r2,1
   81b7c:	e0bffc15 	stw	r2,-16(fp)
   81b80:	e0bffc17 	ldw	r2,-16(fp)
   81b84:	10800810 	cmplti	r2,r2,32
   81b88:	103fe01e 	bne	r2,zero,81b0c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   81b8c:	e0bffd17 	ldw	r2,-12(fp)
}
   81b90:	e6ffff04 	addi	sp,fp,-4
   81b94:	dfc00217 	ldw	ra,8(sp)
   81b98:	df000117 	ldw	fp,4(sp)
   81b9c:	dc000017 	ldw	r16,0(sp)
   81ba0:	dec00304 	addi	sp,sp,12
   81ba4:	f800283a 	ret

00081ba8 <atexit>:
   81ba8:	200b883a 	mov	r5,r4
   81bac:	000f883a 	mov	r7,zero
   81bb0:	000d883a 	mov	r6,zero
   81bb4:	0009883a 	mov	r4,zero
   81bb8:	0081c0c1 	jmpi	81c0c <__register_exitproc>

00081bbc <exit>:
   81bbc:	defffe04 	addi	sp,sp,-8
   81bc0:	000b883a 	mov	r5,zero
   81bc4:	dc000015 	stw	r16,0(sp)
   81bc8:	dfc00115 	stw	ra,4(sp)
   81bcc:	2021883a 	mov	r16,r4
   81bd0:	0081d640 	call	81d64 <__call_exitprocs>
   81bd4:	8009883a 	mov	r4,r16
   81bd8:	0081ef40 	call	81ef4 <_exit>

00081bdc <memcmp>:
   81bdc:	218d883a 	add	r6,r4,r6
   81be0:	21800826 	beq	r4,r6,81c04 <memcmp+0x28>
   81be4:	20800003 	ldbu	r2,0(r4)
   81be8:	28c00003 	ldbu	r3,0(r5)
   81bec:	10c00226 	beq	r2,r3,81bf8 <memcmp+0x1c>
   81bf0:	10c5c83a 	sub	r2,r2,r3
   81bf4:	f800283a 	ret
   81bf8:	21000044 	addi	r4,r4,1
   81bfc:	29400044 	addi	r5,r5,1
   81c00:	003ff706 	br	81be0 <memcmp+0x4>
   81c04:	0005883a 	mov	r2,zero
   81c08:	f800283a 	ret

00081c0c <__register_exitproc>:
   81c0c:	00800434 	movhi	r2,16
   81c10:	1080c104 	addi	r2,r2,772
   81c14:	10c00017 	ldw	r3,0(r2)
   81c18:	defff904 	addi	sp,sp,-28
   81c1c:	dc000015 	stw	r16,0(sp)
   81c20:	1c000c17 	ldw	r16,48(r3)
   81c24:	dd400515 	stw	r21,20(sp)
   81c28:	dd000415 	stw	r20,16(sp)
   81c2c:	dcc00315 	stw	r19,12(sp)
   81c30:	dc800215 	stw	r18,8(sp)
   81c34:	dc400115 	stw	r17,4(sp)
   81c38:	dfc00615 	stw	ra,24(sp)
   81c3c:	202b883a 	mov	r21,r4
   81c40:	2823883a 	mov	r17,r5
   81c44:	3027883a 	mov	r19,r6
   81c48:	3825883a 	mov	r18,r7
   81c4c:	1029883a 	mov	r20,r2
   81c50:	8000021e 	bne	r16,zero,81c5c <__register_exitproc+0x50>
   81c54:	1c000d04 	addi	r16,r3,52
   81c58:	1c000c15 	stw	r16,48(r3)
   81c5c:	80800117 	ldw	r2,4(r16)
   81c60:	00c007c4 	movi	r3,31
   81c64:	1880110e 	bge	r3,r2,81cac <__register_exitproc+0xa0>
   81c68:	00800034 	movhi	r2,0
   81c6c:	10800004 	addi	r2,r2,0
   81c70:	1000021e 	bne	r2,zero,81c7c <__register_exitproc+0x70>
   81c74:	00bfffc4 	movi	r2,-1
   81c78:	00003106 	br	81d40 <__register_exitproc+0x134>
   81c7c:	01002304 	movi	r4,140
   81c80:	00000000 	call	0 <__alt_mem_program_memory-0x80000>
   81c84:	1021883a 	mov	r16,r2
   81c88:	103ffa26 	beq	r2,zero,81c74 <__register_exitproc+0x68>
   81c8c:	10000115 	stw	zero,4(r2)
   81c90:	a0800017 	ldw	r2,0(r20)
   81c94:	10c00c17 	ldw	r3,48(r2)
   81c98:	80c00015 	stw	r3,0(r16)
   81c9c:	14000c15 	stw	r16,48(r2)
   81ca0:	80002215 	stw	zero,136(r16)
   81ca4:	a8001d26 	beq	r21,zero,81d1c <__register_exitproc+0x110>
   81ca8:	00000606 	br	81cc4 <__register_exitproc+0xb8>
   81cac:	a8001b26 	beq	r21,zero,81d1c <__register_exitproc+0x110>
   81cb0:	80802217 	ldw	r2,136(r16)
   81cb4:	1000091e 	bne	r2,zero,81cdc <__register_exitproc+0xd0>
   81cb8:	00800034 	movhi	r2,0
   81cbc:	10800004 	addi	r2,r2,0
   81cc0:	103fec26 	beq	r2,zero,81c74 <__register_exitproc+0x68>
   81cc4:	01004204 	movi	r4,264
   81cc8:	00000000 	call	0 <__alt_mem_program_memory-0x80000>
   81ccc:	103fe926 	beq	r2,zero,81c74 <__register_exitproc+0x68>
   81cd0:	10004015 	stw	zero,256(r2)
   81cd4:	10004115 	stw	zero,260(r2)
   81cd8:	80802215 	stw	r2,136(r16)
   81cdc:	81400117 	ldw	r5,4(r16)
   81ce0:	01000044 	movi	r4,1
   81ce4:	2947883a 	add	r3,r5,r5
   81ce8:	18c7883a 	add	r3,r3,r3
   81cec:	10c7883a 	add	r3,r2,r3
   81cf0:	1cc00015 	stw	r19,0(r3)
   81cf4:	2148983a 	sll	r4,r4,r5
   81cf8:	11404017 	ldw	r5,256(r2)
   81cfc:	290ab03a 	or	r5,r5,r4
   81d00:	11404015 	stw	r5,256(r2)
   81d04:	1c802015 	stw	r18,128(r3)
   81d08:	00c00084 	movi	r3,2
   81d0c:	a8c0031e 	bne	r21,r3,81d1c <__register_exitproc+0x110>
   81d10:	10c04117 	ldw	r3,260(r2)
   81d14:	1908b03a 	or	r4,r3,r4
   81d18:	11004115 	stw	r4,260(r2)
   81d1c:	80800117 	ldw	r2,4(r16)
   81d20:	10c00044 	addi	r3,r2,1
   81d24:	10800084 	addi	r2,r2,2
   81d28:	1085883a 	add	r2,r2,r2
   81d2c:	1085883a 	add	r2,r2,r2
   81d30:	80c00115 	stw	r3,4(r16)
   81d34:	80a1883a 	add	r16,r16,r2
   81d38:	84400015 	stw	r17,0(r16)
   81d3c:	0005883a 	mov	r2,zero
   81d40:	dfc00617 	ldw	ra,24(sp)
   81d44:	dd400517 	ldw	r21,20(sp)
   81d48:	dd000417 	ldw	r20,16(sp)
   81d4c:	dcc00317 	ldw	r19,12(sp)
   81d50:	dc800217 	ldw	r18,8(sp)
   81d54:	dc400117 	ldw	r17,4(sp)
   81d58:	dc000017 	ldw	r16,0(sp)
   81d5c:	dec00704 	addi	sp,sp,28
   81d60:	f800283a 	ret

00081d64 <__call_exitprocs>:
   81d64:	defff504 	addi	sp,sp,-44
   81d68:	dd000515 	stw	r20,20(sp)
   81d6c:	05000434 	movhi	r20,16
   81d70:	dc800315 	stw	r18,12(sp)
   81d74:	dfc00a15 	stw	ra,40(sp)
   81d78:	df000915 	stw	fp,36(sp)
   81d7c:	ddc00815 	stw	r23,32(sp)
   81d80:	dd800715 	stw	r22,28(sp)
   81d84:	dd400615 	stw	r21,24(sp)
   81d88:	dcc00415 	stw	r19,16(sp)
   81d8c:	dc400215 	stw	r17,8(sp)
   81d90:	dc000115 	stw	r16,4(sp)
   81d94:	d9000015 	stw	r4,0(sp)
   81d98:	2825883a 	mov	r18,r5
   81d9c:	a500c104 	addi	r20,r20,772
   81da0:	a4400017 	ldw	r17,0(r20)
   81da4:	8cc00c17 	ldw	r19,48(r17)
   81da8:	8c400c04 	addi	r17,r17,48
   81dac:	98004526 	beq	r19,zero,81ec4 <__call_exitprocs+0x160>
   81db0:	9c000117 	ldw	r16,4(r19)
   81db4:	00900034 	movhi	r2,16384
   81db8:	10bfffc4 	addi	r2,r2,-1
   81dbc:	9d402217 	ldw	r21,136(r19)
   81dc0:	85bfffc4 	addi	r22,r16,-1
   81dc4:	80a1883a 	add	r16,r16,r2
   81dc8:	8421883a 	add	r16,r16,r16
   81dcc:	8421883a 	add	r16,r16,r16
   81dd0:	ac2f883a 	add	r23,r21,r16
   81dd4:	84000204 	addi	r16,r16,8
   81dd8:	9c21883a 	add	r16,r19,r16
   81ddc:	b0002716 	blt	r22,zero,81e7c <__call_exitprocs+0x118>
   81de0:	90000726 	beq	r18,zero,81e00 <__call_exitprocs+0x9c>
   81de4:	a800041e 	bne	r21,zero,81df8 <__call_exitprocs+0x94>
   81de8:	b5bfffc4 	addi	r22,r22,-1
   81dec:	bdffff04 	addi	r23,r23,-4
   81df0:	843fff04 	addi	r16,r16,-4
   81df4:	003ff906 	br	81ddc <__call_exitprocs+0x78>
   81df8:	b9002017 	ldw	r4,128(r23)
   81dfc:	913ffa1e 	bne	r18,r4,81de8 <__call_exitprocs+0x84>
   81e00:	99000117 	ldw	r4,4(r19)
   81e04:	82000017 	ldw	r8,0(r16)
   81e08:	213fffc4 	addi	r4,r4,-1
   81e0c:	b100021e 	bne	r22,r4,81e18 <__call_exitprocs+0xb4>
   81e10:	9d800115 	stw	r22,4(r19)
   81e14:	00000106 	br	81e1c <__call_exitprocs+0xb8>
   81e18:	80000015 	stw	zero,0(r16)
   81e1c:	403ff226 	beq	r8,zero,81de8 <__call_exitprocs+0x84>
   81e20:	9f000117 	ldw	fp,4(r19)
   81e24:	a8000526 	beq	r21,zero,81e3c <__call_exitprocs+0xd8>
   81e28:	00800044 	movi	r2,1
   81e2c:	1592983a 	sll	r9,r2,r22
   81e30:	a9404017 	ldw	r5,256(r21)
   81e34:	494a703a 	and	r5,r9,r5
   81e38:	2800021e 	bne	r5,zero,81e44 <__call_exitprocs+0xe0>
   81e3c:	403ee83a 	callr	r8
   81e40:	00000906 	br	81e68 <__call_exitprocs+0x104>
   81e44:	a9004117 	ldw	r4,260(r21)
   81e48:	4908703a 	and	r4,r9,r4
   81e4c:	2000041e 	bne	r4,zero,81e60 <__call_exitprocs+0xfc>
   81e50:	b9400017 	ldw	r5,0(r23)
   81e54:	d9000017 	ldw	r4,0(sp)
   81e58:	403ee83a 	callr	r8
   81e5c:	00000206 	br	81e68 <__call_exitprocs+0x104>
   81e60:	b9000017 	ldw	r4,0(r23)
   81e64:	403ee83a 	callr	r8
   81e68:	99000117 	ldw	r4,4(r19)
   81e6c:	e13fcc1e 	bne	fp,r4,81da0 <__call_exitprocs+0x3c>
   81e70:	89000017 	ldw	r4,0(r17)
   81e74:	993fdc26 	beq	r19,r4,81de8 <__call_exitprocs+0x84>
   81e78:	003fc906 	br	81da0 <__call_exitprocs+0x3c>
   81e7c:	00800034 	movhi	r2,0
   81e80:	10800004 	addi	r2,r2,0
   81e84:	10000f26 	beq	r2,zero,81ec4 <__call_exitprocs+0x160>
   81e88:	99400117 	ldw	r5,4(r19)
   81e8c:	99000017 	ldw	r4,0(r19)
   81e90:	2800091e 	bne	r5,zero,81eb8 <__call_exitprocs+0x154>
   81e94:	20000826 	beq	r4,zero,81eb8 <__call_exitprocs+0x154>
   81e98:	89000015 	stw	r4,0(r17)
   81e9c:	a8000226 	beq	r21,zero,81ea8 <__call_exitprocs+0x144>
   81ea0:	a809883a 	mov	r4,r21
   81ea4:	00000000 	call	0 <__alt_mem_program_memory-0x80000>
   81ea8:	9809883a 	mov	r4,r19
   81eac:	00000000 	call	0 <__alt_mem_program_memory-0x80000>
   81eb0:	8cc00017 	ldw	r19,0(r17)
   81eb4:	003fbd06 	br	81dac <__call_exitprocs+0x48>
   81eb8:	9823883a 	mov	r17,r19
   81ebc:	2027883a 	mov	r19,r4
   81ec0:	003fba06 	br	81dac <__call_exitprocs+0x48>
   81ec4:	dfc00a17 	ldw	ra,40(sp)
   81ec8:	df000917 	ldw	fp,36(sp)
   81ecc:	ddc00817 	ldw	r23,32(sp)
   81ed0:	dd800717 	ldw	r22,28(sp)
   81ed4:	dd400617 	ldw	r21,24(sp)
   81ed8:	dd000517 	ldw	r20,20(sp)
   81edc:	dcc00417 	ldw	r19,16(sp)
   81ee0:	dc800317 	ldw	r18,12(sp)
   81ee4:	dc400217 	ldw	r17,8(sp)
   81ee8:	dc000117 	ldw	r16,4(sp)
   81eec:	dec00b04 	addi	sp,sp,44
   81ef0:	f800283a 	ret

00081ef4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   81ef4:	defffd04 	addi	sp,sp,-12
   81ef8:	df000215 	stw	fp,8(sp)
   81efc:	df000204 	addi	fp,sp,8
   81f00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   81f04:	0001883a 	nop
   81f08:	e0bfff17 	ldw	r2,-4(fp)
   81f0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   81f10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   81f14:	10000226 	beq	r2,zero,81f20 <_exit+0x2c>
    ALT_SIM_FAIL();
   81f18:	002af070 	cmpltui	zero,zero,43969
   81f1c:	00000106 	br	81f24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   81f20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   81f24:	003fff06 	br	81f24 <_exit+0x30>
