
entrega3.elf:     file format elf32-littlenios2
entrega3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080230

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000058dc memsz 0x000058dc flags r-x
    LOAD off    0x0000704c vaddr 0x0010004c paddr 0x000858fc align 2**12
         filesz 0x00001a6c memsz 0x00001bc0 flags rw-
    LOAD off    0x00009000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x0000004c memsz 0x0000004c flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000056cc  00080230  00080230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00100000  00100000  00009000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0010004c  000858fc  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00101ab8  00087368  00008ab8  2**2
                  ALLOC, SMALL_DATA
  6 .program_memory 00000000  00087368  00087368  0000904c  2**0
                  CONTENTS
  7 .data_memory  00000000  00101c0c  00101c0c  0000904c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a50  00000000  00000000  00009070  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016463  00000000  00000000  00009ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005ff9  00000000  00000000  0001ff23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a67  00000000  00000000  00025f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000015a4  00000000  00000000  0002c984  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027c1  00000000  00000000  0002df28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  000306e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000351c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00035208  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00037dca  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00037dcd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00037dd9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00037dda  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00037ddb  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00037de6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00037df1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00037dfc  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003d  00000000  00000000  00037e05  2**0
                  CONTENTS, READONLY
 27 .jdi          00004f81  00000000  00000000  00037e42  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004707d  00000000  00000000  0003cdc3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080230 l    d  .text	00000000 .text
00100000 l    d  .rodata	00000000 .rodata
0010004c l    d  .rwdata	00000000 .rwdata
00101ab8 l    d  .bss	00000000 .bss
00087368 l    d  .program_memory	00000000 .program_memory
00101c0c l    d  .data_memory	00000000 .data_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../entrega3_bsp//obj/HAL/src/crt0.o
00080268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00080440 l     F .text	00000008 __fp_unlock
00080454 l     F .text	0000019c __sinit.part.1
000805f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0010004c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000830e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000831f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00083220 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00083314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000833fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000834e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000836c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00101aa8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00083968 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00083aa4 l     F .text	00000034 alt_dev_reg
00100a20 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00083d7c l     F .text	0000020c altera_avalon_jtag_uart_irq
00083f88 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00084864 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00084cc4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00084e24 l     F .text	0000003c alt_get_errno
00084e60 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00101ae0 g     O .bss	00000004 alt_instruction_exception_handler
00082eb0 g     F .text	00000054 _isatty_r
00083600 g     F .text	0000007c alt_main
000802d4 g     F .text	000000c0 _puts_r
00101b0c g     O .bss	00000100 alt_irq
00082bd8 g     F .text	00000060 _lseek_r
000858fc g       *ABS*	00000000 __flash_rwdata_start
00101c0c g       *ABS*	00000000 __alt_heap_start
0008218c g     F .text	0000005c __sseek
000807a0 g     F .text	00000010 __sinit
000805f8 g     F .text	00000078 __sfmoreglue
000836a0 g     F .text	00000024 __malloc_unlock
00081878 g     F .text	0000015c memmove
00080788 g     F .text	00000018 _cleanup
0008524c g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00082e54 g     F .text	0000005c _fstat_r
00101ac4 g     O .bss	00000004 errno
00082108 g     F .text	00000008 __seofread
00101acc g     O .bss	00000004 alt_argv
00109a80 g       *ABS*	00000000 _gp
00083938 g     F .text	00000030 usleep
001008a0 g     O .rwdata	00000180 alt_fd_list
00085270 g     F .text	00000090 alt_find_dev
00081730 g     F .text	00000148 memcpy
00080448 g     F .text	0000000c _cleanup_r
00084da8 g     F .text	0000007c alt_io_redirect
000858fc g       *ABS*	00000000 __DTOR_END__
00080394 g     F .text	00000014 puts
000854cc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00084180 g     F .text	0000021c altera_avalon_jtag_uart_read
00082ffc g     F .text	00000064 .hidden __udivsi3
00083350 g     F .text	000000ac isatty
00101ac0 g     O .bss	00000004 __malloc_top_pad
000807f0 g     F .text	000004c8 __sfvwrite_r
00082060 g     F .text	00000054 _sbrk_r
00082df4 g     F .text	00000060 _read_r
00101aa0 g     O .rwdata	00000004 alt_max_fd
000823f8 g     F .text	000000f0 _fclose_r
00082774 g     F .text	00000030 fflush
00101abc g     O .bss	00000004 __malloc_max_sbrked_mem
00083524 g     F .text	000000dc lseek
00101a80 g     O .rwdata	00000004 _global_impure_ptr
00081afc g     F .text	00000564 _realloc_r
00101c0c g       *ABS*	00000000 __bss_end
00084bd4 g     F .text	000000f0 alt_iic_isr_register
00085144 g     F .text	00000108 alt_tick
000807c0 g     F .text	00000018 __fp_lock_all
00084b88 g     F .text	0000004c alt_ic_irq_enabled
000850a8 g     F .text	0000009c alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_data_memory
00101ad4 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d4 alt_irq_handler
00100878 g     O .rwdata	00000028 alt_dev_null
00084844 g     F .text	00000020 alt_dcache_flush_all
00101ab8 g       *ABS*	00000000 __ram_rwdata_end
00101a98 g     O .rwdata	00000008 alt_dev_list
000839a4 g     F .text	00000100 write
0010004c g       *ABS*	00000000 __ram_rodata_end
0008325c g     F .text	000000b8 fstat
00083060 g     F .text	00000058 .hidden __umodsi3
00101c0c g       *ABS*	00000000 end
00083cbc g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000858fc g       *ABS*	00000000 __CTOR_LIST__
00116a60 g       *ABS*	00000000 __alt_stack_pointer
0008439c g     F .text	00000224 altera_avalon_jtag_uart_write
000807b0 g     F .text	00000004 __sfp_lock_acquire
0008164c g     F .text	000000e4 memchr
000828c8 g     F .text	00000310 _free_r
00085748 g     F .text	00000180 __call_exitprocs
00101a88 g     O .rwdata	00000004 __malloc_sbrk_base
00080230 g     F .text	0000003c _start
00101ad8 g     O .bss	00000004 _alt_tick_rate
00101adc g     O .bss	00000004 _alt_nticks
00083700 g     F .text	00000104 read
00083b10 g     F .text	00000048 alt_sys_init
00085630 g     F .text	00000118 __register_exitproc
00084028 g     F .text	00000068 altera_avalon_jtag_uart_close
000830b8 g     F .text	00000028 .hidden __mulsi3
0010004c g       *ABS*	00000000 __ram_rwdata_start
00100000 g       *ABS*	00000000 __ram_rodata_start
00101ae4 g     O .bss	00000028 __malloc_current_mallinfo
00083b58 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00085408 g     F .text	000000c4 alt_get_fd
000846ec g     F .text	00000158 alt_busy_sleep
000823a4 g     F .text	00000054 _close_r
000855b4 g     F .text	0000007c memcmp
00083c18 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00101c0c g       *ABS*	00000000 __alt_stack_base
00083c68 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00082250 g     F .text	00000154 __swsetup_r
00080670 g     F .text	00000118 __sfp
00100470 g     O .rwdata	00000408 __malloc_av_
000807bc g     F .text	00000004 __sinit_lock_release
000820b4 g     F .text	00000054 __sread
00085300 g     F .text	00000108 alt_find_file
000848a0 g     F .text	000000a4 alt_dev_llist_insert
0008367c g     F .text	00000024 __malloc_lock
00083888 g     F .text	000000b0 sbrk
00082718 g     F .text	0000005c _fflush_r
00101ab8 g       *ABS*	00000000 __bss_start
000819d4 g     F .text	00000128 memset
0008026c g     F .text	00000068 main
00101ad0 g     O .bss	00000004 alt_envp
00101ab8 g     O .bss	00000004 __malloc_max_total_mem
00083bb8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000821e8 g     F .text	00000008 __sclose
00116a60 g       *ABS*	00000000 __alt_heap_limit
000824e8 g     F .text	00000014 fclose
00080e40 g     F .text	0000080c _malloc_r
00101aa4 g     O .rwdata	00000004 alt_errno
00080cb8 g     F .text	000000c4 _fwalk
00082f04 g     F .text	00000084 .hidden __divsi3
000827a4 g     F .text	00000124 _malloc_trim_r
000858fc g       *ABS*	00000000 __CTOR_END__
00100000 g       *ABS*	00000000 __flash_rodata_start
000858fc g       *ABS*	00000000 __DTOR_LIST__
00083ad8 g     F .text	00000038 alt_irq_init
00083804 g     F .text	00000084 alt_release_fd
00085568 g     F .text	00000014 atexit
000821f0 g     F .text	00000060 _write_r
00101a84 g     O .rwdata	00000004 _impure_ptr
00101ac8 g     O .bss	00000004 alt_argc
000824fc g     F .text	0000021c __sflush_r
000849a4 g     F .text	00000060 _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000807d8 g     F .text	00000018 __fp_unlock_all
00101a90 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00084a24 g     F .text	00000050 alt_ic_isr_register
00101ab8 g       *ABS*	00000000 _edata
00101c0c g       *ABS*	00000000 _end
00080230 g       *ABS*	00000000 __ram_exceptions_end
00084090 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00084afc g     F .text	0000008c alt_ic_irq_disable
00082110 g     F .text	0000007c __swrite
00101a8c g     O .rwdata	00000004 __malloc_trim_threshold
0008557c g     F .text	00000038 exit
00080d7c g     F .text	000000c4 _fwalk_reent
00082f88 g     F .text	00000074 .hidden __modsi3
00116a60 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000807b4 g     F .text	00000004 __sfp_lock_release
00080000 g       *ABS*	00000000 __alt_mem_program_memory
000858c8 g     F .text	00000034 _exit
000845c0 g     F .text	0000012c alt_alarm_start
00082c38 g     F .text	000001bc __smakebuf_r
000803a8 g     F .text	00000098 strlen
00084f4c g     F .text	0000015c open
00084a04 g     F .text	00000020 alt_icache_flush_all
00101aac g     O .rwdata	00000004 alt_priority_mask
00084a74 g     F .text	00000088 alt_ic_irq_enable
00101ab0 g     O .rwdata	00000008 alt_alarm_list
00084944 g     F .text	00000060 _do_ctors
0008311c g     F .text	000000d8 close
00083464 g     F .text	00000084 alt_load
000807b8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08408c14 	ori	at,at,560
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800434 	movhi	r2,16
   80140:	1086c304 	addi	r2,r2,6924
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800434 	movhi	r2,16
   80158:	1086c304 	addi	r2,r2,6924
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   801e4:	00bfffc4 	movi	r2,-1
   801e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   801ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   801f0:	d0a01817 	ldw	r2,-32672(gp)
   801f4:	10000726 	beq	r2,zero,80214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   801f8:	d0a01817 	ldw	r2,-32672(gp)
   801fc:	e0fffd17 	ldw	r3,-12(fp)
   80200:	e1bffe17 	ldw	r6,-8(fp)
   80204:	e17fff17 	ldw	r5,-4(fp)
   80208:	1809883a 	mov	r4,r3
   8020c:	103ee83a 	callr	r2
   80210:	00000206 	br	8021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80218:	0005883a 	mov	r2,zero
}
   8021c:	e037883a 	mov	sp,fp
   80220:	dfc00117 	ldw	ra,4(sp)
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00204 	addi	sp,sp,8
   8022c:	f800283a 	ret

Disassembly of section .text:

00080230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80230:	06c00474 	movhi	sp,17
    ori sp, sp, %lo(__alt_stack_pointer)
   80234:	deda9814 	ori	sp,sp,27232
    movhi gp, %hi(_gp)
   80238:	06800434 	movhi	gp,16
    ori gp, gp, %lo(_gp)
   8023c:	d6a6a014 	ori	gp,gp,39552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80240:	00800434 	movhi	r2,16
    ori r2, r2, %lo(__bss_start)
   80244:	1086ae14 	ori	r2,r2,6840

    movhi r3, %hi(__bss_end)
   80248:	00c00434 	movhi	r3,16
    ori r3, r3, %lo(__bss_end)
   8024c:	18c70314 	ori	r3,r3,7180

    beq r2, r3, 1f
   80250:	10c00326 	beq	r2,r3,80260 <_start+0x30>

0:
    stw zero, (r2)
   80254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8025c:	10fffd36 	bltu	r2,r3,80254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80260:	00834640 	call	83464 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80264:	00836000 	call	83600 <alt_main>

00080268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80268:	003fff06 	br	80268 <alt_after_alt_main>

0008026c <main>:
//#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int main(void){
   8026c:	defffc04 	addi	sp,sp,-16
   80270:	dfc00315 	stw	ra,12(sp)
   80274:	df000215 	stw	fp,8(sp)
   80278:	df000204 	addi	fp,sp,8
  unsigned int led = 0;
   8027c:	e03ffe15 	stw	zero,-8(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   80280:	e03fff15 	stw	zero,-4(fp)

#ifndef SIM
  printf("Embarcados++ \n");
   80284:	01000434 	movhi	r4,16
   80288:	21000004 	addi	r4,r4,0
   8028c:	00803940 	call	80394 <puts>
#endif

  while(1){
	  if (led < 6){
   80290:	e0bffe17 	ldw	r2,-8(fp)
   80294:	108001a8 	cmpgeui	r2,r2,6
   80298:	10000c1e 	bne	r2,zero,802cc <main+0x60>
		  *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   8029c:	e0bfff17 	ldw	r2,-4(fp)
   802a0:	10c00104 	addi	r3,r2,4
   802a4:	e0bffe17 	ldw	r2,-8(fp)
   802a8:	11000044 	addi	r4,r2,1
   802ac:	e13ffe15 	stw	r4,-8(fp)
   802b0:	01000044 	movi	r4,1
   802b4:	2084983a 	sll	r2,r4,r2
   802b8:	18800015 	stw	r2,0(r3)
#ifndef SIM
          usleep(500000); // remover durante a simulação
   802bc:	01000234 	movhi	r4,8
   802c0:	21284804 	addi	r4,r4,-24288
   802c4:	00839380 	call	83938 <usleep>
   802c8:	003ff106 	br	80290 <main+0x24>
#endif
	  }
	  else{
		  led = 0;
   802cc:	e03ffe15 	stw	zero,-8(fp)
	  }
  };
   802d0:	003fef06 	br	80290 <main+0x24>

000802d4 <_puts_r>:
   802d4:	defff604 	addi	sp,sp,-40
   802d8:	dc000715 	stw	r16,28(sp)
   802dc:	2021883a 	mov	r16,r4
   802e0:	2809883a 	mov	r4,r5
   802e4:	dc400815 	stw	r17,32(sp)
   802e8:	dfc00915 	stw	ra,36(sp)
   802ec:	2823883a 	mov	r17,r5
   802f0:	00803a80 	call	803a8 <strlen>
   802f4:	10c00044 	addi	r3,r2,1
   802f8:	d8800115 	stw	r2,4(sp)
   802fc:	00800434 	movhi	r2,16
   80300:	10800404 	addi	r2,r2,16
   80304:	d8800215 	stw	r2,8(sp)
   80308:	00800044 	movi	r2,1
   8030c:	d8800315 	stw	r2,12(sp)
   80310:	00800084 	movi	r2,2
   80314:	dc400015 	stw	r17,0(sp)
   80318:	d8c00615 	stw	r3,24(sp)
   8031c:	dec00415 	stw	sp,16(sp)
   80320:	d8800515 	stw	r2,20(sp)
   80324:	80000226 	beq	r16,zero,80330 <_puts_r+0x5c>
   80328:	80800e17 	ldw	r2,56(r16)
   8032c:	10001426 	beq	r2,zero,80380 <_puts_r+0xac>
   80330:	81400217 	ldw	r5,8(r16)
   80334:	2880030b 	ldhu	r2,12(r5)
   80338:	10c8000c 	andi	r3,r2,8192
   8033c:	1800061e 	bne	r3,zero,80358 <_puts_r+0x84>
   80340:	29001917 	ldw	r4,100(r5)
   80344:	00f7ffc4 	movi	r3,-8193
   80348:	10880014 	ori	r2,r2,8192
   8034c:	20c6703a 	and	r3,r4,r3
   80350:	2880030d 	sth	r2,12(r5)
   80354:	28c01915 	stw	r3,100(r5)
   80358:	d9800404 	addi	r6,sp,16
   8035c:	8009883a 	mov	r4,r16
   80360:	00807f00 	call	807f0 <__sfvwrite_r>
   80364:	1000091e 	bne	r2,zero,8038c <_puts_r+0xb8>
   80368:	00800284 	movi	r2,10
   8036c:	dfc00917 	ldw	ra,36(sp)
   80370:	dc400817 	ldw	r17,32(sp)
   80374:	dc000717 	ldw	r16,28(sp)
   80378:	dec00a04 	addi	sp,sp,40
   8037c:	f800283a 	ret
   80380:	8009883a 	mov	r4,r16
   80384:	00807a00 	call	807a0 <__sinit>
   80388:	003fe906 	br	80330 <_puts_r+0x5c>
   8038c:	00bfffc4 	movi	r2,-1
   80390:	003ff606 	br	8036c <_puts_r+0x98>

00080394 <puts>:
   80394:	00800434 	movhi	r2,16
   80398:	1086a104 	addi	r2,r2,6788
   8039c:	200b883a 	mov	r5,r4
   803a0:	11000017 	ldw	r4,0(r2)
   803a4:	00802d41 	jmpi	802d4 <_puts_r>

000803a8 <strlen>:
   803a8:	208000cc 	andi	r2,r4,3
   803ac:	10002026 	beq	r2,zero,80430 <strlen+0x88>
   803b0:	20800007 	ldb	r2,0(r4)
   803b4:	10002026 	beq	r2,zero,80438 <strlen+0x90>
   803b8:	2005883a 	mov	r2,r4
   803bc:	00000206 	br	803c8 <strlen+0x20>
   803c0:	10c00007 	ldb	r3,0(r2)
   803c4:	18001826 	beq	r3,zero,80428 <strlen+0x80>
   803c8:	10800044 	addi	r2,r2,1
   803cc:	10c000cc 	andi	r3,r2,3
   803d0:	183ffb1e 	bne	r3,zero,803c0 <strlen+0x18>
   803d4:	10c00017 	ldw	r3,0(r2)
   803d8:	01ffbff4 	movhi	r7,65279
   803dc:	39ffbfc4 	addi	r7,r7,-257
   803e0:	00ca303a 	nor	r5,zero,r3
   803e4:	01a02074 	movhi	r6,32897
   803e8:	19c7883a 	add	r3,r3,r7
   803ec:	31a02004 	addi	r6,r6,-32640
   803f0:	1946703a 	and	r3,r3,r5
   803f4:	1986703a 	and	r3,r3,r6
   803f8:	1800091e 	bne	r3,zero,80420 <strlen+0x78>
   803fc:	10800104 	addi	r2,r2,4
   80400:	10c00017 	ldw	r3,0(r2)
   80404:	19cb883a 	add	r5,r3,r7
   80408:	00c6303a 	nor	r3,zero,r3
   8040c:	28c6703a 	and	r3,r5,r3
   80410:	1986703a 	and	r3,r3,r6
   80414:	183ff926 	beq	r3,zero,803fc <strlen+0x54>
   80418:	00000106 	br	80420 <strlen+0x78>
   8041c:	10800044 	addi	r2,r2,1
   80420:	10c00007 	ldb	r3,0(r2)
   80424:	183ffd1e 	bne	r3,zero,8041c <strlen+0x74>
   80428:	1105c83a 	sub	r2,r2,r4
   8042c:	f800283a 	ret
   80430:	2005883a 	mov	r2,r4
   80434:	003fe706 	br	803d4 <strlen+0x2c>
   80438:	0005883a 	mov	r2,zero
   8043c:	f800283a 	ret

00080440 <__fp_unlock>:
   80440:	0005883a 	mov	r2,zero
   80444:	f800283a 	ret

00080448 <_cleanup_r>:
   80448:	01400234 	movhi	r5,8
   8044c:	2948fe04 	addi	r5,r5,9208
   80450:	0080d7c1 	jmpi	80d7c <_fwalk_reent>

00080454 <__sinit.part.1>:
   80454:	defff704 	addi	sp,sp,-36
   80458:	00c00234 	movhi	r3,8
   8045c:	dfc00815 	stw	ra,32(sp)
   80460:	ddc00715 	stw	r23,28(sp)
   80464:	dd800615 	stw	r22,24(sp)
   80468:	dd400515 	stw	r21,20(sp)
   8046c:	dd000415 	stw	r20,16(sp)
   80470:	dcc00315 	stw	r19,12(sp)
   80474:	dc800215 	stw	r18,8(sp)
   80478:	dc400115 	stw	r17,4(sp)
   8047c:	dc000015 	stw	r16,0(sp)
   80480:	18c11204 	addi	r3,r3,1096
   80484:	24000117 	ldw	r16,4(r4)
   80488:	20c00f15 	stw	r3,60(r4)
   8048c:	2080bb04 	addi	r2,r4,748
   80490:	00c000c4 	movi	r3,3
   80494:	20c0b915 	stw	r3,740(r4)
   80498:	2080ba15 	stw	r2,744(r4)
   8049c:	2000b815 	stw	zero,736(r4)
   804a0:	05c00204 	movi	r23,8
   804a4:	00800104 	movi	r2,4
   804a8:	2025883a 	mov	r18,r4
   804ac:	b80d883a 	mov	r6,r23
   804b0:	81001704 	addi	r4,r16,92
   804b4:	000b883a 	mov	r5,zero
   804b8:	80000015 	stw	zero,0(r16)
   804bc:	80000115 	stw	zero,4(r16)
   804c0:	80000215 	stw	zero,8(r16)
   804c4:	8080030d 	sth	r2,12(r16)
   804c8:	80001915 	stw	zero,100(r16)
   804cc:	8000038d 	sth	zero,14(r16)
   804d0:	80000415 	stw	zero,16(r16)
   804d4:	80000515 	stw	zero,20(r16)
   804d8:	80000615 	stw	zero,24(r16)
   804dc:	00819d40 	call	819d4 <memset>
   804e0:	05800234 	movhi	r22,8
   804e4:	94400217 	ldw	r17,8(r18)
   804e8:	05400234 	movhi	r21,8
   804ec:	05000234 	movhi	r20,8
   804f0:	04c00234 	movhi	r19,8
   804f4:	b5882d04 	addi	r22,r22,8372
   804f8:	ad484404 	addi	r21,r21,8464
   804fc:	a5086304 	addi	r20,r20,8588
   80500:	9cc87a04 	addi	r19,r19,8680
   80504:	85800815 	stw	r22,32(r16)
   80508:	85400915 	stw	r21,36(r16)
   8050c:	85000a15 	stw	r20,40(r16)
   80510:	84c00b15 	stw	r19,44(r16)
   80514:	84000715 	stw	r16,28(r16)
   80518:	00800284 	movi	r2,10
   8051c:	8880030d 	sth	r2,12(r17)
   80520:	00800044 	movi	r2,1
   80524:	b80d883a 	mov	r6,r23
   80528:	89001704 	addi	r4,r17,92
   8052c:	000b883a 	mov	r5,zero
   80530:	88000015 	stw	zero,0(r17)
   80534:	88000115 	stw	zero,4(r17)
   80538:	88000215 	stw	zero,8(r17)
   8053c:	88001915 	stw	zero,100(r17)
   80540:	8880038d 	sth	r2,14(r17)
   80544:	88000415 	stw	zero,16(r17)
   80548:	88000515 	stw	zero,20(r17)
   8054c:	88000615 	stw	zero,24(r17)
   80550:	00819d40 	call	819d4 <memset>
   80554:	94000317 	ldw	r16,12(r18)
   80558:	00800484 	movi	r2,18
   8055c:	8c400715 	stw	r17,28(r17)
   80560:	8d800815 	stw	r22,32(r17)
   80564:	8d400915 	stw	r21,36(r17)
   80568:	8d000a15 	stw	r20,40(r17)
   8056c:	8cc00b15 	stw	r19,44(r17)
   80570:	8080030d 	sth	r2,12(r16)
   80574:	00800084 	movi	r2,2
   80578:	80000015 	stw	zero,0(r16)
   8057c:	80000115 	stw	zero,4(r16)
   80580:	80000215 	stw	zero,8(r16)
   80584:	80001915 	stw	zero,100(r16)
   80588:	8080038d 	sth	r2,14(r16)
   8058c:	80000415 	stw	zero,16(r16)
   80590:	80000515 	stw	zero,20(r16)
   80594:	80000615 	stw	zero,24(r16)
   80598:	b80d883a 	mov	r6,r23
   8059c:	000b883a 	mov	r5,zero
   805a0:	81001704 	addi	r4,r16,92
   805a4:	00819d40 	call	819d4 <memset>
   805a8:	00800044 	movi	r2,1
   805ac:	84000715 	stw	r16,28(r16)
   805b0:	85800815 	stw	r22,32(r16)
   805b4:	85400915 	stw	r21,36(r16)
   805b8:	85000a15 	stw	r20,40(r16)
   805bc:	84c00b15 	stw	r19,44(r16)
   805c0:	90800e15 	stw	r2,56(r18)
   805c4:	dfc00817 	ldw	ra,32(sp)
   805c8:	ddc00717 	ldw	r23,28(sp)
   805cc:	dd800617 	ldw	r22,24(sp)
   805d0:	dd400517 	ldw	r21,20(sp)
   805d4:	dd000417 	ldw	r20,16(sp)
   805d8:	dcc00317 	ldw	r19,12(sp)
   805dc:	dc800217 	ldw	r18,8(sp)
   805e0:	dc400117 	ldw	r17,4(sp)
   805e4:	dc000017 	ldw	r16,0(sp)
   805e8:	dec00904 	addi	sp,sp,36
   805ec:	f800283a 	ret

000805f0 <__fp_lock>:
   805f0:	0005883a 	mov	r2,zero
   805f4:	f800283a 	ret

000805f8 <__sfmoreglue>:
   805f8:	defffc04 	addi	sp,sp,-16
   805fc:	dc800215 	stw	r18,8(sp)
   80600:	2825883a 	mov	r18,r5
   80604:	dc000015 	stw	r16,0(sp)
   80608:	01401a04 	movi	r5,104
   8060c:	2021883a 	mov	r16,r4
   80610:	913fffc4 	addi	r4,r18,-1
   80614:	dfc00315 	stw	ra,12(sp)
   80618:	dc400115 	stw	r17,4(sp)
   8061c:	00830b80 	call	830b8 <__mulsi3>
   80620:	8009883a 	mov	r4,r16
   80624:	11401d04 	addi	r5,r2,116
   80628:	1023883a 	mov	r17,r2
   8062c:	0080e400 	call	80e40 <_malloc_r>
   80630:	1021883a 	mov	r16,r2
   80634:	10000726 	beq	r2,zero,80654 <__sfmoreglue+0x5c>
   80638:	11000304 	addi	r4,r2,12
   8063c:	10000015 	stw	zero,0(r2)
   80640:	14800115 	stw	r18,4(r2)
   80644:	11000215 	stw	r4,8(r2)
   80648:	89801a04 	addi	r6,r17,104
   8064c:	000b883a 	mov	r5,zero
   80650:	00819d40 	call	819d4 <memset>
   80654:	8005883a 	mov	r2,r16
   80658:	dfc00317 	ldw	ra,12(sp)
   8065c:	dc800217 	ldw	r18,8(sp)
   80660:	dc400117 	ldw	r17,4(sp)
   80664:	dc000017 	ldw	r16,0(sp)
   80668:	dec00404 	addi	sp,sp,16
   8066c:	f800283a 	ret

00080670 <__sfp>:
   80670:	defffb04 	addi	sp,sp,-20
   80674:	dc000015 	stw	r16,0(sp)
   80678:	04000434 	movhi	r16,16
   8067c:	8406a004 	addi	r16,r16,6784
   80680:	dcc00315 	stw	r19,12(sp)
   80684:	2027883a 	mov	r19,r4
   80688:	81000017 	ldw	r4,0(r16)
   8068c:	dfc00415 	stw	ra,16(sp)
   80690:	dc800215 	stw	r18,8(sp)
   80694:	20800e17 	ldw	r2,56(r4)
   80698:	dc400115 	stw	r17,4(sp)
   8069c:	1000021e 	bne	r2,zero,806a8 <__sfp+0x38>
   806a0:	00804540 	call	80454 <__sinit.part.1>
   806a4:	81000017 	ldw	r4,0(r16)
   806a8:	2480b804 	addi	r18,r4,736
   806ac:	047fffc4 	movi	r17,-1
   806b0:	91000117 	ldw	r4,4(r18)
   806b4:	94000217 	ldw	r16,8(r18)
   806b8:	213fffc4 	addi	r4,r4,-1
   806bc:	20000a16 	blt	r4,zero,806e8 <__sfp+0x78>
   806c0:	8080030f 	ldh	r2,12(r16)
   806c4:	10000c26 	beq	r2,zero,806f8 <__sfp+0x88>
   806c8:	80c01d04 	addi	r3,r16,116
   806cc:	00000206 	br	806d8 <__sfp+0x68>
   806d0:	18bfe60f 	ldh	r2,-104(r3)
   806d4:	10000826 	beq	r2,zero,806f8 <__sfp+0x88>
   806d8:	213fffc4 	addi	r4,r4,-1
   806dc:	1c3ffd04 	addi	r16,r3,-12
   806e0:	18c01a04 	addi	r3,r3,104
   806e4:	247ffa1e 	bne	r4,r17,806d0 <__sfp+0x60>
   806e8:	90800017 	ldw	r2,0(r18)
   806ec:	10001d26 	beq	r2,zero,80764 <__sfp+0xf4>
   806f0:	1025883a 	mov	r18,r2
   806f4:	003fee06 	br	806b0 <__sfp+0x40>
   806f8:	00bfffc4 	movi	r2,-1
   806fc:	8080038d 	sth	r2,14(r16)
   80700:	00800044 	movi	r2,1
   80704:	8080030d 	sth	r2,12(r16)
   80708:	80001915 	stw	zero,100(r16)
   8070c:	80000015 	stw	zero,0(r16)
   80710:	80000215 	stw	zero,8(r16)
   80714:	80000115 	stw	zero,4(r16)
   80718:	80000415 	stw	zero,16(r16)
   8071c:	80000515 	stw	zero,20(r16)
   80720:	80000615 	stw	zero,24(r16)
   80724:	01800204 	movi	r6,8
   80728:	000b883a 	mov	r5,zero
   8072c:	81001704 	addi	r4,r16,92
   80730:	00819d40 	call	819d4 <memset>
   80734:	8005883a 	mov	r2,r16
   80738:	80000c15 	stw	zero,48(r16)
   8073c:	80000d15 	stw	zero,52(r16)
   80740:	80001115 	stw	zero,68(r16)
   80744:	80001215 	stw	zero,72(r16)
   80748:	dfc00417 	ldw	ra,16(sp)
   8074c:	dcc00317 	ldw	r19,12(sp)
   80750:	dc800217 	ldw	r18,8(sp)
   80754:	dc400117 	ldw	r17,4(sp)
   80758:	dc000017 	ldw	r16,0(sp)
   8075c:	dec00504 	addi	sp,sp,20
   80760:	f800283a 	ret
   80764:	01400104 	movi	r5,4
   80768:	9809883a 	mov	r4,r19
   8076c:	00805f80 	call	805f8 <__sfmoreglue>
   80770:	90800015 	stw	r2,0(r18)
   80774:	103fde1e 	bne	r2,zero,806f0 <__sfp+0x80>
   80778:	00800304 	movi	r2,12
   8077c:	98800015 	stw	r2,0(r19)
   80780:	0005883a 	mov	r2,zero
   80784:	003ff006 	br	80748 <__sfp+0xd8>

00080788 <_cleanup>:
   80788:	00800434 	movhi	r2,16
   8078c:	1086a004 	addi	r2,r2,6784
   80790:	11000017 	ldw	r4,0(r2)
   80794:	01400234 	movhi	r5,8
   80798:	2948fe04 	addi	r5,r5,9208
   8079c:	0080d7c1 	jmpi	80d7c <_fwalk_reent>

000807a0 <__sinit>:
   807a0:	20800e17 	ldw	r2,56(r4)
   807a4:	10000126 	beq	r2,zero,807ac <__sinit+0xc>
   807a8:	f800283a 	ret
   807ac:	00804541 	jmpi	80454 <__sinit.part.1>

000807b0 <__sfp_lock_acquire>:
   807b0:	f800283a 	ret

000807b4 <__sfp_lock_release>:
   807b4:	f800283a 	ret

000807b8 <__sinit_lock_acquire>:
   807b8:	f800283a 	ret

000807bc <__sinit_lock_release>:
   807bc:	f800283a 	ret

000807c0 <__fp_lock_all>:
   807c0:	00800434 	movhi	r2,16
   807c4:	1086a104 	addi	r2,r2,6788
   807c8:	11000017 	ldw	r4,0(r2)
   807cc:	01400234 	movhi	r5,8
   807d0:	29417c04 	addi	r5,r5,1520
   807d4:	0080cb81 	jmpi	80cb8 <_fwalk>

000807d8 <__fp_unlock_all>:
   807d8:	00800434 	movhi	r2,16
   807dc:	1086a104 	addi	r2,r2,6788
   807e0:	11000017 	ldw	r4,0(r2)
   807e4:	01400234 	movhi	r5,8
   807e8:	29411004 	addi	r5,r5,1088
   807ec:	0080cb81 	jmpi	80cb8 <_fwalk>

000807f0 <__sfvwrite_r>:
   807f0:	30800217 	ldw	r2,8(r6)
   807f4:	10006726 	beq	r2,zero,80994 <__sfvwrite_r+0x1a4>
   807f8:	28c0030b 	ldhu	r3,12(r5)
   807fc:	defff404 	addi	sp,sp,-48
   80800:	dd400715 	stw	r21,28(sp)
   80804:	dd000615 	stw	r20,24(sp)
   80808:	dc000215 	stw	r16,8(sp)
   8080c:	dfc00b15 	stw	ra,44(sp)
   80810:	df000a15 	stw	fp,40(sp)
   80814:	ddc00915 	stw	r23,36(sp)
   80818:	dd800815 	stw	r22,32(sp)
   8081c:	dcc00515 	stw	r19,20(sp)
   80820:	dc800415 	stw	r18,16(sp)
   80824:	dc400315 	stw	r17,12(sp)
   80828:	1880020c 	andi	r2,r3,8
   8082c:	2821883a 	mov	r16,r5
   80830:	202b883a 	mov	r21,r4
   80834:	3029883a 	mov	r20,r6
   80838:	10002726 	beq	r2,zero,808d8 <__sfvwrite_r+0xe8>
   8083c:	28800417 	ldw	r2,16(r5)
   80840:	10002526 	beq	r2,zero,808d8 <__sfvwrite_r+0xe8>
   80844:	1880008c 	andi	r2,r3,2
   80848:	a4400017 	ldw	r17,0(r20)
   8084c:	10002a26 	beq	r2,zero,808f8 <__sfvwrite_r+0x108>
   80850:	05a00034 	movhi	r22,32768
   80854:	0027883a 	mov	r19,zero
   80858:	0025883a 	mov	r18,zero
   8085c:	b5bf0004 	addi	r22,r22,-1024
   80860:	980d883a 	mov	r6,r19
   80864:	a809883a 	mov	r4,r21
   80868:	90004626 	beq	r18,zero,80984 <__sfvwrite_r+0x194>
   8086c:	900f883a 	mov	r7,r18
   80870:	b480022e 	bgeu	r22,r18,8087c <__sfvwrite_r+0x8c>
   80874:	01e00034 	movhi	r7,32768
   80878:	39ff0004 	addi	r7,r7,-1024
   8087c:	80800917 	ldw	r2,36(r16)
   80880:	81400717 	ldw	r5,28(r16)
   80884:	103ee83a 	callr	r2
   80888:	00805a0e 	bge	zero,r2,809f4 <__sfvwrite_r+0x204>
   8088c:	a0c00217 	ldw	r3,8(r20)
   80890:	98a7883a 	add	r19,r19,r2
   80894:	90a5c83a 	sub	r18,r18,r2
   80898:	1885c83a 	sub	r2,r3,r2
   8089c:	a0800215 	stw	r2,8(r20)
   808a0:	103fef1e 	bne	r2,zero,80860 <__sfvwrite_r+0x70>
   808a4:	0005883a 	mov	r2,zero
   808a8:	dfc00b17 	ldw	ra,44(sp)
   808ac:	df000a17 	ldw	fp,40(sp)
   808b0:	ddc00917 	ldw	r23,36(sp)
   808b4:	dd800817 	ldw	r22,32(sp)
   808b8:	dd400717 	ldw	r21,28(sp)
   808bc:	dd000617 	ldw	r20,24(sp)
   808c0:	dcc00517 	ldw	r19,20(sp)
   808c4:	dc800417 	ldw	r18,16(sp)
   808c8:	dc400317 	ldw	r17,12(sp)
   808cc:	dc000217 	ldw	r16,8(sp)
   808d0:	dec00c04 	addi	sp,sp,48
   808d4:	f800283a 	ret
   808d8:	800b883a 	mov	r5,r16
   808dc:	a809883a 	mov	r4,r21
   808e0:	00822500 	call	82250 <__swsetup_r>
   808e4:	1000ee1e 	bne	r2,zero,80ca0 <__sfvwrite_r+0x4b0>
   808e8:	80c0030b 	ldhu	r3,12(r16)
   808ec:	a4400017 	ldw	r17,0(r20)
   808f0:	1880008c 	andi	r2,r3,2
   808f4:	103fd61e 	bne	r2,zero,80850 <__sfvwrite_r+0x60>
   808f8:	1880004c 	andi	r2,r3,1
   808fc:	1000421e 	bne	r2,zero,80a08 <__sfvwrite_r+0x218>
   80900:	0039883a 	mov	fp,zero
   80904:	0025883a 	mov	r18,zero
   80908:	90001a26 	beq	r18,zero,80974 <__sfvwrite_r+0x184>
   8090c:	1880800c 	andi	r2,r3,512
   80910:	84c00217 	ldw	r19,8(r16)
   80914:	10002126 	beq	r2,zero,8099c <__sfvwrite_r+0x1ac>
   80918:	982f883a 	mov	r23,r19
   8091c:	94c09636 	bltu	r18,r19,80b78 <__sfvwrite_r+0x388>
   80920:	1881200c 	andi	r2,r3,1152
   80924:	1000a11e 	bne	r2,zero,80bac <__sfvwrite_r+0x3bc>
   80928:	81000017 	ldw	r4,0(r16)
   8092c:	b80d883a 	mov	r6,r23
   80930:	e00b883a 	mov	r5,fp
   80934:	00818780 	call	81878 <memmove>
   80938:	80c00217 	ldw	r3,8(r16)
   8093c:	81000017 	ldw	r4,0(r16)
   80940:	9005883a 	mov	r2,r18
   80944:	1ce7c83a 	sub	r19,r3,r19
   80948:	25cf883a 	add	r7,r4,r23
   8094c:	84c00215 	stw	r19,8(r16)
   80950:	81c00015 	stw	r7,0(r16)
   80954:	a0c00217 	ldw	r3,8(r20)
   80958:	e0b9883a 	add	fp,fp,r2
   8095c:	90a5c83a 	sub	r18,r18,r2
   80960:	18a7c83a 	sub	r19,r3,r2
   80964:	a4c00215 	stw	r19,8(r20)
   80968:	983fce26 	beq	r19,zero,808a4 <__sfvwrite_r+0xb4>
   8096c:	80c0030b 	ldhu	r3,12(r16)
   80970:	903fe61e 	bne	r18,zero,8090c <__sfvwrite_r+0x11c>
   80974:	8f000017 	ldw	fp,0(r17)
   80978:	8c800117 	ldw	r18,4(r17)
   8097c:	8c400204 	addi	r17,r17,8
   80980:	003fe106 	br	80908 <__sfvwrite_r+0x118>
   80984:	8cc00017 	ldw	r19,0(r17)
   80988:	8c800117 	ldw	r18,4(r17)
   8098c:	8c400204 	addi	r17,r17,8
   80990:	003fb306 	br	80860 <__sfvwrite_r+0x70>
   80994:	0005883a 	mov	r2,zero
   80998:	f800283a 	ret
   8099c:	81000017 	ldw	r4,0(r16)
   809a0:	80800417 	ldw	r2,16(r16)
   809a4:	11005a36 	bltu	r2,r4,80b10 <__sfvwrite_r+0x320>
   809a8:	85c00517 	ldw	r23,20(r16)
   809ac:	95c05836 	bltu	r18,r23,80b10 <__sfvwrite_r+0x320>
   809b0:	00a00034 	movhi	r2,32768
   809b4:	10bfffc4 	addi	r2,r2,-1
   809b8:	9009883a 	mov	r4,r18
   809bc:	1480012e 	bgeu	r2,r18,809c4 <__sfvwrite_r+0x1d4>
   809c0:	1009883a 	mov	r4,r2
   809c4:	b80b883a 	mov	r5,r23
   809c8:	0082f040 	call	82f04 <__divsi3>
   809cc:	b80b883a 	mov	r5,r23
   809d0:	1009883a 	mov	r4,r2
   809d4:	00830b80 	call	830b8 <__mulsi3>
   809d8:	81400717 	ldw	r5,28(r16)
   809dc:	80c00917 	ldw	r3,36(r16)
   809e0:	100f883a 	mov	r7,r2
   809e4:	e00d883a 	mov	r6,fp
   809e8:	a809883a 	mov	r4,r21
   809ec:	183ee83a 	callr	r3
   809f0:	00bfd816 	blt	zero,r2,80954 <__sfvwrite_r+0x164>
   809f4:	8080030b 	ldhu	r2,12(r16)
   809f8:	10801014 	ori	r2,r2,64
   809fc:	8080030d 	sth	r2,12(r16)
   80a00:	00bfffc4 	movi	r2,-1
   80a04:	003fa806 	br	808a8 <__sfvwrite_r+0xb8>
   80a08:	0027883a 	mov	r19,zero
   80a0c:	0011883a 	mov	r8,zero
   80a10:	0039883a 	mov	fp,zero
   80a14:	0025883a 	mov	r18,zero
   80a18:	90001f26 	beq	r18,zero,80a98 <__sfvwrite_r+0x2a8>
   80a1c:	40005a26 	beq	r8,zero,80b88 <__sfvwrite_r+0x398>
   80a20:	982d883a 	mov	r22,r19
   80a24:	94c0012e 	bgeu	r18,r19,80a2c <__sfvwrite_r+0x23c>
   80a28:	902d883a 	mov	r22,r18
   80a2c:	81000017 	ldw	r4,0(r16)
   80a30:	80800417 	ldw	r2,16(r16)
   80a34:	b02f883a 	mov	r23,r22
   80a38:	81c00517 	ldw	r7,20(r16)
   80a3c:	1100032e 	bgeu	r2,r4,80a4c <__sfvwrite_r+0x25c>
   80a40:	80c00217 	ldw	r3,8(r16)
   80a44:	38c7883a 	add	r3,r7,r3
   80a48:	1d801816 	blt	r3,r22,80aac <__sfvwrite_r+0x2bc>
   80a4c:	b1c03e16 	blt	r22,r7,80b48 <__sfvwrite_r+0x358>
   80a50:	80800917 	ldw	r2,36(r16)
   80a54:	81400717 	ldw	r5,28(r16)
   80a58:	e00d883a 	mov	r6,fp
   80a5c:	da000115 	stw	r8,4(sp)
   80a60:	a809883a 	mov	r4,r21
   80a64:	103ee83a 	callr	r2
   80a68:	102f883a 	mov	r23,r2
   80a6c:	da000117 	ldw	r8,4(sp)
   80a70:	00bfe00e 	bge	zero,r2,809f4 <__sfvwrite_r+0x204>
   80a74:	9de7c83a 	sub	r19,r19,r23
   80a78:	98001f26 	beq	r19,zero,80af8 <__sfvwrite_r+0x308>
   80a7c:	a0800217 	ldw	r2,8(r20)
   80a80:	e5f9883a 	add	fp,fp,r23
   80a84:	95e5c83a 	sub	r18,r18,r23
   80a88:	15efc83a 	sub	r23,r2,r23
   80a8c:	a5c00215 	stw	r23,8(r20)
   80a90:	b83f8426 	beq	r23,zero,808a4 <__sfvwrite_r+0xb4>
   80a94:	903fe11e 	bne	r18,zero,80a1c <__sfvwrite_r+0x22c>
   80a98:	8f000017 	ldw	fp,0(r17)
   80a9c:	8c800117 	ldw	r18,4(r17)
   80aa0:	0011883a 	mov	r8,zero
   80aa4:	8c400204 	addi	r17,r17,8
   80aa8:	003fdb06 	br	80a18 <__sfvwrite_r+0x228>
   80aac:	180d883a 	mov	r6,r3
   80ab0:	e00b883a 	mov	r5,fp
   80ab4:	da000115 	stw	r8,4(sp)
   80ab8:	d8c00015 	stw	r3,0(sp)
   80abc:	00818780 	call	81878 <memmove>
   80ac0:	d8c00017 	ldw	r3,0(sp)
   80ac4:	80800017 	ldw	r2,0(r16)
   80ac8:	800b883a 	mov	r5,r16
   80acc:	a809883a 	mov	r4,r21
   80ad0:	10c5883a 	add	r2,r2,r3
   80ad4:	80800015 	stw	r2,0(r16)
   80ad8:	d8c00015 	stw	r3,0(sp)
   80adc:	00827180 	call	82718 <_fflush_r>
   80ae0:	d8c00017 	ldw	r3,0(sp)
   80ae4:	da000117 	ldw	r8,4(sp)
   80ae8:	103fc21e 	bne	r2,zero,809f4 <__sfvwrite_r+0x204>
   80aec:	182f883a 	mov	r23,r3
   80af0:	9de7c83a 	sub	r19,r19,r23
   80af4:	983fe11e 	bne	r19,zero,80a7c <__sfvwrite_r+0x28c>
   80af8:	800b883a 	mov	r5,r16
   80afc:	a809883a 	mov	r4,r21
   80b00:	00827180 	call	82718 <_fflush_r>
   80b04:	103fbb1e 	bne	r2,zero,809f4 <__sfvwrite_r+0x204>
   80b08:	0011883a 	mov	r8,zero
   80b0c:	003fdb06 	br	80a7c <__sfvwrite_r+0x28c>
   80b10:	94c0012e 	bgeu	r18,r19,80b18 <__sfvwrite_r+0x328>
   80b14:	9027883a 	mov	r19,r18
   80b18:	980d883a 	mov	r6,r19
   80b1c:	e00b883a 	mov	r5,fp
   80b20:	00818780 	call	81878 <memmove>
   80b24:	80800217 	ldw	r2,8(r16)
   80b28:	80c00017 	ldw	r3,0(r16)
   80b2c:	14c5c83a 	sub	r2,r2,r19
   80b30:	1cc7883a 	add	r3,r3,r19
   80b34:	80800215 	stw	r2,8(r16)
   80b38:	80c00015 	stw	r3,0(r16)
   80b3c:	10004326 	beq	r2,zero,80c4c <__sfvwrite_r+0x45c>
   80b40:	9805883a 	mov	r2,r19
   80b44:	003f8306 	br	80954 <__sfvwrite_r+0x164>
   80b48:	b00d883a 	mov	r6,r22
   80b4c:	e00b883a 	mov	r5,fp
   80b50:	da000115 	stw	r8,4(sp)
   80b54:	00818780 	call	81878 <memmove>
   80b58:	80800217 	ldw	r2,8(r16)
   80b5c:	80c00017 	ldw	r3,0(r16)
   80b60:	da000117 	ldw	r8,4(sp)
   80b64:	1585c83a 	sub	r2,r2,r22
   80b68:	1dad883a 	add	r22,r3,r22
   80b6c:	80800215 	stw	r2,8(r16)
   80b70:	85800015 	stw	r22,0(r16)
   80b74:	003fbf06 	br	80a74 <__sfvwrite_r+0x284>
   80b78:	81000017 	ldw	r4,0(r16)
   80b7c:	9027883a 	mov	r19,r18
   80b80:	902f883a 	mov	r23,r18
   80b84:	003f6906 	br	8092c <__sfvwrite_r+0x13c>
   80b88:	900d883a 	mov	r6,r18
   80b8c:	01400284 	movi	r5,10
   80b90:	e009883a 	mov	r4,fp
   80b94:	008164c0 	call	8164c <memchr>
   80b98:	10003e26 	beq	r2,zero,80c94 <__sfvwrite_r+0x4a4>
   80b9c:	10800044 	addi	r2,r2,1
   80ba0:	1727c83a 	sub	r19,r2,fp
   80ba4:	02000044 	movi	r8,1
   80ba8:	003f9d06 	br	80a20 <__sfvwrite_r+0x230>
   80bac:	80800517 	ldw	r2,20(r16)
   80bb0:	81400417 	ldw	r5,16(r16)
   80bb4:	81c00017 	ldw	r7,0(r16)
   80bb8:	10a7883a 	add	r19,r2,r2
   80bbc:	9885883a 	add	r2,r19,r2
   80bc0:	1026d7fa 	srli	r19,r2,31
   80bc4:	396dc83a 	sub	r22,r7,r5
   80bc8:	b1000044 	addi	r4,r22,1
   80bcc:	9885883a 	add	r2,r19,r2
   80bd0:	1027d07a 	srai	r19,r2,1
   80bd4:	2485883a 	add	r2,r4,r18
   80bd8:	980d883a 	mov	r6,r19
   80bdc:	9880022e 	bgeu	r19,r2,80be8 <__sfvwrite_r+0x3f8>
   80be0:	1027883a 	mov	r19,r2
   80be4:	100d883a 	mov	r6,r2
   80be8:	18c1000c 	andi	r3,r3,1024
   80bec:	18001c26 	beq	r3,zero,80c60 <__sfvwrite_r+0x470>
   80bf0:	300b883a 	mov	r5,r6
   80bf4:	a809883a 	mov	r4,r21
   80bf8:	0080e400 	call	80e40 <_malloc_r>
   80bfc:	102f883a 	mov	r23,r2
   80c00:	10002926 	beq	r2,zero,80ca8 <__sfvwrite_r+0x4b8>
   80c04:	81400417 	ldw	r5,16(r16)
   80c08:	b00d883a 	mov	r6,r22
   80c0c:	1009883a 	mov	r4,r2
   80c10:	00817300 	call	81730 <memcpy>
   80c14:	8080030b 	ldhu	r2,12(r16)
   80c18:	00fedfc4 	movi	r3,-1153
   80c1c:	10c4703a 	and	r2,r2,r3
   80c20:	10802014 	ori	r2,r2,128
   80c24:	8080030d 	sth	r2,12(r16)
   80c28:	bd89883a 	add	r4,r23,r22
   80c2c:	9d8fc83a 	sub	r7,r19,r22
   80c30:	85c00415 	stw	r23,16(r16)
   80c34:	84c00515 	stw	r19,20(r16)
   80c38:	81000015 	stw	r4,0(r16)
   80c3c:	9027883a 	mov	r19,r18
   80c40:	81c00215 	stw	r7,8(r16)
   80c44:	902f883a 	mov	r23,r18
   80c48:	003f3806 	br	8092c <__sfvwrite_r+0x13c>
   80c4c:	800b883a 	mov	r5,r16
   80c50:	a809883a 	mov	r4,r21
   80c54:	00827180 	call	82718 <_fflush_r>
   80c58:	103fb926 	beq	r2,zero,80b40 <__sfvwrite_r+0x350>
   80c5c:	003f6506 	br	809f4 <__sfvwrite_r+0x204>
   80c60:	a809883a 	mov	r4,r21
   80c64:	0081afc0 	call	81afc <_realloc_r>
   80c68:	102f883a 	mov	r23,r2
   80c6c:	103fee1e 	bne	r2,zero,80c28 <__sfvwrite_r+0x438>
   80c70:	81400417 	ldw	r5,16(r16)
   80c74:	a809883a 	mov	r4,r21
   80c78:	00828c80 	call	828c8 <_free_r>
   80c7c:	8080030b 	ldhu	r2,12(r16)
   80c80:	00ffdfc4 	movi	r3,-129
   80c84:	1884703a 	and	r2,r3,r2
   80c88:	00c00304 	movi	r3,12
   80c8c:	a8c00015 	stw	r3,0(r21)
   80c90:	003f5906 	br	809f8 <__sfvwrite_r+0x208>
   80c94:	94c00044 	addi	r19,r18,1
   80c98:	02000044 	movi	r8,1
   80c9c:	003f6006 	br	80a20 <__sfvwrite_r+0x230>
   80ca0:	00bfffc4 	movi	r2,-1
   80ca4:	003f0006 	br	808a8 <__sfvwrite_r+0xb8>
   80ca8:	00800304 	movi	r2,12
   80cac:	a8800015 	stw	r2,0(r21)
   80cb0:	8080030b 	ldhu	r2,12(r16)
   80cb4:	003f5006 	br	809f8 <__sfvwrite_r+0x208>

00080cb8 <_fwalk>:
   80cb8:	defff704 	addi	sp,sp,-36
   80cbc:	dd000415 	stw	r20,16(sp)
   80cc0:	dfc00815 	stw	ra,32(sp)
   80cc4:	ddc00715 	stw	r23,28(sp)
   80cc8:	dd800615 	stw	r22,24(sp)
   80ccc:	dd400515 	stw	r21,20(sp)
   80cd0:	dcc00315 	stw	r19,12(sp)
   80cd4:	dc800215 	stw	r18,8(sp)
   80cd8:	dc400115 	stw	r17,4(sp)
   80cdc:	dc000015 	stw	r16,0(sp)
   80ce0:	2500b804 	addi	r20,r4,736
   80ce4:	a0002326 	beq	r20,zero,80d74 <_fwalk+0xbc>
   80ce8:	282b883a 	mov	r21,r5
   80cec:	002f883a 	mov	r23,zero
   80cf0:	05800044 	movi	r22,1
   80cf4:	04ffffc4 	movi	r19,-1
   80cf8:	a4400117 	ldw	r17,4(r20)
   80cfc:	a4800217 	ldw	r18,8(r20)
   80d00:	8c7fffc4 	addi	r17,r17,-1
   80d04:	88000d16 	blt	r17,zero,80d3c <_fwalk+0x84>
   80d08:	94000304 	addi	r16,r18,12
   80d0c:	94800384 	addi	r18,r18,14
   80d10:	8080000b 	ldhu	r2,0(r16)
   80d14:	8c7fffc4 	addi	r17,r17,-1
   80d18:	813ffd04 	addi	r4,r16,-12
   80d1c:	b080042e 	bgeu	r22,r2,80d30 <_fwalk+0x78>
   80d20:	9080000f 	ldh	r2,0(r18)
   80d24:	14c00226 	beq	r2,r19,80d30 <_fwalk+0x78>
   80d28:	a83ee83a 	callr	r21
   80d2c:	b8aeb03a 	or	r23,r23,r2
   80d30:	84001a04 	addi	r16,r16,104
   80d34:	94801a04 	addi	r18,r18,104
   80d38:	8cfff51e 	bne	r17,r19,80d10 <_fwalk+0x58>
   80d3c:	a5000017 	ldw	r20,0(r20)
   80d40:	a03fed1e 	bne	r20,zero,80cf8 <_fwalk+0x40>
   80d44:	b805883a 	mov	r2,r23
   80d48:	dfc00817 	ldw	ra,32(sp)
   80d4c:	ddc00717 	ldw	r23,28(sp)
   80d50:	dd800617 	ldw	r22,24(sp)
   80d54:	dd400517 	ldw	r21,20(sp)
   80d58:	dd000417 	ldw	r20,16(sp)
   80d5c:	dcc00317 	ldw	r19,12(sp)
   80d60:	dc800217 	ldw	r18,8(sp)
   80d64:	dc400117 	ldw	r17,4(sp)
   80d68:	dc000017 	ldw	r16,0(sp)
   80d6c:	dec00904 	addi	sp,sp,36
   80d70:	f800283a 	ret
   80d74:	002f883a 	mov	r23,zero
   80d78:	003ff206 	br	80d44 <_fwalk+0x8c>

00080d7c <_fwalk_reent>:
   80d7c:	defff704 	addi	sp,sp,-36
   80d80:	dd000415 	stw	r20,16(sp)
   80d84:	dfc00815 	stw	ra,32(sp)
   80d88:	ddc00715 	stw	r23,28(sp)
   80d8c:	dd800615 	stw	r22,24(sp)
   80d90:	dd400515 	stw	r21,20(sp)
   80d94:	dcc00315 	stw	r19,12(sp)
   80d98:	dc800215 	stw	r18,8(sp)
   80d9c:	dc400115 	stw	r17,4(sp)
   80da0:	dc000015 	stw	r16,0(sp)
   80da4:	2500b804 	addi	r20,r4,736
   80da8:	a0002326 	beq	r20,zero,80e38 <_fwalk_reent+0xbc>
   80dac:	282b883a 	mov	r21,r5
   80db0:	2027883a 	mov	r19,r4
   80db4:	002f883a 	mov	r23,zero
   80db8:	05800044 	movi	r22,1
   80dbc:	04bfffc4 	movi	r18,-1
   80dc0:	a4400117 	ldw	r17,4(r20)
   80dc4:	a4000217 	ldw	r16,8(r20)
   80dc8:	8c7fffc4 	addi	r17,r17,-1
   80dcc:	88000c16 	blt	r17,zero,80e00 <_fwalk_reent+0x84>
   80dd0:	84000304 	addi	r16,r16,12
   80dd4:	8080000b 	ldhu	r2,0(r16)
   80dd8:	8c7fffc4 	addi	r17,r17,-1
   80ddc:	817ffd04 	addi	r5,r16,-12
   80de0:	b080052e 	bgeu	r22,r2,80df8 <_fwalk_reent+0x7c>
   80de4:	8080008f 	ldh	r2,2(r16)
   80de8:	9809883a 	mov	r4,r19
   80dec:	14800226 	beq	r2,r18,80df8 <_fwalk_reent+0x7c>
   80df0:	a83ee83a 	callr	r21
   80df4:	b8aeb03a 	or	r23,r23,r2
   80df8:	84001a04 	addi	r16,r16,104
   80dfc:	8cbff51e 	bne	r17,r18,80dd4 <_fwalk_reent+0x58>
   80e00:	a5000017 	ldw	r20,0(r20)
   80e04:	a03fee1e 	bne	r20,zero,80dc0 <_fwalk_reent+0x44>
   80e08:	b805883a 	mov	r2,r23
   80e0c:	dfc00817 	ldw	ra,32(sp)
   80e10:	ddc00717 	ldw	r23,28(sp)
   80e14:	dd800617 	ldw	r22,24(sp)
   80e18:	dd400517 	ldw	r21,20(sp)
   80e1c:	dd000417 	ldw	r20,16(sp)
   80e20:	dcc00317 	ldw	r19,12(sp)
   80e24:	dc800217 	ldw	r18,8(sp)
   80e28:	dc400117 	ldw	r17,4(sp)
   80e2c:	dc000017 	ldw	r16,0(sp)
   80e30:	dec00904 	addi	sp,sp,36
   80e34:	f800283a 	ret
   80e38:	002f883a 	mov	r23,zero
   80e3c:	003ff206 	br	80e08 <_fwalk_reent+0x8c>

00080e40 <_malloc_r>:
   80e40:	defff504 	addi	sp,sp,-44
   80e44:	dc800315 	stw	r18,12(sp)
   80e48:	dfc00a15 	stw	ra,40(sp)
   80e4c:	df000915 	stw	fp,36(sp)
   80e50:	ddc00815 	stw	r23,32(sp)
   80e54:	dd800715 	stw	r22,28(sp)
   80e58:	dd400615 	stw	r21,24(sp)
   80e5c:	dd000515 	stw	r20,20(sp)
   80e60:	dcc00415 	stw	r19,16(sp)
   80e64:	dc400215 	stw	r17,8(sp)
   80e68:	dc000115 	stw	r16,4(sp)
   80e6c:	288002c4 	addi	r2,r5,11
   80e70:	00c00584 	movi	r3,22
   80e74:	2025883a 	mov	r18,r4
   80e78:	18807f2e 	bgeu	r3,r2,81078 <_malloc_r+0x238>
   80e7c:	047ffe04 	movi	r17,-8
   80e80:	1462703a 	and	r17,r2,r17
   80e84:	8800a316 	blt	r17,zero,81114 <_malloc_r+0x2d4>
   80e88:	8940a236 	bltu	r17,r5,81114 <_malloc_r+0x2d4>
   80e8c:	008367c0 	call	8367c <__malloc_lock>
   80e90:	00807dc4 	movi	r2,503
   80e94:	1441e92e 	bgeu	r2,r17,8163c <_malloc_r+0x7fc>
   80e98:	8804d27a 	srli	r2,r17,9
   80e9c:	1000a126 	beq	r2,zero,81124 <_malloc_r+0x2e4>
   80ea0:	00c00104 	movi	r3,4
   80ea4:	18811e36 	bltu	r3,r2,81320 <_malloc_r+0x4e0>
   80ea8:	8804d1ba 	srli	r2,r17,6
   80eac:	12000e44 	addi	r8,r2,57
   80eb0:	11c00e04 	addi	r7,r2,56
   80eb4:	4209883a 	add	r4,r8,r8
   80eb8:	04c00434 	movhi	r19,16
   80ebc:	2109883a 	add	r4,r4,r4
   80ec0:	9cc11c04 	addi	r19,r19,1136
   80ec4:	2109883a 	add	r4,r4,r4
   80ec8:	9909883a 	add	r4,r19,r4
   80ecc:	24000117 	ldw	r16,4(r4)
   80ed0:	213ffe04 	addi	r4,r4,-8
   80ed4:	24009726 	beq	r4,r16,81134 <_malloc_r+0x2f4>
   80ed8:	80800117 	ldw	r2,4(r16)
   80edc:	01bfff04 	movi	r6,-4
   80ee0:	014003c4 	movi	r5,15
   80ee4:	1184703a 	and	r2,r2,r6
   80ee8:	1447c83a 	sub	r3,r2,r17
   80eec:	28c00716 	blt	r5,r3,80f0c <_malloc_r+0xcc>
   80ef0:	1800920e 	bge	r3,zero,8113c <_malloc_r+0x2fc>
   80ef4:	84000317 	ldw	r16,12(r16)
   80ef8:	24008e26 	beq	r4,r16,81134 <_malloc_r+0x2f4>
   80efc:	80800117 	ldw	r2,4(r16)
   80f00:	1184703a 	and	r2,r2,r6
   80f04:	1447c83a 	sub	r3,r2,r17
   80f08:	28fff90e 	bge	r5,r3,80ef0 <_malloc_r+0xb0>
   80f0c:	3809883a 	mov	r4,r7
   80f10:	01800434 	movhi	r6,16
   80f14:	9c000417 	ldw	r16,16(r19)
   80f18:	31811c04 	addi	r6,r6,1136
   80f1c:	32000204 	addi	r8,r6,8
   80f20:	82013426 	beq	r16,r8,813f4 <_malloc_r+0x5b4>
   80f24:	80c00117 	ldw	r3,4(r16)
   80f28:	00bfff04 	movi	r2,-4
   80f2c:	188e703a 	and	r7,r3,r2
   80f30:	3c45c83a 	sub	r2,r7,r17
   80f34:	00c003c4 	movi	r3,15
   80f38:	18811f16 	blt	r3,r2,813b8 <_malloc_r+0x578>
   80f3c:	32000515 	stw	r8,20(r6)
   80f40:	32000415 	stw	r8,16(r6)
   80f44:	10007f0e 	bge	r2,zero,81144 <_malloc_r+0x304>
   80f48:	00807fc4 	movi	r2,511
   80f4c:	11c0fd36 	bltu	r2,r7,81344 <_malloc_r+0x504>
   80f50:	3806d0fa 	srli	r3,r7,3
   80f54:	01c00044 	movi	r7,1
   80f58:	30800117 	ldw	r2,4(r6)
   80f5c:	19400044 	addi	r5,r3,1
   80f60:	294b883a 	add	r5,r5,r5
   80f64:	1807d0ba 	srai	r3,r3,2
   80f68:	294b883a 	add	r5,r5,r5
   80f6c:	294b883a 	add	r5,r5,r5
   80f70:	298b883a 	add	r5,r5,r6
   80f74:	38c6983a 	sll	r3,r7,r3
   80f78:	29c00017 	ldw	r7,0(r5)
   80f7c:	2a7ffe04 	addi	r9,r5,-8
   80f80:	1886b03a 	or	r3,r3,r2
   80f84:	82400315 	stw	r9,12(r16)
   80f88:	81c00215 	stw	r7,8(r16)
   80f8c:	30c00115 	stw	r3,4(r6)
   80f90:	2c000015 	stw	r16,0(r5)
   80f94:	3c000315 	stw	r16,12(r7)
   80f98:	2005d0ba 	srai	r2,r4,2
   80f9c:	01400044 	movi	r5,1
   80fa0:	288a983a 	sll	r5,r5,r2
   80fa4:	19406f36 	bltu	r3,r5,81164 <_malloc_r+0x324>
   80fa8:	28c4703a 	and	r2,r5,r3
   80fac:	10000a1e 	bne	r2,zero,80fd8 <_malloc_r+0x198>
   80fb0:	00bfff04 	movi	r2,-4
   80fb4:	294b883a 	add	r5,r5,r5
   80fb8:	2088703a 	and	r4,r4,r2
   80fbc:	28c4703a 	and	r2,r5,r3
   80fc0:	21000104 	addi	r4,r4,4
   80fc4:	1000041e 	bne	r2,zero,80fd8 <_malloc_r+0x198>
   80fc8:	294b883a 	add	r5,r5,r5
   80fcc:	28c4703a 	and	r2,r5,r3
   80fd0:	21000104 	addi	r4,r4,4
   80fd4:	103ffc26 	beq	r2,zero,80fc8 <_malloc_r+0x188>
   80fd8:	02bfff04 	movi	r10,-4
   80fdc:	024003c4 	movi	r9,15
   80fe0:	21800044 	addi	r6,r4,1
   80fe4:	318d883a 	add	r6,r6,r6
   80fe8:	318d883a 	add	r6,r6,r6
   80fec:	318d883a 	add	r6,r6,r6
   80ff0:	998d883a 	add	r6,r19,r6
   80ff4:	333ffe04 	addi	r12,r6,-8
   80ff8:	2017883a 	mov	r11,r4
   80ffc:	31800104 	addi	r6,r6,4
   81000:	34000017 	ldw	r16,0(r6)
   81004:	31fffd04 	addi	r7,r6,-12
   81008:	81c0041e 	bne	r16,r7,8101c <_malloc_r+0x1dc>
   8100c:	0000fb06 	br	813fc <_malloc_r+0x5bc>
   81010:	1801030e 	bge	r3,zero,81420 <_malloc_r+0x5e0>
   81014:	84000317 	ldw	r16,12(r16)
   81018:	81c0f826 	beq	r16,r7,813fc <_malloc_r+0x5bc>
   8101c:	80800117 	ldw	r2,4(r16)
   81020:	1284703a 	and	r2,r2,r10
   81024:	1447c83a 	sub	r3,r2,r17
   81028:	48fff90e 	bge	r9,r3,81010 <_malloc_r+0x1d0>
   8102c:	80800317 	ldw	r2,12(r16)
   81030:	81000217 	ldw	r4,8(r16)
   81034:	89400054 	ori	r5,r17,1
   81038:	81400115 	stw	r5,4(r16)
   8103c:	20800315 	stw	r2,12(r4)
   81040:	11000215 	stw	r4,8(r2)
   81044:	8463883a 	add	r17,r16,r17
   81048:	9c400515 	stw	r17,20(r19)
   8104c:	9c400415 	stw	r17,16(r19)
   81050:	18800054 	ori	r2,r3,1
   81054:	88800115 	stw	r2,4(r17)
   81058:	8a000315 	stw	r8,12(r17)
   8105c:	8a000215 	stw	r8,8(r17)
   81060:	88e3883a 	add	r17,r17,r3
   81064:	88c00015 	stw	r3,0(r17)
   81068:	9009883a 	mov	r4,r18
   8106c:	00836a00 	call	836a0 <__malloc_unlock>
   81070:	80800204 	addi	r2,r16,8
   81074:	00001b06 	br	810e4 <_malloc_r+0x2a4>
   81078:	04400404 	movi	r17,16
   8107c:	89402536 	bltu	r17,r5,81114 <_malloc_r+0x2d4>
   81080:	008367c0 	call	8367c <__malloc_lock>
   81084:	00800184 	movi	r2,6
   81088:	01000084 	movi	r4,2
   8108c:	04c00434 	movhi	r19,16
   81090:	1085883a 	add	r2,r2,r2
   81094:	9cc11c04 	addi	r19,r19,1136
   81098:	1085883a 	add	r2,r2,r2
   8109c:	9885883a 	add	r2,r19,r2
   810a0:	14000117 	ldw	r16,4(r2)
   810a4:	10fffe04 	addi	r3,r2,-8
   810a8:	80c0d926 	beq	r16,r3,81410 <_malloc_r+0x5d0>
   810ac:	80c00117 	ldw	r3,4(r16)
   810b0:	81000317 	ldw	r4,12(r16)
   810b4:	00bfff04 	movi	r2,-4
   810b8:	1884703a 	and	r2,r3,r2
   810bc:	81400217 	ldw	r5,8(r16)
   810c0:	8085883a 	add	r2,r16,r2
   810c4:	10c00117 	ldw	r3,4(r2)
   810c8:	29000315 	stw	r4,12(r5)
   810cc:	21400215 	stw	r5,8(r4)
   810d0:	18c00054 	ori	r3,r3,1
   810d4:	10c00115 	stw	r3,4(r2)
   810d8:	9009883a 	mov	r4,r18
   810dc:	00836a00 	call	836a0 <__malloc_unlock>
   810e0:	80800204 	addi	r2,r16,8
   810e4:	dfc00a17 	ldw	ra,40(sp)
   810e8:	df000917 	ldw	fp,36(sp)
   810ec:	ddc00817 	ldw	r23,32(sp)
   810f0:	dd800717 	ldw	r22,28(sp)
   810f4:	dd400617 	ldw	r21,24(sp)
   810f8:	dd000517 	ldw	r20,20(sp)
   810fc:	dcc00417 	ldw	r19,16(sp)
   81100:	dc800317 	ldw	r18,12(sp)
   81104:	dc400217 	ldw	r17,8(sp)
   81108:	dc000117 	ldw	r16,4(sp)
   8110c:	dec00b04 	addi	sp,sp,44
   81110:	f800283a 	ret
   81114:	00800304 	movi	r2,12
   81118:	90800015 	stw	r2,0(r18)
   8111c:	0005883a 	mov	r2,zero
   81120:	003ff006 	br	810e4 <_malloc_r+0x2a4>
   81124:	01002004 	movi	r4,128
   81128:	02001004 	movi	r8,64
   8112c:	01c00fc4 	movi	r7,63
   81130:	003f6106 	br	80eb8 <_malloc_r+0x78>
   81134:	4009883a 	mov	r4,r8
   81138:	003f7506 	br	80f10 <_malloc_r+0xd0>
   8113c:	81000317 	ldw	r4,12(r16)
   81140:	003fde06 	br	810bc <_malloc_r+0x27c>
   81144:	81c5883a 	add	r2,r16,r7
   81148:	11400117 	ldw	r5,4(r2)
   8114c:	9009883a 	mov	r4,r18
   81150:	29400054 	ori	r5,r5,1
   81154:	11400115 	stw	r5,4(r2)
   81158:	00836a00 	call	836a0 <__malloc_unlock>
   8115c:	80800204 	addi	r2,r16,8
   81160:	003fe006 	br	810e4 <_malloc_r+0x2a4>
   81164:	9c000217 	ldw	r16,8(r19)
   81168:	00bfff04 	movi	r2,-4
   8116c:	85800117 	ldw	r22,4(r16)
   81170:	b0ac703a 	and	r22,r22,r2
   81174:	b4400336 	bltu	r22,r17,81184 <_malloc_r+0x344>
   81178:	b445c83a 	sub	r2,r22,r17
   8117c:	00c003c4 	movi	r3,15
   81180:	18805d16 	blt	r3,r2,812f8 <_malloc_r+0x4b8>
   81184:	05c00434 	movhi	r23,16
   81188:	00800434 	movhi	r2,16
   8118c:	1086b004 	addi	r2,r2,6848
   81190:	bdc6a204 	addi	r23,r23,6792
   81194:	15400017 	ldw	r21,0(r2)
   81198:	b8c00017 	ldw	r3,0(r23)
   8119c:	00bfffc4 	movi	r2,-1
   811a0:	858d883a 	add	r6,r16,r22
   811a4:	8d6b883a 	add	r21,r17,r21
   811a8:	1880ea26 	beq	r3,r2,81554 <_malloc_r+0x714>
   811ac:	ad4403c4 	addi	r21,r21,4111
   811b0:	00bc0004 	movi	r2,-4096
   811b4:	a8aa703a 	and	r21,r21,r2
   811b8:	a80b883a 	mov	r5,r21
   811bc:	9009883a 	mov	r4,r18
   811c0:	d9800015 	stw	r6,0(sp)
   811c4:	00820600 	call	82060 <_sbrk_r>
   811c8:	1029883a 	mov	r20,r2
   811cc:	00bfffc4 	movi	r2,-1
   811d0:	d9800017 	ldw	r6,0(sp)
   811d4:	a080e826 	beq	r20,r2,81578 <_malloc_r+0x738>
   811d8:	a180a636 	bltu	r20,r6,81474 <_malloc_r+0x634>
   811dc:	07000434 	movhi	fp,16
   811e0:	e706b904 	addi	fp,fp,6884
   811e4:	e0800017 	ldw	r2,0(fp)
   811e8:	a887883a 	add	r3,r21,r2
   811ec:	e0c00015 	stw	r3,0(fp)
   811f0:	3500e626 	beq	r6,r20,8158c <_malloc_r+0x74c>
   811f4:	b9000017 	ldw	r4,0(r23)
   811f8:	00bfffc4 	movi	r2,-1
   811fc:	2080ee26 	beq	r4,r2,815b8 <_malloc_r+0x778>
   81200:	a185c83a 	sub	r2,r20,r6
   81204:	10c5883a 	add	r2,r2,r3
   81208:	e0800015 	stw	r2,0(fp)
   8120c:	a0c001cc 	andi	r3,r20,7
   81210:	1800bc26 	beq	r3,zero,81504 <_malloc_r+0x6c4>
   81214:	a0e9c83a 	sub	r20,r20,r3
   81218:	00840204 	movi	r2,4104
   8121c:	a5000204 	addi	r20,r20,8
   81220:	10c7c83a 	sub	r3,r2,r3
   81224:	a545883a 	add	r2,r20,r21
   81228:	1083ffcc 	andi	r2,r2,4095
   8122c:	18abc83a 	sub	r21,r3,r2
   81230:	a80b883a 	mov	r5,r21
   81234:	9009883a 	mov	r4,r18
   81238:	00820600 	call	82060 <_sbrk_r>
   8123c:	00ffffc4 	movi	r3,-1
   81240:	10c0e126 	beq	r2,r3,815c8 <_malloc_r+0x788>
   81244:	1505c83a 	sub	r2,r2,r20
   81248:	1545883a 	add	r2,r2,r21
   8124c:	10800054 	ori	r2,r2,1
   81250:	e0c00017 	ldw	r3,0(fp)
   81254:	9d000215 	stw	r20,8(r19)
   81258:	a0800115 	stw	r2,4(r20)
   8125c:	a8c7883a 	add	r3,r21,r3
   81260:	e0c00015 	stw	r3,0(fp)
   81264:	84c00e26 	beq	r16,r19,812a0 <_malloc_r+0x460>
   81268:	018003c4 	movi	r6,15
   8126c:	3580a72e 	bgeu	r6,r22,8150c <_malloc_r+0x6cc>
   81270:	81400117 	ldw	r5,4(r16)
   81274:	013ffe04 	movi	r4,-8
   81278:	b0bffd04 	addi	r2,r22,-12
   8127c:	1104703a 	and	r2,r2,r4
   81280:	2900004c 	andi	r4,r5,1
   81284:	2088b03a 	or	r4,r4,r2
   81288:	81000115 	stw	r4,4(r16)
   8128c:	01400144 	movi	r5,5
   81290:	8089883a 	add	r4,r16,r2
   81294:	21400115 	stw	r5,4(r4)
   81298:	21400215 	stw	r5,8(r4)
   8129c:	3080cd36 	bltu	r6,r2,815d4 <_malloc_r+0x794>
   812a0:	00800434 	movhi	r2,16
   812a4:	1086af04 	addi	r2,r2,6844
   812a8:	11000017 	ldw	r4,0(r2)
   812ac:	20c0012e 	bgeu	r4,r3,812b4 <_malloc_r+0x474>
   812b0:	10c00015 	stw	r3,0(r2)
   812b4:	00800434 	movhi	r2,16
   812b8:	1086ae04 	addi	r2,r2,6840
   812bc:	11000017 	ldw	r4,0(r2)
   812c0:	9c000217 	ldw	r16,8(r19)
   812c4:	20c0012e 	bgeu	r4,r3,812cc <_malloc_r+0x48c>
   812c8:	10c00015 	stw	r3,0(r2)
   812cc:	80c00117 	ldw	r3,4(r16)
   812d0:	00bfff04 	movi	r2,-4
   812d4:	1886703a 	and	r3,r3,r2
   812d8:	1c45c83a 	sub	r2,r3,r17
   812dc:	1c400236 	bltu	r3,r17,812e8 <_malloc_r+0x4a8>
   812e0:	00c003c4 	movi	r3,15
   812e4:	18800416 	blt	r3,r2,812f8 <_malloc_r+0x4b8>
   812e8:	9009883a 	mov	r4,r18
   812ec:	00836a00 	call	836a0 <__malloc_unlock>
   812f0:	0005883a 	mov	r2,zero
   812f4:	003f7b06 	br	810e4 <_malloc_r+0x2a4>
   812f8:	88c00054 	ori	r3,r17,1
   812fc:	80c00115 	stw	r3,4(r16)
   81300:	8463883a 	add	r17,r16,r17
   81304:	10800054 	ori	r2,r2,1
   81308:	9c400215 	stw	r17,8(r19)
   8130c:	88800115 	stw	r2,4(r17)
   81310:	9009883a 	mov	r4,r18
   81314:	00836a00 	call	836a0 <__malloc_unlock>
   81318:	80800204 	addi	r2,r16,8
   8131c:	003f7106 	br	810e4 <_malloc_r+0x2a4>
   81320:	00c00504 	movi	r3,20
   81324:	18804a2e 	bgeu	r3,r2,81450 <_malloc_r+0x610>
   81328:	00c01504 	movi	r3,84
   8132c:	18806e36 	bltu	r3,r2,814e8 <_malloc_r+0x6a8>
   81330:	8804d33a 	srli	r2,r17,12
   81334:	12001bc4 	addi	r8,r2,111
   81338:	11c01b84 	addi	r7,r2,110
   8133c:	4209883a 	add	r4,r8,r8
   81340:	003edd06 	br	80eb8 <_malloc_r+0x78>
   81344:	3804d27a 	srli	r2,r7,9
   81348:	00c00104 	movi	r3,4
   8134c:	1880442e 	bgeu	r3,r2,81460 <_malloc_r+0x620>
   81350:	00c00504 	movi	r3,20
   81354:	18808136 	bltu	r3,r2,8155c <_malloc_r+0x71c>
   81358:	11401704 	addi	r5,r2,92
   8135c:	10c016c4 	addi	r3,r2,91
   81360:	294b883a 	add	r5,r5,r5
   81364:	294b883a 	add	r5,r5,r5
   81368:	294b883a 	add	r5,r5,r5
   8136c:	994b883a 	add	r5,r19,r5
   81370:	28800017 	ldw	r2,0(r5)
   81374:	01800434 	movhi	r6,16
   81378:	297ffe04 	addi	r5,r5,-8
   8137c:	31811c04 	addi	r6,r6,1136
   81380:	28806526 	beq	r5,r2,81518 <_malloc_r+0x6d8>
   81384:	01bfff04 	movi	r6,-4
   81388:	10c00117 	ldw	r3,4(r2)
   8138c:	1986703a 	and	r3,r3,r6
   81390:	38c0022e 	bgeu	r7,r3,8139c <_malloc_r+0x55c>
   81394:	10800217 	ldw	r2,8(r2)
   81398:	28bffb1e 	bne	r5,r2,81388 <_malloc_r+0x548>
   8139c:	11400317 	ldw	r5,12(r2)
   813a0:	98c00117 	ldw	r3,4(r19)
   813a4:	81400315 	stw	r5,12(r16)
   813a8:	80800215 	stw	r2,8(r16)
   813ac:	2c000215 	stw	r16,8(r5)
   813b0:	14000315 	stw	r16,12(r2)
   813b4:	003ef806 	br	80f98 <_malloc_r+0x158>
   813b8:	88c00054 	ori	r3,r17,1
   813bc:	80c00115 	stw	r3,4(r16)
   813c0:	8463883a 	add	r17,r16,r17
   813c4:	34400515 	stw	r17,20(r6)
   813c8:	34400415 	stw	r17,16(r6)
   813cc:	10c00054 	ori	r3,r2,1
   813d0:	8a000315 	stw	r8,12(r17)
   813d4:	8a000215 	stw	r8,8(r17)
   813d8:	88c00115 	stw	r3,4(r17)
   813dc:	88a3883a 	add	r17,r17,r2
   813e0:	88800015 	stw	r2,0(r17)
   813e4:	9009883a 	mov	r4,r18
   813e8:	00836a00 	call	836a0 <__malloc_unlock>
   813ec:	80800204 	addi	r2,r16,8
   813f0:	003f3c06 	br	810e4 <_malloc_r+0x2a4>
   813f4:	30c00117 	ldw	r3,4(r6)
   813f8:	003ee706 	br	80f98 <_malloc_r+0x158>
   813fc:	5ac00044 	addi	r11,r11,1
   81400:	588000cc 	andi	r2,r11,3
   81404:	31800204 	addi	r6,r6,8
   81408:	103efd1e 	bne	r2,zero,81000 <_malloc_r+0x1c0>
   8140c:	00002406 	br	814a0 <_malloc_r+0x660>
   81410:	14000317 	ldw	r16,12(r2)
   81414:	143f251e 	bne	r2,r16,810ac <_malloc_r+0x26c>
   81418:	21000084 	addi	r4,r4,2
   8141c:	003ebc06 	br	80f10 <_malloc_r+0xd0>
   81420:	8085883a 	add	r2,r16,r2
   81424:	10c00117 	ldw	r3,4(r2)
   81428:	81000317 	ldw	r4,12(r16)
   8142c:	81400217 	ldw	r5,8(r16)
   81430:	18c00054 	ori	r3,r3,1
   81434:	10c00115 	stw	r3,4(r2)
   81438:	29000315 	stw	r4,12(r5)
   8143c:	21400215 	stw	r5,8(r4)
   81440:	9009883a 	mov	r4,r18
   81444:	00836a00 	call	836a0 <__malloc_unlock>
   81448:	80800204 	addi	r2,r16,8
   8144c:	003f2506 	br	810e4 <_malloc_r+0x2a4>
   81450:	12001704 	addi	r8,r2,92
   81454:	11c016c4 	addi	r7,r2,91
   81458:	4209883a 	add	r4,r8,r8
   8145c:	003e9606 	br	80eb8 <_malloc_r+0x78>
   81460:	3804d1ba 	srli	r2,r7,6
   81464:	11400e44 	addi	r5,r2,57
   81468:	10c00e04 	addi	r3,r2,56
   8146c:	294b883a 	add	r5,r5,r5
   81470:	003fbc06 	br	81364 <_malloc_r+0x524>
   81474:	84ff5926 	beq	r16,r19,811dc <_malloc_r+0x39c>
   81478:	00800434 	movhi	r2,16
   8147c:	10811c04 	addi	r2,r2,1136
   81480:	14000217 	ldw	r16,8(r2)
   81484:	00bfff04 	movi	r2,-4
   81488:	80c00117 	ldw	r3,4(r16)
   8148c:	1886703a 	and	r3,r3,r2
   81490:	003f9106 	br	812d8 <_malloc_r+0x498>
   81494:	60800217 	ldw	r2,8(r12)
   81498:	213fffc4 	addi	r4,r4,-1
   8149c:	1300651e 	bne	r2,r12,81634 <_malloc_r+0x7f4>
   814a0:	208000cc 	andi	r2,r4,3
   814a4:	633ffe04 	addi	r12,r12,-8
   814a8:	103ffa1e 	bne	r2,zero,81494 <_malloc_r+0x654>
   814ac:	98800117 	ldw	r2,4(r19)
   814b0:	0146303a 	nor	r3,zero,r5
   814b4:	1884703a 	and	r2,r3,r2
   814b8:	98800115 	stw	r2,4(r19)
   814bc:	294b883a 	add	r5,r5,r5
   814c0:	117f2836 	bltu	r2,r5,81164 <_malloc_r+0x324>
   814c4:	283f2726 	beq	r5,zero,81164 <_malloc_r+0x324>
   814c8:	2886703a 	and	r3,r5,r2
   814cc:	5809883a 	mov	r4,r11
   814d0:	183ec31e 	bne	r3,zero,80fe0 <_malloc_r+0x1a0>
   814d4:	294b883a 	add	r5,r5,r5
   814d8:	2886703a 	and	r3,r5,r2
   814dc:	21000104 	addi	r4,r4,4
   814e0:	183ffc26 	beq	r3,zero,814d4 <_malloc_r+0x694>
   814e4:	003ebe06 	br	80fe0 <_malloc_r+0x1a0>
   814e8:	00c05504 	movi	r3,340
   814ec:	18801236 	bltu	r3,r2,81538 <_malloc_r+0x6f8>
   814f0:	8804d3fa 	srli	r2,r17,15
   814f4:	12001e04 	addi	r8,r2,120
   814f8:	11c01dc4 	addi	r7,r2,119
   814fc:	4209883a 	add	r4,r8,r8
   81500:	003e6d06 	br	80eb8 <_malloc_r+0x78>
   81504:	00c40004 	movi	r3,4096
   81508:	003f4606 	br	81224 <_malloc_r+0x3e4>
   8150c:	00800044 	movi	r2,1
   81510:	a0800115 	stw	r2,4(r20)
   81514:	003f7406 	br	812e8 <_malloc_r+0x4a8>
   81518:	1805d0ba 	srai	r2,r3,2
   8151c:	01c00044 	movi	r7,1
   81520:	30c00117 	ldw	r3,4(r6)
   81524:	388e983a 	sll	r7,r7,r2
   81528:	2805883a 	mov	r2,r5
   8152c:	38c6b03a 	or	r3,r7,r3
   81530:	30c00115 	stw	r3,4(r6)
   81534:	003f9b06 	br	813a4 <_malloc_r+0x564>
   81538:	00c15504 	movi	r3,1364
   8153c:	18801a36 	bltu	r3,r2,815a8 <_malloc_r+0x768>
   81540:	8804d4ba 	srli	r2,r17,18
   81544:	12001f44 	addi	r8,r2,125
   81548:	11c01f04 	addi	r7,r2,124
   8154c:	4209883a 	add	r4,r8,r8
   81550:	003e5906 	br	80eb8 <_malloc_r+0x78>
   81554:	ad400404 	addi	r21,r21,16
   81558:	003f1706 	br	811b8 <_malloc_r+0x378>
   8155c:	00c01504 	movi	r3,84
   81560:	18802336 	bltu	r3,r2,815f0 <_malloc_r+0x7b0>
   81564:	3804d33a 	srli	r2,r7,12
   81568:	11401bc4 	addi	r5,r2,111
   8156c:	10c01b84 	addi	r3,r2,110
   81570:	294b883a 	add	r5,r5,r5
   81574:	003f7b06 	br	81364 <_malloc_r+0x524>
   81578:	9c000217 	ldw	r16,8(r19)
   8157c:	00bfff04 	movi	r2,-4
   81580:	80c00117 	ldw	r3,4(r16)
   81584:	1886703a 	and	r3,r3,r2
   81588:	003f5306 	br	812d8 <_malloc_r+0x498>
   8158c:	3083ffcc 	andi	r2,r6,4095
   81590:	103f181e 	bne	r2,zero,811f4 <_malloc_r+0x3b4>
   81594:	99000217 	ldw	r4,8(r19)
   81598:	b545883a 	add	r2,r22,r21
   8159c:	10800054 	ori	r2,r2,1
   815a0:	20800115 	stw	r2,4(r4)
   815a4:	003f3e06 	br	812a0 <_malloc_r+0x460>
   815a8:	01003f84 	movi	r4,254
   815ac:	02001fc4 	movi	r8,127
   815b0:	01c01f84 	movi	r7,126
   815b4:	003e4006 	br	80eb8 <_malloc_r+0x78>
   815b8:	00800434 	movhi	r2,16
   815bc:	1086a204 	addi	r2,r2,6792
   815c0:	15000015 	stw	r20,0(r2)
   815c4:	003f1106 	br	8120c <_malloc_r+0x3cc>
   815c8:	00800044 	movi	r2,1
   815cc:	002b883a 	mov	r21,zero
   815d0:	003f1f06 	br	81250 <_malloc_r+0x410>
   815d4:	81400204 	addi	r5,r16,8
   815d8:	9009883a 	mov	r4,r18
   815dc:	00828c80 	call	828c8 <_free_r>
   815e0:	00800434 	movhi	r2,16
   815e4:	1086b904 	addi	r2,r2,6884
   815e8:	10c00017 	ldw	r3,0(r2)
   815ec:	003f2c06 	br	812a0 <_malloc_r+0x460>
   815f0:	00c05504 	movi	r3,340
   815f4:	18800536 	bltu	r3,r2,8160c <_malloc_r+0x7cc>
   815f8:	3804d3fa 	srli	r2,r7,15
   815fc:	11401e04 	addi	r5,r2,120
   81600:	10c01dc4 	addi	r3,r2,119
   81604:	294b883a 	add	r5,r5,r5
   81608:	003f5606 	br	81364 <_malloc_r+0x524>
   8160c:	00c15504 	movi	r3,1364
   81610:	18800536 	bltu	r3,r2,81628 <_malloc_r+0x7e8>
   81614:	3804d4ba 	srli	r2,r7,18
   81618:	11401f44 	addi	r5,r2,125
   8161c:	10c01f04 	addi	r3,r2,124
   81620:	294b883a 	add	r5,r5,r5
   81624:	003f4f06 	br	81364 <_malloc_r+0x524>
   81628:	01403f84 	movi	r5,254
   8162c:	00c01f84 	movi	r3,126
   81630:	003f4c06 	br	81364 <_malloc_r+0x524>
   81634:	98800117 	ldw	r2,4(r19)
   81638:	003fa006 	br	814bc <_malloc_r+0x67c>
   8163c:	8808d0fa 	srli	r4,r17,3
   81640:	20800044 	addi	r2,r4,1
   81644:	1085883a 	add	r2,r2,r2
   81648:	003e9006 	br	8108c <_malloc_r+0x24c>

0008164c <memchr>:
   8164c:	208000cc 	andi	r2,r4,3
   81650:	280f883a 	mov	r7,r5
   81654:	10003426 	beq	r2,zero,81728 <memchr+0xdc>
   81658:	30bfffc4 	addi	r2,r6,-1
   8165c:	30001a26 	beq	r6,zero,816c8 <memchr+0x7c>
   81660:	20c00003 	ldbu	r3,0(r4)
   81664:	29803fcc 	andi	r6,r5,255
   81668:	30c0051e 	bne	r6,r3,81680 <memchr+0x34>
   8166c:	00001806 	br	816d0 <memchr+0x84>
   81670:	10001526 	beq	r2,zero,816c8 <memchr+0x7c>
   81674:	20c00003 	ldbu	r3,0(r4)
   81678:	10bfffc4 	addi	r2,r2,-1
   8167c:	30c01426 	beq	r6,r3,816d0 <memchr+0x84>
   81680:	21000044 	addi	r4,r4,1
   81684:	20c000cc 	andi	r3,r4,3
   81688:	183ff91e 	bne	r3,zero,81670 <memchr+0x24>
   8168c:	020000c4 	movi	r8,3
   81690:	40801136 	bltu	r8,r2,816d8 <memchr+0x8c>
   81694:	10000c26 	beq	r2,zero,816c8 <memchr+0x7c>
   81698:	20c00003 	ldbu	r3,0(r4)
   8169c:	29403fcc 	andi	r5,r5,255
   816a0:	28c00b26 	beq	r5,r3,816d0 <memchr+0x84>
   816a4:	20c00044 	addi	r3,r4,1
   816a8:	39803fcc 	andi	r6,r7,255
   816ac:	2089883a 	add	r4,r4,r2
   816b0:	00000306 	br	816c0 <memchr+0x74>
   816b4:	18c00044 	addi	r3,r3,1
   816b8:	197fffc3 	ldbu	r5,-1(r3)
   816bc:	31400526 	beq	r6,r5,816d4 <memchr+0x88>
   816c0:	1805883a 	mov	r2,r3
   816c4:	20fffb1e 	bne	r4,r3,816b4 <memchr+0x68>
   816c8:	0005883a 	mov	r2,zero
   816cc:	f800283a 	ret
   816d0:	2005883a 	mov	r2,r4
   816d4:	f800283a 	ret
   816d8:	28c03fcc 	andi	r3,r5,255
   816dc:	1812923a 	slli	r9,r3,8
   816e0:	02ffbff4 	movhi	r11,65279
   816e4:	02a02074 	movhi	r10,32897
   816e8:	48d2b03a 	or	r9,r9,r3
   816ec:	4806943a 	slli	r3,r9,16
   816f0:	5affbfc4 	addi	r11,r11,-257
   816f4:	52a02004 	addi	r10,r10,-32640
   816f8:	48d2b03a 	or	r9,r9,r3
   816fc:	20c00017 	ldw	r3,0(r4)
   81700:	48c6f03a 	xor	r3,r9,r3
   81704:	1acd883a 	add	r6,r3,r11
   81708:	00c6303a 	nor	r3,zero,r3
   8170c:	30c6703a 	and	r3,r6,r3
   81710:	1a86703a 	and	r3,r3,r10
   81714:	183fe01e 	bne	r3,zero,81698 <memchr+0x4c>
   81718:	10bfff04 	addi	r2,r2,-4
   8171c:	21000104 	addi	r4,r4,4
   81720:	40bff636 	bltu	r8,r2,816fc <memchr+0xb0>
   81724:	003fdb06 	br	81694 <memchr+0x48>
   81728:	3005883a 	mov	r2,r6
   8172c:	003fd706 	br	8168c <memchr+0x40>

00081730 <memcpy>:
   81730:	defffd04 	addi	sp,sp,-12
   81734:	dfc00215 	stw	ra,8(sp)
   81738:	dc400115 	stw	r17,4(sp)
   8173c:	dc000015 	stw	r16,0(sp)
   81740:	00c003c4 	movi	r3,15
   81744:	2005883a 	mov	r2,r4
   81748:	1980452e 	bgeu	r3,r6,81860 <memcpy+0x130>
   8174c:	2906b03a 	or	r3,r5,r4
   81750:	18c000cc 	andi	r3,r3,3
   81754:	1800441e 	bne	r3,zero,81868 <memcpy+0x138>
   81758:	347ffc04 	addi	r17,r6,-16
   8175c:	8822d13a 	srli	r17,r17,4
   81760:	28c00104 	addi	r3,r5,4
   81764:	23400104 	addi	r13,r4,4
   81768:	8820913a 	slli	r16,r17,4
   8176c:	2b000204 	addi	r12,r5,8
   81770:	22c00204 	addi	r11,r4,8
   81774:	84000504 	addi	r16,r16,20
   81778:	2a800304 	addi	r10,r5,12
   8177c:	22400304 	addi	r9,r4,12
   81780:	2c21883a 	add	r16,r5,r16
   81784:	2811883a 	mov	r8,r5
   81788:	200f883a 	mov	r7,r4
   8178c:	41000017 	ldw	r4,0(r8)
   81790:	1fc00017 	ldw	ra,0(r3)
   81794:	63c00017 	ldw	r15,0(r12)
   81798:	39000015 	stw	r4,0(r7)
   8179c:	53800017 	ldw	r14,0(r10)
   817a0:	6fc00015 	stw	ra,0(r13)
   817a4:	5bc00015 	stw	r15,0(r11)
   817a8:	4b800015 	stw	r14,0(r9)
   817ac:	18c00404 	addi	r3,r3,16
   817b0:	39c00404 	addi	r7,r7,16
   817b4:	42000404 	addi	r8,r8,16
   817b8:	6b400404 	addi	r13,r13,16
   817bc:	63000404 	addi	r12,r12,16
   817c0:	5ac00404 	addi	r11,r11,16
   817c4:	52800404 	addi	r10,r10,16
   817c8:	4a400404 	addi	r9,r9,16
   817cc:	1c3fef1e 	bne	r3,r16,8178c <memcpy+0x5c>
   817d0:	89c00044 	addi	r7,r17,1
   817d4:	380e913a 	slli	r7,r7,4
   817d8:	310003cc 	andi	r4,r6,15
   817dc:	02c000c4 	movi	r11,3
   817e0:	11c7883a 	add	r3,r2,r7
   817e4:	29cb883a 	add	r5,r5,r7
   817e8:	5900212e 	bgeu	r11,r4,81870 <memcpy+0x140>
   817ec:	1813883a 	mov	r9,r3
   817f0:	2811883a 	mov	r8,r5
   817f4:	200f883a 	mov	r7,r4
   817f8:	42800017 	ldw	r10,0(r8)
   817fc:	4a400104 	addi	r9,r9,4
   81800:	39ffff04 	addi	r7,r7,-4
   81804:	4abfff15 	stw	r10,-4(r9)
   81808:	42000104 	addi	r8,r8,4
   8180c:	59fffa36 	bltu	r11,r7,817f8 <memcpy+0xc8>
   81810:	213fff04 	addi	r4,r4,-4
   81814:	2008d0ba 	srli	r4,r4,2
   81818:	318000cc 	andi	r6,r6,3
   8181c:	21000044 	addi	r4,r4,1
   81820:	2109883a 	add	r4,r4,r4
   81824:	2109883a 	add	r4,r4,r4
   81828:	1907883a 	add	r3,r3,r4
   8182c:	290b883a 	add	r5,r5,r4
   81830:	30000626 	beq	r6,zero,8184c <memcpy+0x11c>
   81834:	198d883a 	add	r6,r3,r6
   81838:	29c00003 	ldbu	r7,0(r5)
   8183c:	18c00044 	addi	r3,r3,1
   81840:	29400044 	addi	r5,r5,1
   81844:	19ffffc5 	stb	r7,-1(r3)
   81848:	19bffb1e 	bne	r3,r6,81838 <memcpy+0x108>
   8184c:	dfc00217 	ldw	ra,8(sp)
   81850:	dc400117 	ldw	r17,4(sp)
   81854:	dc000017 	ldw	r16,0(sp)
   81858:	dec00304 	addi	sp,sp,12
   8185c:	f800283a 	ret
   81860:	2007883a 	mov	r3,r4
   81864:	003ff206 	br	81830 <memcpy+0x100>
   81868:	2007883a 	mov	r3,r4
   8186c:	003ff106 	br	81834 <memcpy+0x104>
   81870:	200d883a 	mov	r6,r4
   81874:	003fee06 	br	81830 <memcpy+0x100>

00081878 <memmove>:
   81878:	2005883a 	mov	r2,r4
   8187c:	29000b2e 	bgeu	r5,r4,818ac <memmove+0x34>
   81880:	298f883a 	add	r7,r5,r6
   81884:	21c0092e 	bgeu	r4,r7,818ac <memmove+0x34>
   81888:	2187883a 	add	r3,r4,r6
   8188c:	198bc83a 	sub	r5,r3,r6
   81890:	30004826 	beq	r6,zero,819b4 <memmove+0x13c>
   81894:	39ffffc4 	addi	r7,r7,-1
   81898:	39000003 	ldbu	r4,0(r7)
   8189c:	18ffffc4 	addi	r3,r3,-1
   818a0:	19000005 	stb	r4,0(r3)
   818a4:	28fffb1e 	bne	r5,r3,81894 <memmove+0x1c>
   818a8:	f800283a 	ret
   818ac:	00c003c4 	movi	r3,15
   818b0:	1980412e 	bgeu	r3,r6,819b8 <memmove+0x140>
   818b4:	2886b03a 	or	r3,r5,r2
   818b8:	18c000cc 	andi	r3,r3,3
   818bc:	1800401e 	bne	r3,zero,819c0 <memmove+0x148>
   818c0:	33fffc04 	addi	r15,r6,-16
   818c4:	781ed13a 	srli	r15,r15,4
   818c8:	28c00104 	addi	r3,r5,4
   818cc:	13400104 	addi	r13,r2,4
   818d0:	781c913a 	slli	r14,r15,4
   818d4:	2b000204 	addi	r12,r5,8
   818d8:	12c00204 	addi	r11,r2,8
   818dc:	73800504 	addi	r14,r14,20
   818e0:	2a800304 	addi	r10,r5,12
   818e4:	12400304 	addi	r9,r2,12
   818e8:	2b9d883a 	add	r14,r5,r14
   818ec:	2811883a 	mov	r8,r5
   818f0:	100f883a 	mov	r7,r2
   818f4:	41000017 	ldw	r4,0(r8)
   818f8:	39c00404 	addi	r7,r7,16
   818fc:	18c00404 	addi	r3,r3,16
   81900:	393ffc15 	stw	r4,-16(r7)
   81904:	193ffc17 	ldw	r4,-16(r3)
   81908:	6b400404 	addi	r13,r13,16
   8190c:	5ac00404 	addi	r11,r11,16
   81910:	693ffc15 	stw	r4,-16(r13)
   81914:	61000017 	ldw	r4,0(r12)
   81918:	4a400404 	addi	r9,r9,16
   8191c:	42000404 	addi	r8,r8,16
   81920:	593ffc15 	stw	r4,-16(r11)
   81924:	51000017 	ldw	r4,0(r10)
   81928:	63000404 	addi	r12,r12,16
   8192c:	52800404 	addi	r10,r10,16
   81930:	493ffc15 	stw	r4,-16(r9)
   81934:	1bbfef1e 	bne	r3,r14,818f4 <memmove+0x7c>
   81938:	79000044 	addi	r4,r15,1
   8193c:	2008913a 	slli	r4,r4,4
   81940:	328003cc 	andi	r10,r6,15
   81944:	02c000c4 	movi	r11,3
   81948:	1107883a 	add	r3,r2,r4
   8194c:	290b883a 	add	r5,r5,r4
   81950:	5a801e2e 	bgeu	r11,r10,819cc <memmove+0x154>
   81954:	1813883a 	mov	r9,r3
   81958:	2811883a 	mov	r8,r5
   8195c:	500f883a 	mov	r7,r10
   81960:	41000017 	ldw	r4,0(r8)
   81964:	4a400104 	addi	r9,r9,4
   81968:	39ffff04 	addi	r7,r7,-4
   8196c:	493fff15 	stw	r4,-4(r9)
   81970:	42000104 	addi	r8,r8,4
   81974:	59fffa36 	bltu	r11,r7,81960 <memmove+0xe8>
   81978:	513fff04 	addi	r4,r10,-4
   8197c:	2008d0ba 	srli	r4,r4,2
   81980:	318000cc 	andi	r6,r6,3
   81984:	21000044 	addi	r4,r4,1
   81988:	2109883a 	add	r4,r4,r4
   8198c:	2109883a 	add	r4,r4,r4
   81990:	1907883a 	add	r3,r3,r4
   81994:	290b883a 	add	r5,r5,r4
   81998:	30000b26 	beq	r6,zero,819c8 <memmove+0x150>
   8199c:	198d883a 	add	r6,r3,r6
   819a0:	29c00003 	ldbu	r7,0(r5)
   819a4:	18c00044 	addi	r3,r3,1
   819a8:	29400044 	addi	r5,r5,1
   819ac:	19ffffc5 	stb	r7,-1(r3)
   819b0:	19bffb1e 	bne	r3,r6,819a0 <memmove+0x128>
   819b4:	f800283a 	ret
   819b8:	1007883a 	mov	r3,r2
   819bc:	003ff606 	br	81998 <memmove+0x120>
   819c0:	1007883a 	mov	r3,r2
   819c4:	003ff506 	br	8199c <memmove+0x124>
   819c8:	f800283a 	ret
   819cc:	500d883a 	mov	r6,r10
   819d0:	003ff106 	br	81998 <memmove+0x120>

000819d4 <memset>:
   819d4:	20c000cc 	andi	r3,r4,3
   819d8:	2005883a 	mov	r2,r4
   819dc:	18004426 	beq	r3,zero,81af0 <memset+0x11c>
   819e0:	31ffffc4 	addi	r7,r6,-1
   819e4:	30004026 	beq	r6,zero,81ae8 <memset+0x114>
   819e8:	2813883a 	mov	r9,r5
   819ec:	200d883a 	mov	r6,r4
   819f0:	2007883a 	mov	r3,r4
   819f4:	00000406 	br	81a08 <memset+0x34>
   819f8:	3a3fffc4 	addi	r8,r7,-1
   819fc:	31800044 	addi	r6,r6,1
   81a00:	38003926 	beq	r7,zero,81ae8 <memset+0x114>
   81a04:	400f883a 	mov	r7,r8
   81a08:	18c00044 	addi	r3,r3,1
   81a0c:	32400005 	stb	r9,0(r6)
   81a10:	1a0000cc 	andi	r8,r3,3
   81a14:	403ff81e 	bne	r8,zero,819f8 <memset+0x24>
   81a18:	010000c4 	movi	r4,3
   81a1c:	21c02d2e 	bgeu	r4,r7,81ad4 <memset+0x100>
   81a20:	29003fcc 	andi	r4,r5,255
   81a24:	200c923a 	slli	r6,r4,8
   81a28:	3108b03a 	or	r4,r6,r4
   81a2c:	200c943a 	slli	r6,r4,16
   81a30:	218cb03a 	or	r6,r4,r6
   81a34:	010003c4 	movi	r4,15
   81a38:	21c0182e 	bgeu	r4,r7,81a9c <memset+0xc8>
   81a3c:	3b3ffc04 	addi	r12,r7,-16
   81a40:	6018d13a 	srli	r12,r12,4
   81a44:	1a000104 	addi	r8,r3,4
   81a48:	1ac00204 	addi	r11,r3,8
   81a4c:	6008913a 	slli	r4,r12,4
   81a50:	1a800304 	addi	r10,r3,12
   81a54:	1813883a 	mov	r9,r3
   81a58:	21000504 	addi	r4,r4,20
   81a5c:	1909883a 	add	r4,r3,r4
   81a60:	49800015 	stw	r6,0(r9)
   81a64:	41800015 	stw	r6,0(r8)
   81a68:	59800015 	stw	r6,0(r11)
   81a6c:	51800015 	stw	r6,0(r10)
   81a70:	42000404 	addi	r8,r8,16
   81a74:	4a400404 	addi	r9,r9,16
   81a78:	5ac00404 	addi	r11,r11,16
   81a7c:	52800404 	addi	r10,r10,16
   81a80:	413ff71e 	bne	r8,r4,81a60 <memset+0x8c>
   81a84:	63000044 	addi	r12,r12,1
   81a88:	6018913a 	slli	r12,r12,4
   81a8c:	39c003cc 	andi	r7,r7,15
   81a90:	010000c4 	movi	r4,3
   81a94:	1b07883a 	add	r3,r3,r12
   81a98:	21c00e2e 	bgeu	r4,r7,81ad4 <memset+0x100>
   81a9c:	1813883a 	mov	r9,r3
   81aa0:	3811883a 	mov	r8,r7
   81aa4:	010000c4 	movi	r4,3
   81aa8:	49800015 	stw	r6,0(r9)
   81aac:	423fff04 	addi	r8,r8,-4
   81ab0:	4a400104 	addi	r9,r9,4
   81ab4:	223ffc36 	bltu	r4,r8,81aa8 <memset+0xd4>
   81ab8:	393fff04 	addi	r4,r7,-4
   81abc:	2008d0ba 	srli	r4,r4,2
   81ac0:	39c000cc 	andi	r7,r7,3
   81ac4:	21000044 	addi	r4,r4,1
   81ac8:	2109883a 	add	r4,r4,r4
   81acc:	2109883a 	add	r4,r4,r4
   81ad0:	1907883a 	add	r3,r3,r4
   81ad4:	38000526 	beq	r7,zero,81aec <memset+0x118>
   81ad8:	19cf883a 	add	r7,r3,r7
   81adc:	19400005 	stb	r5,0(r3)
   81ae0:	18c00044 	addi	r3,r3,1
   81ae4:	38fffd1e 	bne	r7,r3,81adc <memset+0x108>
   81ae8:	f800283a 	ret
   81aec:	f800283a 	ret
   81af0:	2007883a 	mov	r3,r4
   81af4:	300f883a 	mov	r7,r6
   81af8:	003fc706 	br	81a18 <memset+0x44>

00081afc <_realloc_r>:
   81afc:	defff604 	addi	sp,sp,-40
   81b00:	dc800215 	stw	r18,8(sp)
   81b04:	dfc00915 	stw	ra,36(sp)
   81b08:	df000815 	stw	fp,32(sp)
   81b0c:	ddc00715 	stw	r23,28(sp)
   81b10:	dd800615 	stw	r22,24(sp)
   81b14:	dd400515 	stw	r21,20(sp)
   81b18:	dd000415 	stw	r20,16(sp)
   81b1c:	dcc00315 	stw	r19,12(sp)
   81b20:	dc400115 	stw	r17,4(sp)
   81b24:	dc000015 	stw	r16,0(sp)
   81b28:	3025883a 	mov	r18,r6
   81b2c:	2800b726 	beq	r5,zero,81e0c <_realloc_r+0x310>
   81b30:	282b883a 	mov	r21,r5
   81b34:	2029883a 	mov	r20,r4
   81b38:	008367c0 	call	8367c <__malloc_lock>
   81b3c:	a8bfff17 	ldw	r2,-4(r21)
   81b40:	043fff04 	movi	r16,-4
   81b44:	90c002c4 	addi	r3,r18,11
   81b48:	01000584 	movi	r4,22
   81b4c:	acfffe04 	addi	r19,r21,-8
   81b50:	1420703a 	and	r16,r2,r16
   81b54:	20c0332e 	bgeu	r4,r3,81c24 <_realloc_r+0x128>
   81b58:	047ffe04 	movi	r17,-8
   81b5c:	1c62703a 	and	r17,r3,r17
   81b60:	8807883a 	mov	r3,r17
   81b64:	88005816 	blt	r17,zero,81cc8 <_realloc_r+0x1cc>
   81b68:	8c805736 	bltu	r17,r18,81cc8 <_realloc_r+0x1cc>
   81b6c:	80c0300e 	bge	r16,r3,81c30 <_realloc_r+0x134>
   81b70:	07000434 	movhi	fp,16
   81b74:	e7011c04 	addi	fp,fp,1136
   81b78:	e1c00217 	ldw	r7,8(fp)
   81b7c:	9c09883a 	add	r4,r19,r16
   81b80:	22000117 	ldw	r8,4(r4)
   81b84:	21c06326 	beq	r4,r7,81d14 <_realloc_r+0x218>
   81b88:	017fff84 	movi	r5,-2
   81b8c:	414a703a 	and	r5,r8,r5
   81b90:	214b883a 	add	r5,r4,r5
   81b94:	29800117 	ldw	r6,4(r5)
   81b98:	3180004c 	andi	r6,r6,1
   81b9c:	30003f26 	beq	r6,zero,81c9c <_realloc_r+0x1a0>
   81ba0:	1080004c 	andi	r2,r2,1
   81ba4:	10008326 	beq	r2,zero,81db4 <_realloc_r+0x2b8>
   81ba8:	900b883a 	mov	r5,r18
   81bac:	a009883a 	mov	r4,r20
   81bb0:	0080e400 	call	80e40 <_malloc_r>
   81bb4:	1025883a 	mov	r18,r2
   81bb8:	10011e26 	beq	r2,zero,82034 <_realloc_r+0x538>
   81bbc:	a93fff17 	ldw	r4,-4(r21)
   81bc0:	10fffe04 	addi	r3,r2,-8
   81bc4:	00bfff84 	movi	r2,-2
   81bc8:	2084703a 	and	r2,r4,r2
   81bcc:	9885883a 	add	r2,r19,r2
   81bd0:	1880ee26 	beq	r3,r2,81f8c <_realloc_r+0x490>
   81bd4:	81bfff04 	addi	r6,r16,-4
   81bd8:	00800904 	movi	r2,36
   81bdc:	1180b836 	bltu	r2,r6,81ec0 <_realloc_r+0x3c4>
   81be0:	00c004c4 	movi	r3,19
   81be4:	19809636 	bltu	r3,r6,81e40 <_realloc_r+0x344>
   81be8:	9005883a 	mov	r2,r18
   81bec:	a807883a 	mov	r3,r21
   81bf0:	19000017 	ldw	r4,0(r3)
   81bf4:	11000015 	stw	r4,0(r2)
   81bf8:	19000117 	ldw	r4,4(r3)
   81bfc:	11000115 	stw	r4,4(r2)
   81c00:	18c00217 	ldw	r3,8(r3)
   81c04:	10c00215 	stw	r3,8(r2)
   81c08:	a80b883a 	mov	r5,r21
   81c0c:	a009883a 	mov	r4,r20
   81c10:	00828c80 	call	828c8 <_free_r>
   81c14:	a009883a 	mov	r4,r20
   81c18:	00836a00 	call	836a0 <__malloc_unlock>
   81c1c:	9005883a 	mov	r2,r18
   81c20:	00001206 	br	81c6c <_realloc_r+0x170>
   81c24:	00c00404 	movi	r3,16
   81c28:	1823883a 	mov	r17,r3
   81c2c:	003fce06 	br	81b68 <_realloc_r+0x6c>
   81c30:	a825883a 	mov	r18,r21
   81c34:	8445c83a 	sub	r2,r16,r17
   81c38:	00c003c4 	movi	r3,15
   81c3c:	18802636 	bltu	r3,r2,81cd8 <_realloc_r+0x1dc>
   81c40:	99800117 	ldw	r6,4(r19)
   81c44:	9c07883a 	add	r3,r19,r16
   81c48:	3180004c 	andi	r6,r6,1
   81c4c:	3420b03a 	or	r16,r6,r16
   81c50:	9c000115 	stw	r16,4(r19)
   81c54:	18800117 	ldw	r2,4(r3)
   81c58:	10800054 	ori	r2,r2,1
   81c5c:	18800115 	stw	r2,4(r3)
   81c60:	a009883a 	mov	r4,r20
   81c64:	00836a00 	call	836a0 <__malloc_unlock>
   81c68:	9005883a 	mov	r2,r18
   81c6c:	dfc00917 	ldw	ra,36(sp)
   81c70:	df000817 	ldw	fp,32(sp)
   81c74:	ddc00717 	ldw	r23,28(sp)
   81c78:	dd800617 	ldw	r22,24(sp)
   81c7c:	dd400517 	ldw	r21,20(sp)
   81c80:	dd000417 	ldw	r20,16(sp)
   81c84:	dcc00317 	ldw	r19,12(sp)
   81c88:	dc800217 	ldw	r18,8(sp)
   81c8c:	dc400117 	ldw	r17,4(sp)
   81c90:	dc000017 	ldw	r16,0(sp)
   81c94:	dec00a04 	addi	sp,sp,40
   81c98:	f800283a 	ret
   81c9c:	017fff04 	movi	r5,-4
   81ca0:	414a703a 	and	r5,r8,r5
   81ca4:	814d883a 	add	r6,r16,r5
   81ca8:	30c01f16 	blt	r6,r3,81d28 <_realloc_r+0x22c>
   81cac:	20800317 	ldw	r2,12(r4)
   81cb0:	20c00217 	ldw	r3,8(r4)
   81cb4:	a825883a 	mov	r18,r21
   81cb8:	3021883a 	mov	r16,r6
   81cbc:	18800315 	stw	r2,12(r3)
   81cc0:	10c00215 	stw	r3,8(r2)
   81cc4:	003fdb06 	br	81c34 <_realloc_r+0x138>
   81cc8:	00800304 	movi	r2,12
   81ccc:	a0800015 	stw	r2,0(r20)
   81cd0:	0005883a 	mov	r2,zero
   81cd4:	003fe506 	br	81c6c <_realloc_r+0x170>
   81cd8:	98c00117 	ldw	r3,4(r19)
   81cdc:	9c4b883a 	add	r5,r19,r17
   81ce0:	11000054 	ori	r4,r2,1
   81ce4:	18c0004c 	andi	r3,r3,1
   81ce8:	1c62b03a 	or	r17,r3,r17
   81cec:	9c400115 	stw	r17,4(r19)
   81cf0:	29000115 	stw	r4,4(r5)
   81cf4:	2885883a 	add	r2,r5,r2
   81cf8:	10c00117 	ldw	r3,4(r2)
   81cfc:	29400204 	addi	r5,r5,8
   81d00:	a009883a 	mov	r4,r20
   81d04:	18c00054 	ori	r3,r3,1
   81d08:	10c00115 	stw	r3,4(r2)
   81d0c:	00828c80 	call	828c8 <_free_r>
   81d10:	003fd306 	br	81c60 <_realloc_r+0x164>
   81d14:	017fff04 	movi	r5,-4
   81d18:	414a703a 	and	r5,r8,r5
   81d1c:	89800404 	addi	r6,r17,16
   81d20:	8151883a 	add	r8,r16,r5
   81d24:	4180590e 	bge	r8,r6,81e8c <_realloc_r+0x390>
   81d28:	1080004c 	andi	r2,r2,1
   81d2c:	103f9e1e 	bne	r2,zero,81ba8 <_realloc_r+0xac>
   81d30:	adbffe17 	ldw	r22,-8(r21)
   81d34:	00bfff04 	movi	r2,-4
   81d38:	9dadc83a 	sub	r22,r19,r22
   81d3c:	b1800117 	ldw	r6,4(r22)
   81d40:	3084703a 	and	r2,r6,r2
   81d44:	20002026 	beq	r4,zero,81dc8 <_realloc_r+0x2cc>
   81d48:	80af883a 	add	r23,r16,r2
   81d4c:	b96f883a 	add	r23,r23,r5
   81d50:	21c05f26 	beq	r4,r7,81ed0 <_realloc_r+0x3d4>
   81d54:	b8c01c16 	blt	r23,r3,81dc8 <_realloc_r+0x2cc>
   81d58:	20800317 	ldw	r2,12(r4)
   81d5c:	20c00217 	ldw	r3,8(r4)
   81d60:	81bfff04 	addi	r6,r16,-4
   81d64:	01000904 	movi	r4,36
   81d68:	18800315 	stw	r2,12(r3)
   81d6c:	10c00215 	stw	r3,8(r2)
   81d70:	b0c00217 	ldw	r3,8(r22)
   81d74:	b0800317 	ldw	r2,12(r22)
   81d78:	b4800204 	addi	r18,r22,8
   81d7c:	18800315 	stw	r2,12(r3)
   81d80:	10c00215 	stw	r3,8(r2)
   81d84:	21801b36 	bltu	r4,r6,81df4 <_realloc_r+0x2f8>
   81d88:	008004c4 	movi	r2,19
   81d8c:	1180352e 	bgeu	r2,r6,81e64 <_realloc_r+0x368>
   81d90:	a8800017 	ldw	r2,0(r21)
   81d94:	b0800215 	stw	r2,8(r22)
   81d98:	a8800117 	ldw	r2,4(r21)
   81d9c:	b0800315 	stw	r2,12(r22)
   81da0:	008006c4 	movi	r2,27
   81da4:	11807f36 	bltu	r2,r6,81fa4 <_realloc_r+0x4a8>
   81da8:	b0800404 	addi	r2,r22,16
   81dac:	ad400204 	addi	r21,r21,8
   81db0:	00002d06 	br	81e68 <_realloc_r+0x36c>
   81db4:	adbffe17 	ldw	r22,-8(r21)
   81db8:	00bfff04 	movi	r2,-4
   81dbc:	9dadc83a 	sub	r22,r19,r22
   81dc0:	b1000117 	ldw	r4,4(r22)
   81dc4:	2084703a 	and	r2,r4,r2
   81dc8:	b03f7726 	beq	r22,zero,81ba8 <_realloc_r+0xac>
   81dcc:	80af883a 	add	r23,r16,r2
   81dd0:	b8ff7516 	blt	r23,r3,81ba8 <_realloc_r+0xac>
   81dd4:	b0800317 	ldw	r2,12(r22)
   81dd8:	b0c00217 	ldw	r3,8(r22)
   81ddc:	81bfff04 	addi	r6,r16,-4
   81de0:	01000904 	movi	r4,36
   81de4:	18800315 	stw	r2,12(r3)
   81de8:	10c00215 	stw	r3,8(r2)
   81dec:	b4800204 	addi	r18,r22,8
   81df0:	21bfe52e 	bgeu	r4,r6,81d88 <_realloc_r+0x28c>
   81df4:	a80b883a 	mov	r5,r21
   81df8:	9009883a 	mov	r4,r18
   81dfc:	00818780 	call	81878 <memmove>
   81e00:	b821883a 	mov	r16,r23
   81e04:	b027883a 	mov	r19,r22
   81e08:	003f8a06 	br	81c34 <_realloc_r+0x138>
   81e0c:	300b883a 	mov	r5,r6
   81e10:	dfc00917 	ldw	ra,36(sp)
   81e14:	df000817 	ldw	fp,32(sp)
   81e18:	ddc00717 	ldw	r23,28(sp)
   81e1c:	dd800617 	ldw	r22,24(sp)
   81e20:	dd400517 	ldw	r21,20(sp)
   81e24:	dd000417 	ldw	r20,16(sp)
   81e28:	dcc00317 	ldw	r19,12(sp)
   81e2c:	dc800217 	ldw	r18,8(sp)
   81e30:	dc400117 	ldw	r17,4(sp)
   81e34:	dc000017 	ldw	r16,0(sp)
   81e38:	dec00a04 	addi	sp,sp,40
   81e3c:	0080e401 	jmpi	80e40 <_malloc_r>
   81e40:	a8c00017 	ldw	r3,0(r21)
   81e44:	90c00015 	stw	r3,0(r18)
   81e48:	a8c00117 	ldw	r3,4(r21)
   81e4c:	90c00115 	stw	r3,4(r18)
   81e50:	00c006c4 	movi	r3,27
   81e54:	19804536 	bltu	r3,r6,81f6c <_realloc_r+0x470>
   81e58:	90800204 	addi	r2,r18,8
   81e5c:	a8c00204 	addi	r3,r21,8
   81e60:	003f6306 	br	81bf0 <_realloc_r+0xf4>
   81e64:	9005883a 	mov	r2,r18
   81e68:	a8c00017 	ldw	r3,0(r21)
   81e6c:	b821883a 	mov	r16,r23
   81e70:	b027883a 	mov	r19,r22
   81e74:	10c00015 	stw	r3,0(r2)
   81e78:	a8c00117 	ldw	r3,4(r21)
   81e7c:	10c00115 	stw	r3,4(r2)
   81e80:	a8c00217 	ldw	r3,8(r21)
   81e84:	10c00215 	stw	r3,8(r2)
   81e88:	003f6a06 	br	81c34 <_realloc_r+0x138>
   81e8c:	9c67883a 	add	r19,r19,r17
   81e90:	4445c83a 	sub	r2,r8,r17
   81e94:	e4c00215 	stw	r19,8(fp)
   81e98:	10800054 	ori	r2,r2,1
   81e9c:	98800115 	stw	r2,4(r19)
   81ea0:	a8bfff17 	ldw	r2,-4(r21)
   81ea4:	a009883a 	mov	r4,r20
   81ea8:	1080004c 	andi	r2,r2,1
   81eac:	1462b03a 	or	r17,r2,r17
   81eb0:	ac7fff15 	stw	r17,-4(r21)
   81eb4:	00836a00 	call	836a0 <__malloc_unlock>
   81eb8:	a805883a 	mov	r2,r21
   81ebc:	003f6b06 	br	81c6c <_realloc_r+0x170>
   81ec0:	a80b883a 	mov	r5,r21
   81ec4:	9009883a 	mov	r4,r18
   81ec8:	00818780 	call	81878 <memmove>
   81ecc:	003f4e06 	br	81c08 <_realloc_r+0x10c>
   81ed0:	89000404 	addi	r4,r17,16
   81ed4:	b93fbc16 	blt	r23,r4,81dc8 <_realloc_r+0x2cc>
   81ed8:	b0800317 	ldw	r2,12(r22)
   81edc:	b0c00217 	ldw	r3,8(r22)
   81ee0:	81bfff04 	addi	r6,r16,-4
   81ee4:	01000904 	movi	r4,36
   81ee8:	18800315 	stw	r2,12(r3)
   81eec:	10c00215 	stw	r3,8(r2)
   81ef0:	b4800204 	addi	r18,r22,8
   81ef4:	21804336 	bltu	r4,r6,82004 <_realloc_r+0x508>
   81ef8:	008004c4 	movi	r2,19
   81efc:	11803f2e 	bgeu	r2,r6,81ffc <_realloc_r+0x500>
   81f00:	a8800017 	ldw	r2,0(r21)
   81f04:	b0800215 	stw	r2,8(r22)
   81f08:	a8800117 	ldw	r2,4(r21)
   81f0c:	b0800315 	stw	r2,12(r22)
   81f10:	008006c4 	movi	r2,27
   81f14:	11803f36 	bltu	r2,r6,82014 <_realloc_r+0x518>
   81f18:	b0800404 	addi	r2,r22,16
   81f1c:	ad400204 	addi	r21,r21,8
   81f20:	a8c00017 	ldw	r3,0(r21)
   81f24:	10c00015 	stw	r3,0(r2)
   81f28:	a8c00117 	ldw	r3,4(r21)
   81f2c:	10c00115 	stw	r3,4(r2)
   81f30:	a8c00217 	ldw	r3,8(r21)
   81f34:	10c00215 	stw	r3,8(r2)
   81f38:	b447883a 	add	r3,r22,r17
   81f3c:	bc45c83a 	sub	r2,r23,r17
   81f40:	e0c00215 	stw	r3,8(fp)
   81f44:	10800054 	ori	r2,r2,1
   81f48:	18800115 	stw	r2,4(r3)
   81f4c:	b0800117 	ldw	r2,4(r22)
   81f50:	a009883a 	mov	r4,r20
   81f54:	1080004c 	andi	r2,r2,1
   81f58:	1462b03a 	or	r17,r2,r17
   81f5c:	b4400115 	stw	r17,4(r22)
   81f60:	00836a00 	call	836a0 <__malloc_unlock>
   81f64:	9005883a 	mov	r2,r18
   81f68:	003f4006 	br	81c6c <_realloc_r+0x170>
   81f6c:	a8c00217 	ldw	r3,8(r21)
   81f70:	90c00215 	stw	r3,8(r18)
   81f74:	a8c00317 	ldw	r3,12(r21)
   81f78:	90c00315 	stw	r3,12(r18)
   81f7c:	30801126 	beq	r6,r2,81fc4 <_realloc_r+0x4c8>
   81f80:	90800404 	addi	r2,r18,16
   81f84:	a8c00404 	addi	r3,r21,16
   81f88:	003f1906 	br	81bf0 <_realloc_r+0xf4>
   81f8c:	90ffff17 	ldw	r3,-4(r18)
   81f90:	00bfff04 	movi	r2,-4
   81f94:	a825883a 	mov	r18,r21
   81f98:	1884703a 	and	r2,r3,r2
   81f9c:	80a1883a 	add	r16,r16,r2
   81fa0:	003f2406 	br	81c34 <_realloc_r+0x138>
   81fa4:	a8800217 	ldw	r2,8(r21)
   81fa8:	b0800415 	stw	r2,16(r22)
   81fac:	a8800317 	ldw	r2,12(r21)
   81fb0:	b0800515 	stw	r2,20(r22)
   81fb4:	31000a26 	beq	r6,r4,81fe0 <_realloc_r+0x4e4>
   81fb8:	b0800604 	addi	r2,r22,24
   81fbc:	ad400404 	addi	r21,r21,16
   81fc0:	003fa906 	br	81e68 <_realloc_r+0x36c>
   81fc4:	a9000417 	ldw	r4,16(r21)
   81fc8:	90800604 	addi	r2,r18,24
   81fcc:	a8c00604 	addi	r3,r21,24
   81fd0:	91000415 	stw	r4,16(r18)
   81fd4:	a9000517 	ldw	r4,20(r21)
   81fd8:	91000515 	stw	r4,20(r18)
   81fdc:	003f0406 	br	81bf0 <_realloc_r+0xf4>
   81fe0:	a8c00417 	ldw	r3,16(r21)
   81fe4:	ad400604 	addi	r21,r21,24
   81fe8:	b0800804 	addi	r2,r22,32
   81fec:	b0c00615 	stw	r3,24(r22)
   81ff0:	a8ffff17 	ldw	r3,-4(r21)
   81ff4:	b0c00715 	stw	r3,28(r22)
   81ff8:	003f9b06 	br	81e68 <_realloc_r+0x36c>
   81ffc:	9005883a 	mov	r2,r18
   82000:	003fc706 	br	81f20 <_realloc_r+0x424>
   82004:	a80b883a 	mov	r5,r21
   82008:	9009883a 	mov	r4,r18
   8200c:	00818780 	call	81878 <memmove>
   82010:	003fc906 	br	81f38 <_realloc_r+0x43c>
   82014:	a8800217 	ldw	r2,8(r21)
   82018:	b0800415 	stw	r2,16(r22)
   8201c:	a8800317 	ldw	r2,12(r21)
   82020:	b0800515 	stw	r2,20(r22)
   82024:	31000726 	beq	r6,r4,82044 <_realloc_r+0x548>
   82028:	b0800604 	addi	r2,r22,24
   8202c:	ad400404 	addi	r21,r21,16
   82030:	003fbb06 	br	81f20 <_realloc_r+0x424>
   82034:	a009883a 	mov	r4,r20
   82038:	00836a00 	call	836a0 <__malloc_unlock>
   8203c:	0005883a 	mov	r2,zero
   82040:	003f0a06 	br	81c6c <_realloc_r+0x170>
   82044:	a8c00417 	ldw	r3,16(r21)
   82048:	ad400604 	addi	r21,r21,24
   8204c:	b0800804 	addi	r2,r22,32
   82050:	b0c00615 	stw	r3,24(r22)
   82054:	a8ffff17 	ldw	r3,-4(r21)
   82058:	b0c00715 	stw	r3,28(r22)
   8205c:	003fb006 	br	81f20 <_realloc_r+0x424>

00082060 <_sbrk_r>:
   82060:	defffd04 	addi	sp,sp,-12
   82064:	dc000015 	stw	r16,0(sp)
   82068:	04000434 	movhi	r16,16
   8206c:	dc400115 	stw	r17,4(sp)
   82070:	8406b104 	addi	r16,r16,6852
   82074:	2023883a 	mov	r17,r4
   82078:	2809883a 	mov	r4,r5
   8207c:	dfc00215 	stw	ra,8(sp)
   82080:	80000015 	stw	zero,0(r16)
   82084:	00838880 	call	83888 <sbrk>
   82088:	00ffffc4 	movi	r3,-1
   8208c:	10c00526 	beq	r2,r3,820a4 <_sbrk_r+0x44>
   82090:	dfc00217 	ldw	ra,8(sp)
   82094:	dc400117 	ldw	r17,4(sp)
   82098:	dc000017 	ldw	r16,0(sp)
   8209c:	dec00304 	addi	sp,sp,12
   820a0:	f800283a 	ret
   820a4:	80c00017 	ldw	r3,0(r16)
   820a8:	183ff926 	beq	r3,zero,82090 <_sbrk_r+0x30>
   820ac:	88c00015 	stw	r3,0(r17)
   820b0:	003ff706 	br	82090 <_sbrk_r+0x30>

000820b4 <__sread>:
   820b4:	defffe04 	addi	sp,sp,-8
   820b8:	dc000015 	stw	r16,0(sp)
   820bc:	2821883a 	mov	r16,r5
   820c0:	2940038f 	ldh	r5,14(r5)
   820c4:	dfc00115 	stw	ra,4(sp)
   820c8:	0082df40 	call	82df4 <_read_r>
   820cc:	10000716 	blt	r2,zero,820ec <__sread+0x38>
   820d0:	80c01417 	ldw	r3,80(r16)
   820d4:	1887883a 	add	r3,r3,r2
   820d8:	80c01415 	stw	r3,80(r16)
   820dc:	dfc00117 	ldw	ra,4(sp)
   820e0:	dc000017 	ldw	r16,0(sp)
   820e4:	dec00204 	addi	sp,sp,8
   820e8:	f800283a 	ret
   820ec:	80c0030b 	ldhu	r3,12(r16)
   820f0:	18fbffcc 	andi	r3,r3,61439
   820f4:	80c0030d 	sth	r3,12(r16)
   820f8:	dfc00117 	ldw	ra,4(sp)
   820fc:	dc000017 	ldw	r16,0(sp)
   82100:	dec00204 	addi	sp,sp,8
   82104:	f800283a 	ret

00082108 <__seofread>:
   82108:	0005883a 	mov	r2,zero
   8210c:	f800283a 	ret

00082110 <__swrite>:
   82110:	2880030b 	ldhu	r2,12(r5)
   82114:	defffb04 	addi	sp,sp,-20
   82118:	dcc00315 	stw	r19,12(sp)
   8211c:	dc800215 	stw	r18,8(sp)
   82120:	dc400115 	stw	r17,4(sp)
   82124:	dc000015 	stw	r16,0(sp)
   82128:	dfc00415 	stw	ra,16(sp)
   8212c:	10c0400c 	andi	r3,r2,256
   82130:	2821883a 	mov	r16,r5
   82134:	2023883a 	mov	r17,r4
   82138:	3025883a 	mov	r18,r6
   8213c:	3827883a 	mov	r19,r7
   82140:	18000526 	beq	r3,zero,82158 <__swrite+0x48>
   82144:	2940038f 	ldh	r5,14(r5)
   82148:	01c00084 	movi	r7,2
   8214c:	000d883a 	mov	r6,zero
   82150:	0082bd80 	call	82bd8 <_lseek_r>
   82154:	8080030b 	ldhu	r2,12(r16)
   82158:	8140038f 	ldh	r5,14(r16)
   8215c:	10bbffcc 	andi	r2,r2,61439
   82160:	980f883a 	mov	r7,r19
   82164:	900d883a 	mov	r6,r18
   82168:	8809883a 	mov	r4,r17
   8216c:	8080030d 	sth	r2,12(r16)
   82170:	dfc00417 	ldw	ra,16(sp)
   82174:	dcc00317 	ldw	r19,12(sp)
   82178:	dc800217 	ldw	r18,8(sp)
   8217c:	dc400117 	ldw	r17,4(sp)
   82180:	dc000017 	ldw	r16,0(sp)
   82184:	dec00504 	addi	sp,sp,20
   82188:	00821f01 	jmpi	821f0 <_write_r>

0008218c <__sseek>:
   8218c:	defffe04 	addi	sp,sp,-8
   82190:	dc000015 	stw	r16,0(sp)
   82194:	2821883a 	mov	r16,r5
   82198:	2940038f 	ldh	r5,14(r5)
   8219c:	dfc00115 	stw	ra,4(sp)
   821a0:	0082bd80 	call	82bd8 <_lseek_r>
   821a4:	00ffffc4 	movi	r3,-1
   821a8:	10c00826 	beq	r2,r3,821cc <__sseek+0x40>
   821ac:	80c0030b 	ldhu	r3,12(r16)
   821b0:	80801415 	stw	r2,80(r16)
   821b4:	18c40014 	ori	r3,r3,4096
   821b8:	80c0030d 	sth	r3,12(r16)
   821bc:	dfc00117 	ldw	ra,4(sp)
   821c0:	dc000017 	ldw	r16,0(sp)
   821c4:	dec00204 	addi	sp,sp,8
   821c8:	f800283a 	ret
   821cc:	80c0030b 	ldhu	r3,12(r16)
   821d0:	18fbffcc 	andi	r3,r3,61439
   821d4:	80c0030d 	sth	r3,12(r16)
   821d8:	dfc00117 	ldw	ra,4(sp)
   821dc:	dc000017 	ldw	r16,0(sp)
   821e0:	dec00204 	addi	sp,sp,8
   821e4:	f800283a 	ret

000821e8 <__sclose>:
   821e8:	2940038f 	ldh	r5,14(r5)
   821ec:	00823a41 	jmpi	823a4 <_close_r>

000821f0 <_write_r>:
   821f0:	defffd04 	addi	sp,sp,-12
   821f4:	2805883a 	mov	r2,r5
   821f8:	dc000015 	stw	r16,0(sp)
   821fc:	04000434 	movhi	r16,16
   82200:	dc400115 	stw	r17,4(sp)
   82204:	300b883a 	mov	r5,r6
   82208:	8406b104 	addi	r16,r16,6852
   8220c:	2023883a 	mov	r17,r4
   82210:	380d883a 	mov	r6,r7
   82214:	1009883a 	mov	r4,r2
   82218:	dfc00215 	stw	ra,8(sp)
   8221c:	80000015 	stw	zero,0(r16)
   82220:	00839a40 	call	839a4 <write>
   82224:	00ffffc4 	movi	r3,-1
   82228:	10c00526 	beq	r2,r3,82240 <_write_r+0x50>
   8222c:	dfc00217 	ldw	ra,8(sp)
   82230:	dc400117 	ldw	r17,4(sp)
   82234:	dc000017 	ldw	r16,0(sp)
   82238:	dec00304 	addi	sp,sp,12
   8223c:	f800283a 	ret
   82240:	80c00017 	ldw	r3,0(r16)
   82244:	183ff926 	beq	r3,zero,8222c <_write_r+0x3c>
   82248:	88c00015 	stw	r3,0(r17)
   8224c:	003ff706 	br	8222c <_write_r+0x3c>

00082250 <__swsetup_r>:
   82250:	00800434 	movhi	r2,16
   82254:	defffd04 	addi	sp,sp,-12
   82258:	1086a104 	addi	r2,r2,6788
   8225c:	dc400115 	stw	r17,4(sp)
   82260:	2023883a 	mov	r17,r4
   82264:	11000017 	ldw	r4,0(r2)
   82268:	dc000015 	stw	r16,0(sp)
   8226c:	dfc00215 	stw	ra,8(sp)
   82270:	2821883a 	mov	r16,r5
   82274:	20000226 	beq	r4,zero,82280 <__swsetup_r+0x30>
   82278:	20800e17 	ldw	r2,56(r4)
   8227c:	10003126 	beq	r2,zero,82344 <__swsetup_r+0xf4>
   82280:	8080030b 	ldhu	r2,12(r16)
   82284:	10c0020c 	andi	r3,r2,8
   82288:	1009883a 	mov	r4,r2
   8228c:	18000f26 	beq	r3,zero,822cc <__swsetup_r+0x7c>
   82290:	80c00417 	ldw	r3,16(r16)
   82294:	18001526 	beq	r3,zero,822ec <__swsetup_r+0x9c>
   82298:	1100004c 	andi	r4,r2,1
   8229c:	20001c1e 	bne	r4,zero,82310 <__swsetup_r+0xc0>
   822a0:	1080008c 	andi	r2,r2,2
   822a4:	1000291e 	bne	r2,zero,8234c <__swsetup_r+0xfc>
   822a8:	80800517 	ldw	r2,20(r16)
   822ac:	80800215 	stw	r2,8(r16)
   822b0:	18001c26 	beq	r3,zero,82324 <__swsetup_r+0xd4>
   822b4:	0005883a 	mov	r2,zero
   822b8:	dfc00217 	ldw	ra,8(sp)
   822bc:	dc400117 	ldw	r17,4(sp)
   822c0:	dc000017 	ldw	r16,0(sp)
   822c4:	dec00304 	addi	sp,sp,12
   822c8:	f800283a 	ret
   822cc:	2080040c 	andi	r2,r4,16
   822d0:	10002e26 	beq	r2,zero,8238c <__swsetup_r+0x13c>
   822d4:	2080010c 	andi	r2,r4,4
   822d8:	10001e1e 	bne	r2,zero,82354 <__swsetup_r+0x104>
   822dc:	80c00417 	ldw	r3,16(r16)
   822e0:	20800214 	ori	r2,r4,8
   822e4:	8080030d 	sth	r2,12(r16)
   822e8:	183feb1e 	bne	r3,zero,82298 <__swsetup_r+0x48>
   822ec:	1100a00c 	andi	r4,r2,640
   822f0:	01408004 	movi	r5,512
   822f4:	217fe826 	beq	r4,r5,82298 <__swsetup_r+0x48>
   822f8:	800b883a 	mov	r5,r16
   822fc:	8809883a 	mov	r4,r17
   82300:	0082c380 	call	82c38 <__smakebuf_r>
   82304:	8080030b 	ldhu	r2,12(r16)
   82308:	80c00417 	ldw	r3,16(r16)
   8230c:	003fe206 	br	82298 <__swsetup_r+0x48>
   82310:	80800517 	ldw	r2,20(r16)
   82314:	80000215 	stw	zero,8(r16)
   82318:	0085c83a 	sub	r2,zero,r2
   8231c:	80800615 	stw	r2,24(r16)
   82320:	183fe41e 	bne	r3,zero,822b4 <__swsetup_r+0x64>
   82324:	80c0030b 	ldhu	r3,12(r16)
   82328:	0005883a 	mov	r2,zero
   8232c:	1900200c 	andi	r4,r3,128
   82330:	203fe126 	beq	r4,zero,822b8 <__swsetup_r+0x68>
   82334:	18c01014 	ori	r3,r3,64
   82338:	80c0030d 	sth	r3,12(r16)
   8233c:	00bfffc4 	movi	r2,-1
   82340:	003fdd06 	br	822b8 <__swsetup_r+0x68>
   82344:	00807a00 	call	807a0 <__sinit>
   82348:	003fcd06 	br	82280 <__swsetup_r+0x30>
   8234c:	0005883a 	mov	r2,zero
   82350:	003fd606 	br	822ac <__swsetup_r+0x5c>
   82354:	81400c17 	ldw	r5,48(r16)
   82358:	28000626 	beq	r5,zero,82374 <__swsetup_r+0x124>
   8235c:	80801004 	addi	r2,r16,64
   82360:	28800326 	beq	r5,r2,82370 <__swsetup_r+0x120>
   82364:	8809883a 	mov	r4,r17
   82368:	00828c80 	call	828c8 <_free_r>
   8236c:	8100030b 	ldhu	r4,12(r16)
   82370:	80000c15 	stw	zero,48(r16)
   82374:	80c00417 	ldw	r3,16(r16)
   82378:	00bff6c4 	movi	r2,-37
   8237c:	1108703a 	and	r4,r2,r4
   82380:	80000115 	stw	zero,4(r16)
   82384:	80c00015 	stw	r3,0(r16)
   82388:	003fd506 	br	822e0 <__swsetup_r+0x90>
   8238c:	00800244 	movi	r2,9
   82390:	88800015 	stw	r2,0(r17)
   82394:	20801014 	ori	r2,r4,64
   82398:	8080030d 	sth	r2,12(r16)
   8239c:	00bfffc4 	movi	r2,-1
   823a0:	003fc506 	br	822b8 <__swsetup_r+0x68>

000823a4 <_close_r>:
   823a4:	defffd04 	addi	sp,sp,-12
   823a8:	dc000015 	stw	r16,0(sp)
   823ac:	04000434 	movhi	r16,16
   823b0:	dc400115 	stw	r17,4(sp)
   823b4:	8406b104 	addi	r16,r16,6852
   823b8:	2023883a 	mov	r17,r4
   823bc:	2809883a 	mov	r4,r5
   823c0:	dfc00215 	stw	ra,8(sp)
   823c4:	80000015 	stw	zero,0(r16)
   823c8:	008311c0 	call	8311c <close>
   823cc:	00ffffc4 	movi	r3,-1
   823d0:	10c00526 	beq	r2,r3,823e8 <_close_r+0x44>
   823d4:	dfc00217 	ldw	ra,8(sp)
   823d8:	dc400117 	ldw	r17,4(sp)
   823dc:	dc000017 	ldw	r16,0(sp)
   823e0:	dec00304 	addi	sp,sp,12
   823e4:	f800283a 	ret
   823e8:	80c00017 	ldw	r3,0(r16)
   823ec:	183ff926 	beq	r3,zero,823d4 <_close_r+0x30>
   823f0:	88c00015 	stw	r3,0(r17)
   823f4:	003ff706 	br	823d4 <_close_r+0x30>

000823f8 <_fclose_r>:
   823f8:	28003926 	beq	r5,zero,824e0 <_fclose_r+0xe8>
   823fc:	defffc04 	addi	sp,sp,-16
   82400:	dc400115 	stw	r17,4(sp)
   82404:	dc000015 	stw	r16,0(sp)
   82408:	dfc00315 	stw	ra,12(sp)
   8240c:	dc800215 	stw	r18,8(sp)
   82410:	2023883a 	mov	r17,r4
   82414:	2821883a 	mov	r16,r5
   82418:	20000226 	beq	r4,zero,82424 <_fclose_r+0x2c>
   8241c:	20800e17 	ldw	r2,56(r4)
   82420:	10002726 	beq	r2,zero,824c0 <_fclose_r+0xc8>
   82424:	8080030f 	ldh	r2,12(r16)
   82428:	1000071e 	bne	r2,zero,82448 <_fclose_r+0x50>
   8242c:	0005883a 	mov	r2,zero
   82430:	dfc00317 	ldw	ra,12(sp)
   82434:	dc800217 	ldw	r18,8(sp)
   82438:	dc400117 	ldw	r17,4(sp)
   8243c:	dc000017 	ldw	r16,0(sp)
   82440:	dec00404 	addi	sp,sp,16
   82444:	f800283a 	ret
   82448:	800b883a 	mov	r5,r16
   8244c:	8809883a 	mov	r4,r17
   82450:	00824fc0 	call	824fc <__sflush_r>
   82454:	1025883a 	mov	r18,r2
   82458:	80800b17 	ldw	r2,44(r16)
   8245c:	10000426 	beq	r2,zero,82470 <_fclose_r+0x78>
   82460:	81400717 	ldw	r5,28(r16)
   82464:	8809883a 	mov	r4,r17
   82468:	103ee83a 	callr	r2
   8246c:	10001616 	blt	r2,zero,824c8 <_fclose_r+0xd0>
   82470:	8080030b 	ldhu	r2,12(r16)
   82474:	1080200c 	andi	r2,r2,128
   82478:	1000151e 	bne	r2,zero,824d0 <_fclose_r+0xd8>
   8247c:	81400c17 	ldw	r5,48(r16)
   82480:	28000526 	beq	r5,zero,82498 <_fclose_r+0xa0>
   82484:	80801004 	addi	r2,r16,64
   82488:	28800226 	beq	r5,r2,82494 <_fclose_r+0x9c>
   8248c:	8809883a 	mov	r4,r17
   82490:	00828c80 	call	828c8 <_free_r>
   82494:	80000c15 	stw	zero,48(r16)
   82498:	81401117 	ldw	r5,68(r16)
   8249c:	28000326 	beq	r5,zero,824ac <_fclose_r+0xb4>
   824a0:	8809883a 	mov	r4,r17
   824a4:	00828c80 	call	828c8 <_free_r>
   824a8:	80001115 	stw	zero,68(r16)
   824ac:	00807b00 	call	807b0 <__sfp_lock_acquire>
   824b0:	8000030d 	sth	zero,12(r16)
   824b4:	00807b40 	call	807b4 <__sfp_lock_release>
   824b8:	9005883a 	mov	r2,r18
   824bc:	003fdc06 	br	82430 <_fclose_r+0x38>
   824c0:	00807a00 	call	807a0 <__sinit>
   824c4:	003fd706 	br	82424 <_fclose_r+0x2c>
   824c8:	04bfffc4 	movi	r18,-1
   824cc:	003fe806 	br	82470 <_fclose_r+0x78>
   824d0:	81400417 	ldw	r5,16(r16)
   824d4:	8809883a 	mov	r4,r17
   824d8:	00828c80 	call	828c8 <_free_r>
   824dc:	003fe706 	br	8247c <_fclose_r+0x84>
   824e0:	0005883a 	mov	r2,zero
   824e4:	f800283a 	ret

000824e8 <fclose>:
   824e8:	00800434 	movhi	r2,16
   824ec:	1086a104 	addi	r2,r2,6788
   824f0:	200b883a 	mov	r5,r4
   824f4:	11000017 	ldw	r4,0(r2)
   824f8:	00823f81 	jmpi	823f8 <_fclose_r>

000824fc <__sflush_r>:
   824fc:	2880030b 	ldhu	r2,12(r5)
   82500:	defffb04 	addi	sp,sp,-20
   82504:	dcc00315 	stw	r19,12(sp)
   82508:	dc400115 	stw	r17,4(sp)
   8250c:	dfc00415 	stw	ra,16(sp)
   82510:	dc800215 	stw	r18,8(sp)
   82514:	dc000015 	stw	r16,0(sp)
   82518:	10c0020c 	andi	r3,r2,8
   8251c:	2823883a 	mov	r17,r5
   82520:	2027883a 	mov	r19,r4
   82524:	1800311e 	bne	r3,zero,825ec <__sflush_r+0xf0>
   82528:	28c00117 	ldw	r3,4(r5)
   8252c:	10820014 	ori	r2,r2,2048
   82530:	2880030d 	sth	r2,12(r5)
   82534:	00c04b0e 	bge	zero,r3,82664 <__sflush_r+0x168>
   82538:	8a000a17 	ldw	r8,40(r17)
   8253c:	40002326 	beq	r8,zero,825cc <__sflush_r+0xd0>
   82540:	9c000017 	ldw	r16,0(r19)
   82544:	10c4000c 	andi	r3,r2,4096
   82548:	98000015 	stw	zero,0(r19)
   8254c:	18004826 	beq	r3,zero,82670 <__sflush_r+0x174>
   82550:	89801417 	ldw	r6,80(r17)
   82554:	10c0010c 	andi	r3,r2,4
   82558:	18000626 	beq	r3,zero,82574 <__sflush_r+0x78>
   8255c:	88c00117 	ldw	r3,4(r17)
   82560:	88800c17 	ldw	r2,48(r17)
   82564:	30cdc83a 	sub	r6,r6,r3
   82568:	10000226 	beq	r2,zero,82574 <__sflush_r+0x78>
   8256c:	88800f17 	ldw	r2,60(r17)
   82570:	308dc83a 	sub	r6,r6,r2
   82574:	89400717 	ldw	r5,28(r17)
   82578:	000f883a 	mov	r7,zero
   8257c:	9809883a 	mov	r4,r19
   82580:	403ee83a 	callr	r8
   82584:	00ffffc4 	movi	r3,-1
   82588:	10c04426 	beq	r2,r3,8269c <__sflush_r+0x1a0>
   8258c:	88c0030b 	ldhu	r3,12(r17)
   82590:	89000417 	ldw	r4,16(r17)
   82594:	88000115 	stw	zero,4(r17)
   82598:	197dffcc 	andi	r5,r3,63487
   8259c:	8940030d 	sth	r5,12(r17)
   825a0:	89000015 	stw	r4,0(r17)
   825a4:	18c4000c 	andi	r3,r3,4096
   825a8:	18002c1e 	bne	r3,zero,8265c <__sflush_r+0x160>
   825ac:	89400c17 	ldw	r5,48(r17)
   825b0:	9c000015 	stw	r16,0(r19)
   825b4:	28000526 	beq	r5,zero,825cc <__sflush_r+0xd0>
   825b8:	88801004 	addi	r2,r17,64
   825bc:	28800226 	beq	r5,r2,825c8 <__sflush_r+0xcc>
   825c0:	9809883a 	mov	r4,r19
   825c4:	00828c80 	call	828c8 <_free_r>
   825c8:	88000c15 	stw	zero,48(r17)
   825cc:	0005883a 	mov	r2,zero
   825d0:	dfc00417 	ldw	ra,16(sp)
   825d4:	dcc00317 	ldw	r19,12(sp)
   825d8:	dc800217 	ldw	r18,8(sp)
   825dc:	dc400117 	ldw	r17,4(sp)
   825e0:	dc000017 	ldw	r16,0(sp)
   825e4:	dec00504 	addi	sp,sp,20
   825e8:	f800283a 	ret
   825ec:	2c800417 	ldw	r18,16(r5)
   825f0:	903ff626 	beq	r18,zero,825cc <__sflush_r+0xd0>
   825f4:	2c000017 	ldw	r16,0(r5)
   825f8:	108000cc 	andi	r2,r2,3
   825fc:	2c800015 	stw	r18,0(r5)
   82600:	84a1c83a 	sub	r16,r16,r18
   82604:	1000131e 	bne	r2,zero,82654 <__sflush_r+0x158>
   82608:	28800517 	ldw	r2,20(r5)
   8260c:	88800215 	stw	r2,8(r17)
   82610:	04000316 	blt	zero,r16,82620 <__sflush_r+0x124>
   82614:	003fed06 	br	825cc <__sflush_r+0xd0>
   82618:	90a5883a 	add	r18,r18,r2
   8261c:	043feb0e 	bge	zero,r16,825cc <__sflush_r+0xd0>
   82620:	88800917 	ldw	r2,36(r17)
   82624:	89400717 	ldw	r5,28(r17)
   82628:	800f883a 	mov	r7,r16
   8262c:	900d883a 	mov	r6,r18
   82630:	9809883a 	mov	r4,r19
   82634:	103ee83a 	callr	r2
   82638:	80a1c83a 	sub	r16,r16,r2
   8263c:	00bff616 	blt	zero,r2,82618 <__sflush_r+0x11c>
   82640:	88c0030b 	ldhu	r3,12(r17)
   82644:	00bfffc4 	movi	r2,-1
   82648:	18c01014 	ori	r3,r3,64
   8264c:	88c0030d 	sth	r3,12(r17)
   82650:	003fdf06 	br	825d0 <__sflush_r+0xd4>
   82654:	0005883a 	mov	r2,zero
   82658:	003fec06 	br	8260c <__sflush_r+0x110>
   8265c:	88801415 	stw	r2,80(r17)
   82660:	003fd206 	br	825ac <__sflush_r+0xb0>
   82664:	28c00f17 	ldw	r3,60(r5)
   82668:	00ffb316 	blt	zero,r3,82538 <__sflush_r+0x3c>
   8266c:	003fd706 	br	825cc <__sflush_r+0xd0>
   82670:	89400717 	ldw	r5,28(r17)
   82674:	000d883a 	mov	r6,zero
   82678:	01c00044 	movi	r7,1
   8267c:	9809883a 	mov	r4,r19
   82680:	403ee83a 	callr	r8
   82684:	100d883a 	mov	r6,r2
   82688:	00bfffc4 	movi	r2,-1
   8268c:	30801426 	beq	r6,r2,826e0 <__sflush_r+0x1e4>
   82690:	8880030b 	ldhu	r2,12(r17)
   82694:	8a000a17 	ldw	r8,40(r17)
   82698:	003fae06 	br	82554 <__sflush_r+0x58>
   8269c:	98c00017 	ldw	r3,0(r19)
   826a0:	183fba26 	beq	r3,zero,8258c <__sflush_r+0x90>
   826a4:	01000744 	movi	r4,29
   826a8:	19000626 	beq	r3,r4,826c4 <__sflush_r+0x1c8>
   826ac:	01000584 	movi	r4,22
   826b0:	19000426 	beq	r3,r4,826c4 <__sflush_r+0x1c8>
   826b4:	88c0030b 	ldhu	r3,12(r17)
   826b8:	18c01014 	ori	r3,r3,64
   826bc:	88c0030d 	sth	r3,12(r17)
   826c0:	003fc306 	br	825d0 <__sflush_r+0xd4>
   826c4:	8880030b 	ldhu	r2,12(r17)
   826c8:	88c00417 	ldw	r3,16(r17)
   826cc:	88000115 	stw	zero,4(r17)
   826d0:	10bdffcc 	andi	r2,r2,63487
   826d4:	8880030d 	sth	r2,12(r17)
   826d8:	88c00015 	stw	r3,0(r17)
   826dc:	003fb306 	br	825ac <__sflush_r+0xb0>
   826e0:	98800017 	ldw	r2,0(r19)
   826e4:	103fea26 	beq	r2,zero,82690 <__sflush_r+0x194>
   826e8:	00c00744 	movi	r3,29
   826ec:	10c00226 	beq	r2,r3,826f8 <__sflush_r+0x1fc>
   826f0:	00c00584 	movi	r3,22
   826f4:	10c0031e 	bne	r2,r3,82704 <__sflush_r+0x208>
   826f8:	9c000015 	stw	r16,0(r19)
   826fc:	0005883a 	mov	r2,zero
   82700:	003fb306 	br	825d0 <__sflush_r+0xd4>
   82704:	88c0030b 	ldhu	r3,12(r17)
   82708:	3005883a 	mov	r2,r6
   8270c:	18c01014 	ori	r3,r3,64
   82710:	88c0030d 	sth	r3,12(r17)
   82714:	003fae06 	br	825d0 <__sflush_r+0xd4>

00082718 <_fflush_r>:
   82718:	defffd04 	addi	sp,sp,-12
   8271c:	dc000115 	stw	r16,4(sp)
   82720:	dfc00215 	stw	ra,8(sp)
   82724:	2021883a 	mov	r16,r4
   82728:	20000226 	beq	r4,zero,82734 <_fflush_r+0x1c>
   8272c:	20800e17 	ldw	r2,56(r4)
   82730:	10000c26 	beq	r2,zero,82764 <_fflush_r+0x4c>
   82734:	2880030f 	ldh	r2,12(r5)
   82738:	1000051e 	bne	r2,zero,82750 <_fflush_r+0x38>
   8273c:	0005883a 	mov	r2,zero
   82740:	dfc00217 	ldw	ra,8(sp)
   82744:	dc000117 	ldw	r16,4(sp)
   82748:	dec00304 	addi	sp,sp,12
   8274c:	f800283a 	ret
   82750:	8009883a 	mov	r4,r16
   82754:	dfc00217 	ldw	ra,8(sp)
   82758:	dc000117 	ldw	r16,4(sp)
   8275c:	dec00304 	addi	sp,sp,12
   82760:	00824fc1 	jmpi	824fc <__sflush_r>
   82764:	d9400015 	stw	r5,0(sp)
   82768:	00807a00 	call	807a0 <__sinit>
   8276c:	d9400017 	ldw	r5,0(sp)
   82770:	003ff006 	br	82734 <_fflush_r+0x1c>

00082774 <fflush>:
   82774:	20000526 	beq	r4,zero,8278c <fflush+0x18>
   82778:	00800434 	movhi	r2,16
   8277c:	1086a104 	addi	r2,r2,6788
   82780:	200b883a 	mov	r5,r4
   82784:	11000017 	ldw	r4,0(r2)
   82788:	00827181 	jmpi	82718 <_fflush_r>
   8278c:	00800434 	movhi	r2,16
   82790:	1086a004 	addi	r2,r2,6784
   82794:	11000017 	ldw	r4,0(r2)
   82798:	01400234 	movhi	r5,8
   8279c:	2949c604 	addi	r5,r5,10008
   827a0:	0080d7c1 	jmpi	80d7c <_fwalk_reent>

000827a4 <_malloc_trim_r>:
   827a4:	defffb04 	addi	sp,sp,-20
   827a8:	dcc00315 	stw	r19,12(sp)
   827ac:	04c00434 	movhi	r19,16
   827b0:	dc800215 	stw	r18,8(sp)
   827b4:	dc400115 	stw	r17,4(sp)
   827b8:	dc000015 	stw	r16,0(sp)
   827bc:	dfc00415 	stw	ra,16(sp)
   827c0:	2821883a 	mov	r16,r5
   827c4:	9cc11c04 	addi	r19,r19,1136
   827c8:	2025883a 	mov	r18,r4
   827cc:	008367c0 	call	8367c <__malloc_lock>
   827d0:	98800217 	ldw	r2,8(r19)
   827d4:	14400117 	ldw	r17,4(r2)
   827d8:	00bfff04 	movi	r2,-4
   827dc:	88a2703a 	and	r17,r17,r2
   827e0:	8c21c83a 	sub	r16,r17,r16
   827e4:	8403fbc4 	addi	r16,r16,4079
   827e8:	8020d33a 	srli	r16,r16,12
   827ec:	0083ffc4 	movi	r2,4095
   827f0:	843fffc4 	addi	r16,r16,-1
   827f4:	8020933a 	slli	r16,r16,12
   827f8:	1400060e 	bge	r2,r16,82814 <_malloc_trim_r+0x70>
   827fc:	000b883a 	mov	r5,zero
   82800:	9009883a 	mov	r4,r18
   82804:	00820600 	call	82060 <_sbrk_r>
   82808:	98c00217 	ldw	r3,8(r19)
   8280c:	1c47883a 	add	r3,r3,r17
   82810:	10c00a26 	beq	r2,r3,8283c <_malloc_trim_r+0x98>
   82814:	9009883a 	mov	r4,r18
   82818:	00836a00 	call	836a0 <__malloc_unlock>
   8281c:	0005883a 	mov	r2,zero
   82820:	dfc00417 	ldw	ra,16(sp)
   82824:	dcc00317 	ldw	r19,12(sp)
   82828:	dc800217 	ldw	r18,8(sp)
   8282c:	dc400117 	ldw	r17,4(sp)
   82830:	dc000017 	ldw	r16,0(sp)
   82834:	dec00504 	addi	sp,sp,20
   82838:	f800283a 	ret
   8283c:	040bc83a 	sub	r5,zero,r16
   82840:	9009883a 	mov	r4,r18
   82844:	00820600 	call	82060 <_sbrk_r>
   82848:	00ffffc4 	movi	r3,-1
   8284c:	10c00d26 	beq	r2,r3,82884 <_malloc_trim_r+0xe0>
   82850:	00c00434 	movhi	r3,16
   82854:	18c6b904 	addi	r3,r3,6884
   82858:	18800017 	ldw	r2,0(r3)
   8285c:	99000217 	ldw	r4,8(r19)
   82860:	8c23c83a 	sub	r17,r17,r16
   82864:	8c400054 	ori	r17,r17,1
   82868:	1421c83a 	sub	r16,r2,r16
   8286c:	24400115 	stw	r17,4(r4)
   82870:	9009883a 	mov	r4,r18
   82874:	1c000015 	stw	r16,0(r3)
   82878:	00836a00 	call	836a0 <__malloc_unlock>
   8287c:	00800044 	movi	r2,1
   82880:	003fe706 	br	82820 <_malloc_trim_r+0x7c>
   82884:	000b883a 	mov	r5,zero
   82888:	9009883a 	mov	r4,r18
   8288c:	00820600 	call	82060 <_sbrk_r>
   82890:	99000217 	ldw	r4,8(r19)
   82894:	014003c4 	movi	r5,15
   82898:	1107c83a 	sub	r3,r2,r4
   8289c:	28ffdd0e 	bge	r5,r3,82814 <_malloc_trim_r+0x70>
   828a0:	01400434 	movhi	r5,16
   828a4:	2946a204 	addi	r5,r5,6792
   828a8:	29400017 	ldw	r5,0(r5)
   828ac:	18c00054 	ori	r3,r3,1
   828b0:	20c00115 	stw	r3,4(r4)
   828b4:	00c00434 	movhi	r3,16
   828b8:	1145c83a 	sub	r2,r2,r5
   828bc:	18c6b904 	addi	r3,r3,6884
   828c0:	18800015 	stw	r2,0(r3)
   828c4:	003fd306 	br	82814 <_malloc_trim_r+0x70>

000828c8 <_free_r>:
   828c8:	28004126 	beq	r5,zero,829d0 <_free_r+0x108>
   828cc:	defffd04 	addi	sp,sp,-12
   828d0:	dc400115 	stw	r17,4(sp)
   828d4:	dc000015 	stw	r16,0(sp)
   828d8:	2023883a 	mov	r17,r4
   828dc:	2821883a 	mov	r16,r5
   828e0:	dfc00215 	stw	ra,8(sp)
   828e4:	008367c0 	call	8367c <__malloc_lock>
   828e8:	81ffff17 	ldw	r7,-4(r16)
   828ec:	00bfff84 	movi	r2,-2
   828f0:	01000434 	movhi	r4,16
   828f4:	81bffe04 	addi	r6,r16,-8
   828f8:	3884703a 	and	r2,r7,r2
   828fc:	21011c04 	addi	r4,r4,1136
   82900:	308b883a 	add	r5,r6,r2
   82904:	2a400117 	ldw	r9,4(r5)
   82908:	22000217 	ldw	r8,8(r4)
   8290c:	00ffff04 	movi	r3,-4
   82910:	48c6703a 	and	r3,r9,r3
   82914:	2a005726 	beq	r5,r8,82a74 <_free_r+0x1ac>
   82918:	28c00115 	stw	r3,4(r5)
   8291c:	39c0004c 	andi	r7,r7,1
   82920:	3800091e 	bne	r7,zero,82948 <_free_r+0x80>
   82924:	823ffe17 	ldw	r8,-8(r16)
   82928:	22400204 	addi	r9,r4,8
   8292c:	320dc83a 	sub	r6,r6,r8
   82930:	31c00217 	ldw	r7,8(r6)
   82934:	1205883a 	add	r2,r2,r8
   82938:	3a406526 	beq	r7,r9,82ad0 <_free_r+0x208>
   8293c:	32000317 	ldw	r8,12(r6)
   82940:	3a000315 	stw	r8,12(r7)
   82944:	41c00215 	stw	r7,8(r8)
   82948:	28cf883a 	add	r7,r5,r3
   8294c:	39c00117 	ldw	r7,4(r7)
   82950:	39c0004c 	andi	r7,r7,1
   82954:	38003a26 	beq	r7,zero,82a40 <_free_r+0x178>
   82958:	10c00054 	ori	r3,r2,1
   8295c:	30c00115 	stw	r3,4(r6)
   82960:	3087883a 	add	r3,r6,r2
   82964:	18800015 	stw	r2,0(r3)
   82968:	00c07fc4 	movi	r3,511
   8296c:	18801936 	bltu	r3,r2,829d4 <_free_r+0x10c>
   82970:	1004d0fa 	srli	r2,r2,3
   82974:	01c00044 	movi	r7,1
   82978:	21400117 	ldw	r5,4(r4)
   8297c:	10c00044 	addi	r3,r2,1
   82980:	18c7883a 	add	r3,r3,r3
   82984:	1005d0ba 	srai	r2,r2,2
   82988:	18c7883a 	add	r3,r3,r3
   8298c:	18c7883a 	add	r3,r3,r3
   82990:	1907883a 	add	r3,r3,r4
   82994:	3884983a 	sll	r2,r7,r2
   82998:	19c00017 	ldw	r7,0(r3)
   8299c:	1a3ffe04 	addi	r8,r3,-8
   829a0:	1144b03a 	or	r2,r2,r5
   829a4:	32000315 	stw	r8,12(r6)
   829a8:	31c00215 	stw	r7,8(r6)
   829ac:	20800115 	stw	r2,4(r4)
   829b0:	19800015 	stw	r6,0(r3)
   829b4:	39800315 	stw	r6,12(r7)
   829b8:	8809883a 	mov	r4,r17
   829bc:	dfc00217 	ldw	ra,8(sp)
   829c0:	dc400117 	ldw	r17,4(sp)
   829c4:	dc000017 	ldw	r16,0(sp)
   829c8:	dec00304 	addi	sp,sp,12
   829cc:	00836a01 	jmpi	836a0 <__malloc_unlock>
   829d0:	f800283a 	ret
   829d4:	100ad27a 	srli	r5,r2,9
   829d8:	00c00104 	movi	r3,4
   829dc:	19404a36 	bltu	r3,r5,82b08 <_free_r+0x240>
   829e0:	100ad1ba 	srli	r5,r2,6
   829e4:	28c00e44 	addi	r3,r5,57
   829e8:	18c7883a 	add	r3,r3,r3
   829ec:	29400e04 	addi	r5,r5,56
   829f0:	18c7883a 	add	r3,r3,r3
   829f4:	18c7883a 	add	r3,r3,r3
   829f8:	1909883a 	add	r4,r3,r4
   829fc:	20c00017 	ldw	r3,0(r4)
   82a00:	01c00434 	movhi	r7,16
   82a04:	213ffe04 	addi	r4,r4,-8
   82a08:	39c11c04 	addi	r7,r7,1136
   82a0c:	20c04426 	beq	r4,r3,82b20 <_free_r+0x258>
   82a10:	01ffff04 	movi	r7,-4
   82a14:	19400117 	ldw	r5,4(r3)
   82a18:	29ca703a 	and	r5,r5,r7
   82a1c:	1140022e 	bgeu	r2,r5,82a28 <_free_r+0x160>
   82a20:	18c00217 	ldw	r3,8(r3)
   82a24:	20fffb1e 	bne	r4,r3,82a14 <_free_r+0x14c>
   82a28:	19000317 	ldw	r4,12(r3)
   82a2c:	31000315 	stw	r4,12(r6)
   82a30:	30c00215 	stw	r3,8(r6)
   82a34:	21800215 	stw	r6,8(r4)
   82a38:	19800315 	stw	r6,12(r3)
   82a3c:	003fde06 	br	829b8 <_free_r+0xf0>
   82a40:	29c00217 	ldw	r7,8(r5)
   82a44:	10c5883a 	add	r2,r2,r3
   82a48:	00c00434 	movhi	r3,16
   82a4c:	18c11e04 	addi	r3,r3,1144
   82a50:	38c03b26 	beq	r7,r3,82b40 <_free_r+0x278>
   82a54:	2a000317 	ldw	r8,12(r5)
   82a58:	11400054 	ori	r5,r2,1
   82a5c:	3087883a 	add	r3,r6,r2
   82a60:	3a000315 	stw	r8,12(r7)
   82a64:	41c00215 	stw	r7,8(r8)
   82a68:	31400115 	stw	r5,4(r6)
   82a6c:	18800015 	stw	r2,0(r3)
   82a70:	003fbd06 	br	82968 <_free_r+0xa0>
   82a74:	39c0004c 	andi	r7,r7,1
   82a78:	10c5883a 	add	r2,r2,r3
   82a7c:	3800071e 	bne	r7,zero,82a9c <_free_r+0x1d4>
   82a80:	81fffe17 	ldw	r7,-8(r16)
   82a84:	31cdc83a 	sub	r6,r6,r7
   82a88:	30c00317 	ldw	r3,12(r6)
   82a8c:	31400217 	ldw	r5,8(r6)
   82a90:	11c5883a 	add	r2,r2,r7
   82a94:	28c00315 	stw	r3,12(r5)
   82a98:	19400215 	stw	r5,8(r3)
   82a9c:	10c00054 	ori	r3,r2,1
   82aa0:	30c00115 	stw	r3,4(r6)
   82aa4:	00c00434 	movhi	r3,16
   82aa8:	18c6a304 	addi	r3,r3,6796
   82aac:	18c00017 	ldw	r3,0(r3)
   82ab0:	21800215 	stw	r6,8(r4)
   82ab4:	10ffc036 	bltu	r2,r3,829b8 <_free_r+0xf0>
   82ab8:	00800434 	movhi	r2,16
   82abc:	1086b004 	addi	r2,r2,6848
   82ac0:	11400017 	ldw	r5,0(r2)
   82ac4:	8809883a 	mov	r4,r17
   82ac8:	00827a40 	call	827a4 <_malloc_trim_r>
   82acc:	003fba06 	br	829b8 <_free_r+0xf0>
   82ad0:	28c9883a 	add	r4,r5,r3
   82ad4:	21000117 	ldw	r4,4(r4)
   82ad8:	2100004c 	andi	r4,r4,1
   82adc:	2000391e 	bne	r4,zero,82bc4 <_free_r+0x2fc>
   82ae0:	29c00217 	ldw	r7,8(r5)
   82ae4:	29000317 	ldw	r4,12(r5)
   82ae8:	1885883a 	add	r2,r3,r2
   82aec:	10c00054 	ori	r3,r2,1
   82af0:	39000315 	stw	r4,12(r7)
   82af4:	21c00215 	stw	r7,8(r4)
   82af8:	30c00115 	stw	r3,4(r6)
   82afc:	308d883a 	add	r6,r6,r2
   82b00:	30800015 	stw	r2,0(r6)
   82b04:	003fac06 	br	829b8 <_free_r+0xf0>
   82b08:	00c00504 	movi	r3,20
   82b0c:	19401536 	bltu	r3,r5,82b64 <_free_r+0x29c>
   82b10:	28c01704 	addi	r3,r5,92
   82b14:	18c7883a 	add	r3,r3,r3
   82b18:	294016c4 	addi	r5,r5,91
   82b1c:	003fb406 	br	829f0 <_free_r+0x128>
   82b20:	280bd0ba 	srai	r5,r5,2
   82b24:	00c00044 	movi	r3,1
   82b28:	38800117 	ldw	r2,4(r7)
   82b2c:	194a983a 	sll	r5,r3,r5
   82b30:	2007883a 	mov	r3,r4
   82b34:	2884b03a 	or	r2,r5,r2
   82b38:	38800115 	stw	r2,4(r7)
   82b3c:	003fbb06 	br	82a2c <_free_r+0x164>
   82b40:	21800515 	stw	r6,20(r4)
   82b44:	21800415 	stw	r6,16(r4)
   82b48:	10c00054 	ori	r3,r2,1
   82b4c:	31c00315 	stw	r7,12(r6)
   82b50:	31c00215 	stw	r7,8(r6)
   82b54:	30c00115 	stw	r3,4(r6)
   82b58:	308d883a 	add	r6,r6,r2
   82b5c:	30800015 	stw	r2,0(r6)
   82b60:	003f9506 	br	829b8 <_free_r+0xf0>
   82b64:	00c01504 	movi	r3,84
   82b68:	19400536 	bltu	r3,r5,82b80 <_free_r+0x2b8>
   82b6c:	100ad33a 	srli	r5,r2,12
   82b70:	28c01bc4 	addi	r3,r5,111
   82b74:	18c7883a 	add	r3,r3,r3
   82b78:	29401b84 	addi	r5,r5,110
   82b7c:	003f9c06 	br	829f0 <_free_r+0x128>
   82b80:	00c05504 	movi	r3,340
   82b84:	19400536 	bltu	r3,r5,82b9c <_free_r+0x2d4>
   82b88:	100ad3fa 	srli	r5,r2,15
   82b8c:	28c01e04 	addi	r3,r5,120
   82b90:	18c7883a 	add	r3,r3,r3
   82b94:	29401dc4 	addi	r5,r5,119
   82b98:	003f9506 	br	829f0 <_free_r+0x128>
   82b9c:	00c15504 	movi	r3,1364
   82ba0:	19400536 	bltu	r3,r5,82bb8 <_free_r+0x2f0>
   82ba4:	100ad4ba 	srli	r5,r2,18
   82ba8:	28c01f44 	addi	r3,r5,125
   82bac:	18c7883a 	add	r3,r3,r3
   82bb0:	29401f04 	addi	r5,r5,124
   82bb4:	003f8e06 	br	829f0 <_free_r+0x128>
   82bb8:	00c03f84 	movi	r3,254
   82bbc:	01401f84 	movi	r5,126
   82bc0:	003f8b06 	br	829f0 <_free_r+0x128>
   82bc4:	10c00054 	ori	r3,r2,1
   82bc8:	30c00115 	stw	r3,4(r6)
   82bcc:	308d883a 	add	r6,r6,r2
   82bd0:	30800015 	stw	r2,0(r6)
   82bd4:	003f7806 	br	829b8 <_free_r+0xf0>

00082bd8 <_lseek_r>:
   82bd8:	defffd04 	addi	sp,sp,-12
   82bdc:	2805883a 	mov	r2,r5
   82be0:	dc000015 	stw	r16,0(sp)
   82be4:	04000434 	movhi	r16,16
   82be8:	dc400115 	stw	r17,4(sp)
   82bec:	300b883a 	mov	r5,r6
   82bf0:	8406b104 	addi	r16,r16,6852
   82bf4:	2023883a 	mov	r17,r4
   82bf8:	380d883a 	mov	r6,r7
   82bfc:	1009883a 	mov	r4,r2
   82c00:	dfc00215 	stw	ra,8(sp)
   82c04:	80000015 	stw	zero,0(r16)
   82c08:	00835240 	call	83524 <lseek>
   82c0c:	00ffffc4 	movi	r3,-1
   82c10:	10c00526 	beq	r2,r3,82c28 <_lseek_r+0x50>
   82c14:	dfc00217 	ldw	ra,8(sp)
   82c18:	dc400117 	ldw	r17,4(sp)
   82c1c:	dc000017 	ldw	r16,0(sp)
   82c20:	dec00304 	addi	sp,sp,12
   82c24:	f800283a 	ret
   82c28:	80c00017 	ldw	r3,0(r16)
   82c2c:	183ff926 	beq	r3,zero,82c14 <_lseek_r+0x3c>
   82c30:	88c00015 	stw	r3,0(r17)
   82c34:	003ff706 	br	82c14 <_lseek_r+0x3c>

00082c38 <__smakebuf_r>:
   82c38:	2880030b 	ldhu	r2,12(r5)
   82c3c:	10c0008c 	andi	r3,r2,2
   82c40:	1800411e 	bne	r3,zero,82d48 <__smakebuf_r+0x110>
   82c44:	deffec04 	addi	sp,sp,-80
   82c48:	dc000f15 	stw	r16,60(sp)
   82c4c:	2821883a 	mov	r16,r5
   82c50:	2940038f 	ldh	r5,14(r5)
   82c54:	dc401015 	stw	r17,64(sp)
   82c58:	dfc01315 	stw	ra,76(sp)
   82c5c:	dcc01215 	stw	r19,72(sp)
   82c60:	dc801115 	stw	r18,68(sp)
   82c64:	2023883a 	mov	r17,r4
   82c68:	28001c16 	blt	r5,zero,82cdc <__smakebuf_r+0xa4>
   82c6c:	d80d883a 	mov	r6,sp
   82c70:	0082e540 	call	82e54 <_fstat_r>
   82c74:	10001816 	blt	r2,zero,82cd8 <__smakebuf_r+0xa0>
   82c78:	d8800117 	ldw	r2,4(sp)
   82c7c:	00e00014 	movui	r3,32768
   82c80:	10bc000c 	andi	r2,r2,61440
   82c84:	14c80020 	cmpeqi	r19,r2,8192
   82c88:	10c03726 	beq	r2,r3,82d68 <__smakebuf_r+0x130>
   82c8c:	80c0030b 	ldhu	r3,12(r16)
   82c90:	18c20014 	ori	r3,r3,2048
   82c94:	80c0030d 	sth	r3,12(r16)
   82c98:	00c80004 	movi	r3,8192
   82c9c:	10c0521e 	bne	r2,r3,82de8 <__smakebuf_r+0x1b0>
   82ca0:	8140038f 	ldh	r5,14(r16)
   82ca4:	8809883a 	mov	r4,r17
   82ca8:	0082eb00 	call	82eb0 <_isatty_r>
   82cac:	10004c26 	beq	r2,zero,82de0 <__smakebuf_r+0x1a8>
   82cb0:	8080030b 	ldhu	r2,12(r16)
   82cb4:	80c010c4 	addi	r3,r16,67
   82cb8:	80c00015 	stw	r3,0(r16)
   82cbc:	10800054 	ori	r2,r2,1
   82cc0:	8080030d 	sth	r2,12(r16)
   82cc4:	00800044 	movi	r2,1
   82cc8:	80c00415 	stw	r3,16(r16)
   82ccc:	80800515 	stw	r2,20(r16)
   82cd0:	04810004 	movi	r18,1024
   82cd4:	00000706 	br	82cf4 <__smakebuf_r+0xbc>
   82cd8:	8080030b 	ldhu	r2,12(r16)
   82cdc:	10c0200c 	andi	r3,r2,128
   82ce0:	18001f1e 	bne	r3,zero,82d60 <__smakebuf_r+0x128>
   82ce4:	04810004 	movi	r18,1024
   82ce8:	10820014 	ori	r2,r2,2048
   82cec:	8080030d 	sth	r2,12(r16)
   82cf0:	0027883a 	mov	r19,zero
   82cf4:	900b883a 	mov	r5,r18
   82cf8:	8809883a 	mov	r4,r17
   82cfc:	0080e400 	call	80e40 <_malloc_r>
   82d00:	10002c26 	beq	r2,zero,82db4 <__smakebuf_r+0x17c>
   82d04:	80c0030b 	ldhu	r3,12(r16)
   82d08:	01000234 	movhi	r4,8
   82d0c:	21011204 	addi	r4,r4,1096
   82d10:	89000f15 	stw	r4,60(r17)
   82d14:	18c02014 	ori	r3,r3,128
   82d18:	80c0030d 	sth	r3,12(r16)
   82d1c:	80800015 	stw	r2,0(r16)
   82d20:	80800415 	stw	r2,16(r16)
   82d24:	84800515 	stw	r18,20(r16)
   82d28:	98001a1e 	bne	r19,zero,82d94 <__smakebuf_r+0x15c>
   82d2c:	dfc01317 	ldw	ra,76(sp)
   82d30:	dcc01217 	ldw	r19,72(sp)
   82d34:	dc801117 	ldw	r18,68(sp)
   82d38:	dc401017 	ldw	r17,64(sp)
   82d3c:	dc000f17 	ldw	r16,60(sp)
   82d40:	dec01404 	addi	sp,sp,80
   82d44:	f800283a 	ret
   82d48:	288010c4 	addi	r2,r5,67
   82d4c:	28800015 	stw	r2,0(r5)
   82d50:	28800415 	stw	r2,16(r5)
   82d54:	00800044 	movi	r2,1
   82d58:	28800515 	stw	r2,20(r5)
   82d5c:	f800283a 	ret
   82d60:	04801004 	movi	r18,64
   82d64:	003fe006 	br	82ce8 <__smakebuf_r+0xb0>
   82d68:	81000a17 	ldw	r4,40(r16)
   82d6c:	00c00234 	movhi	r3,8
   82d70:	18c86304 	addi	r3,r3,8588
   82d74:	20ffc51e 	bne	r4,r3,82c8c <__smakebuf_r+0x54>
   82d78:	8080030b 	ldhu	r2,12(r16)
   82d7c:	04810004 	movi	r18,1024
   82d80:	84801315 	stw	r18,76(r16)
   82d84:	1484b03a 	or	r2,r2,r18
   82d88:	8080030d 	sth	r2,12(r16)
   82d8c:	0027883a 	mov	r19,zero
   82d90:	003fd806 	br	82cf4 <__smakebuf_r+0xbc>
   82d94:	8140038f 	ldh	r5,14(r16)
   82d98:	8809883a 	mov	r4,r17
   82d9c:	0082eb00 	call	82eb0 <_isatty_r>
   82da0:	103fe226 	beq	r2,zero,82d2c <__smakebuf_r+0xf4>
   82da4:	8080030b 	ldhu	r2,12(r16)
   82da8:	10800054 	ori	r2,r2,1
   82dac:	8080030d 	sth	r2,12(r16)
   82db0:	003fde06 	br	82d2c <__smakebuf_r+0xf4>
   82db4:	8080030b 	ldhu	r2,12(r16)
   82db8:	10c0800c 	andi	r3,r2,512
   82dbc:	183fdb1e 	bne	r3,zero,82d2c <__smakebuf_r+0xf4>
   82dc0:	10800094 	ori	r2,r2,2
   82dc4:	80c010c4 	addi	r3,r16,67
   82dc8:	8080030d 	sth	r2,12(r16)
   82dcc:	00800044 	movi	r2,1
   82dd0:	80c00015 	stw	r3,0(r16)
   82dd4:	80c00415 	stw	r3,16(r16)
   82dd8:	80800515 	stw	r2,20(r16)
   82ddc:	003fd306 	br	82d2c <__smakebuf_r+0xf4>
   82de0:	04810004 	movi	r18,1024
   82de4:	003fc306 	br	82cf4 <__smakebuf_r+0xbc>
   82de8:	0027883a 	mov	r19,zero
   82dec:	04810004 	movi	r18,1024
   82df0:	003fc006 	br	82cf4 <__smakebuf_r+0xbc>

00082df4 <_read_r>:
   82df4:	defffd04 	addi	sp,sp,-12
   82df8:	2805883a 	mov	r2,r5
   82dfc:	dc000015 	stw	r16,0(sp)
   82e00:	04000434 	movhi	r16,16
   82e04:	dc400115 	stw	r17,4(sp)
   82e08:	300b883a 	mov	r5,r6
   82e0c:	8406b104 	addi	r16,r16,6852
   82e10:	2023883a 	mov	r17,r4
   82e14:	380d883a 	mov	r6,r7
   82e18:	1009883a 	mov	r4,r2
   82e1c:	dfc00215 	stw	ra,8(sp)
   82e20:	80000015 	stw	zero,0(r16)
   82e24:	00837000 	call	83700 <read>
   82e28:	00ffffc4 	movi	r3,-1
   82e2c:	10c00526 	beq	r2,r3,82e44 <_read_r+0x50>
   82e30:	dfc00217 	ldw	ra,8(sp)
   82e34:	dc400117 	ldw	r17,4(sp)
   82e38:	dc000017 	ldw	r16,0(sp)
   82e3c:	dec00304 	addi	sp,sp,12
   82e40:	f800283a 	ret
   82e44:	80c00017 	ldw	r3,0(r16)
   82e48:	183ff926 	beq	r3,zero,82e30 <_read_r+0x3c>
   82e4c:	88c00015 	stw	r3,0(r17)
   82e50:	003ff706 	br	82e30 <_read_r+0x3c>

00082e54 <_fstat_r>:
   82e54:	defffd04 	addi	sp,sp,-12
   82e58:	2805883a 	mov	r2,r5
   82e5c:	dc000015 	stw	r16,0(sp)
   82e60:	04000434 	movhi	r16,16
   82e64:	dc400115 	stw	r17,4(sp)
   82e68:	8406b104 	addi	r16,r16,6852
   82e6c:	2023883a 	mov	r17,r4
   82e70:	300b883a 	mov	r5,r6
   82e74:	1009883a 	mov	r4,r2
   82e78:	dfc00215 	stw	ra,8(sp)
   82e7c:	80000015 	stw	zero,0(r16)
   82e80:	008325c0 	call	8325c <fstat>
   82e84:	00ffffc4 	movi	r3,-1
   82e88:	10c00526 	beq	r2,r3,82ea0 <_fstat_r+0x4c>
   82e8c:	dfc00217 	ldw	ra,8(sp)
   82e90:	dc400117 	ldw	r17,4(sp)
   82e94:	dc000017 	ldw	r16,0(sp)
   82e98:	dec00304 	addi	sp,sp,12
   82e9c:	f800283a 	ret
   82ea0:	80c00017 	ldw	r3,0(r16)
   82ea4:	183ff926 	beq	r3,zero,82e8c <_fstat_r+0x38>
   82ea8:	88c00015 	stw	r3,0(r17)
   82eac:	003ff706 	br	82e8c <_fstat_r+0x38>

00082eb0 <_isatty_r>:
   82eb0:	defffd04 	addi	sp,sp,-12
   82eb4:	dc000015 	stw	r16,0(sp)
   82eb8:	04000434 	movhi	r16,16
   82ebc:	dc400115 	stw	r17,4(sp)
   82ec0:	8406b104 	addi	r16,r16,6852
   82ec4:	2023883a 	mov	r17,r4
   82ec8:	2809883a 	mov	r4,r5
   82ecc:	dfc00215 	stw	ra,8(sp)
   82ed0:	80000015 	stw	zero,0(r16)
   82ed4:	00833500 	call	83350 <isatty>
   82ed8:	00ffffc4 	movi	r3,-1
   82edc:	10c00526 	beq	r2,r3,82ef4 <_isatty_r+0x44>
   82ee0:	dfc00217 	ldw	ra,8(sp)
   82ee4:	dc400117 	ldw	r17,4(sp)
   82ee8:	dc000017 	ldw	r16,0(sp)
   82eec:	dec00304 	addi	sp,sp,12
   82ef0:	f800283a 	ret
   82ef4:	80c00017 	ldw	r3,0(r16)
   82ef8:	183ff926 	beq	r3,zero,82ee0 <_isatty_r+0x30>
   82efc:	88c00015 	stw	r3,0(r17)
   82f00:	003ff706 	br	82ee0 <_isatty_r+0x30>

00082f04 <__divsi3>:
   82f04:	20001b16 	blt	r4,zero,82f74 <__divsi3+0x70>
   82f08:	000f883a 	mov	r7,zero
   82f0c:	28001616 	blt	r5,zero,82f68 <__divsi3+0x64>
   82f10:	200d883a 	mov	r6,r4
   82f14:	29001a2e 	bgeu	r5,r4,82f80 <__divsi3+0x7c>
   82f18:	00800804 	movi	r2,32
   82f1c:	00c00044 	movi	r3,1
   82f20:	00000106 	br	82f28 <__divsi3+0x24>
   82f24:	10000d26 	beq	r2,zero,82f5c <__divsi3+0x58>
   82f28:	294b883a 	add	r5,r5,r5
   82f2c:	10bfffc4 	addi	r2,r2,-1
   82f30:	18c7883a 	add	r3,r3,r3
   82f34:	293ffb36 	bltu	r5,r4,82f24 <__divsi3+0x20>
   82f38:	0005883a 	mov	r2,zero
   82f3c:	18000726 	beq	r3,zero,82f5c <__divsi3+0x58>
   82f40:	0005883a 	mov	r2,zero
   82f44:	31400236 	bltu	r6,r5,82f50 <__divsi3+0x4c>
   82f48:	314dc83a 	sub	r6,r6,r5
   82f4c:	10c4b03a 	or	r2,r2,r3
   82f50:	1806d07a 	srli	r3,r3,1
   82f54:	280ad07a 	srli	r5,r5,1
   82f58:	183ffa1e 	bne	r3,zero,82f44 <__divsi3+0x40>
   82f5c:	38000126 	beq	r7,zero,82f64 <__divsi3+0x60>
   82f60:	0085c83a 	sub	r2,zero,r2
   82f64:	f800283a 	ret
   82f68:	014bc83a 	sub	r5,zero,r5
   82f6c:	39c0005c 	xori	r7,r7,1
   82f70:	003fe706 	br	82f10 <__divsi3+0xc>
   82f74:	0109c83a 	sub	r4,zero,r4
   82f78:	01c00044 	movi	r7,1
   82f7c:	003fe306 	br	82f0c <__divsi3+0x8>
   82f80:	00c00044 	movi	r3,1
   82f84:	003fee06 	br	82f40 <__divsi3+0x3c>

00082f88 <__modsi3>:
   82f88:	20001716 	blt	r4,zero,82fe8 <__modsi3+0x60>
   82f8c:	000f883a 	mov	r7,zero
   82f90:	2005883a 	mov	r2,r4
   82f94:	28001216 	blt	r5,zero,82fe0 <__modsi3+0x58>
   82f98:	2900162e 	bgeu	r5,r4,82ff4 <__modsi3+0x6c>
   82f9c:	01800804 	movi	r6,32
   82fa0:	00c00044 	movi	r3,1
   82fa4:	00000106 	br	82fac <__modsi3+0x24>
   82fa8:	30000a26 	beq	r6,zero,82fd4 <__modsi3+0x4c>
   82fac:	294b883a 	add	r5,r5,r5
   82fb0:	31bfffc4 	addi	r6,r6,-1
   82fb4:	18c7883a 	add	r3,r3,r3
   82fb8:	293ffb36 	bltu	r5,r4,82fa8 <__modsi3+0x20>
   82fbc:	18000526 	beq	r3,zero,82fd4 <__modsi3+0x4c>
   82fc0:	1806d07a 	srli	r3,r3,1
   82fc4:	11400136 	bltu	r2,r5,82fcc <__modsi3+0x44>
   82fc8:	1145c83a 	sub	r2,r2,r5
   82fcc:	280ad07a 	srli	r5,r5,1
   82fd0:	183ffb1e 	bne	r3,zero,82fc0 <__modsi3+0x38>
   82fd4:	38000126 	beq	r7,zero,82fdc <__modsi3+0x54>
   82fd8:	0085c83a 	sub	r2,zero,r2
   82fdc:	f800283a 	ret
   82fe0:	014bc83a 	sub	r5,zero,r5
   82fe4:	003fec06 	br	82f98 <__modsi3+0x10>
   82fe8:	0109c83a 	sub	r4,zero,r4
   82fec:	01c00044 	movi	r7,1
   82ff0:	003fe706 	br	82f90 <__modsi3+0x8>
   82ff4:	00c00044 	movi	r3,1
   82ff8:	003ff106 	br	82fc0 <__modsi3+0x38>

00082ffc <__udivsi3>:
   82ffc:	200d883a 	mov	r6,r4
   83000:	2900152e 	bgeu	r5,r4,83058 <__udivsi3+0x5c>
   83004:	28001416 	blt	r5,zero,83058 <__udivsi3+0x5c>
   83008:	00800804 	movi	r2,32
   8300c:	00c00044 	movi	r3,1
   83010:	00000206 	br	8301c <__udivsi3+0x20>
   83014:	10000e26 	beq	r2,zero,83050 <__udivsi3+0x54>
   83018:	28000516 	blt	r5,zero,83030 <__udivsi3+0x34>
   8301c:	294b883a 	add	r5,r5,r5
   83020:	10bfffc4 	addi	r2,r2,-1
   83024:	18c7883a 	add	r3,r3,r3
   83028:	293ffa36 	bltu	r5,r4,83014 <__udivsi3+0x18>
   8302c:	18000826 	beq	r3,zero,83050 <__udivsi3+0x54>
   83030:	0005883a 	mov	r2,zero
   83034:	31400236 	bltu	r6,r5,83040 <__udivsi3+0x44>
   83038:	314dc83a 	sub	r6,r6,r5
   8303c:	10c4b03a 	or	r2,r2,r3
   83040:	1806d07a 	srli	r3,r3,1
   83044:	280ad07a 	srli	r5,r5,1
   83048:	183ffa1e 	bne	r3,zero,83034 <__udivsi3+0x38>
   8304c:	f800283a 	ret
   83050:	0005883a 	mov	r2,zero
   83054:	f800283a 	ret
   83058:	00c00044 	movi	r3,1
   8305c:	003ff406 	br	83030 <__udivsi3+0x34>

00083060 <__umodsi3>:
   83060:	2005883a 	mov	r2,r4
   83064:	2900122e 	bgeu	r5,r4,830b0 <__umodsi3+0x50>
   83068:	28001116 	blt	r5,zero,830b0 <__umodsi3+0x50>
   8306c:	01800804 	movi	r6,32
   83070:	00c00044 	movi	r3,1
   83074:	00000206 	br	83080 <__umodsi3+0x20>
   83078:	30000c26 	beq	r6,zero,830ac <__umodsi3+0x4c>
   8307c:	28000516 	blt	r5,zero,83094 <__umodsi3+0x34>
   83080:	294b883a 	add	r5,r5,r5
   83084:	31bfffc4 	addi	r6,r6,-1
   83088:	18c7883a 	add	r3,r3,r3
   8308c:	293ffa36 	bltu	r5,r4,83078 <__umodsi3+0x18>
   83090:	18000626 	beq	r3,zero,830ac <__umodsi3+0x4c>
   83094:	1806d07a 	srli	r3,r3,1
   83098:	11400136 	bltu	r2,r5,830a0 <__umodsi3+0x40>
   8309c:	1145c83a 	sub	r2,r2,r5
   830a0:	280ad07a 	srli	r5,r5,1
   830a4:	183ffb1e 	bne	r3,zero,83094 <__umodsi3+0x34>
   830a8:	f800283a 	ret
   830ac:	f800283a 	ret
   830b0:	00c00044 	movi	r3,1
   830b4:	003ff706 	br	83094 <__umodsi3+0x34>

000830b8 <__mulsi3>:
   830b8:	0005883a 	mov	r2,zero
   830bc:	20000726 	beq	r4,zero,830dc <__mulsi3+0x24>
   830c0:	20c0004c 	andi	r3,r4,1
   830c4:	2008d07a 	srli	r4,r4,1
   830c8:	18000126 	beq	r3,zero,830d0 <__mulsi3+0x18>
   830cc:	1145883a 	add	r2,r2,r5
   830d0:	294b883a 	add	r5,r5,r5
   830d4:	203ffa1e 	bne	r4,zero,830c0 <__mulsi3+0x8>
   830d8:	f800283a 	ret
   830dc:	f800283a 	ret

000830e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   830e0:	defffe04 	addi	sp,sp,-8
   830e4:	dfc00115 	stw	ra,4(sp)
   830e8:	df000015 	stw	fp,0(sp)
   830ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   830f0:	d0a00917 	ldw	r2,-32732(gp)
   830f4:	10000326 	beq	r2,zero,83104 <alt_get_errno+0x24>
   830f8:	d0a00917 	ldw	r2,-32732(gp)
   830fc:	103ee83a 	callr	r2
   83100:	00000106 	br	83108 <alt_get_errno+0x28>
   83104:	d0a01104 	addi	r2,gp,-32700
}
   83108:	e037883a 	mov	sp,fp
   8310c:	dfc00117 	ldw	ra,4(sp)
   83110:	df000017 	ldw	fp,0(sp)
   83114:	dec00204 	addi	sp,sp,8
   83118:	f800283a 	ret

0008311c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8311c:	defffb04 	addi	sp,sp,-20
   83120:	dfc00415 	stw	ra,16(sp)
   83124:	df000315 	stw	fp,12(sp)
   83128:	df000304 	addi	fp,sp,12
   8312c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   83130:	e0bfff17 	ldw	r2,-4(fp)
   83134:	10000816 	blt	r2,zero,83158 <close+0x3c>
   83138:	01400304 	movi	r5,12
   8313c:	e13fff17 	ldw	r4,-4(fp)
   83140:	00830b80 	call	830b8 <__mulsi3>
   83144:	1007883a 	mov	r3,r2
   83148:	00800434 	movhi	r2,16
   8314c:	10822804 	addi	r2,r2,2208
   83150:	1885883a 	add	r2,r3,r2
   83154:	00000106 	br	8315c <close+0x40>
   83158:	0005883a 	mov	r2,zero
   8315c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   83160:	e0bffd17 	ldw	r2,-12(fp)
   83164:	10001926 	beq	r2,zero,831cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   83168:	e0bffd17 	ldw	r2,-12(fp)
   8316c:	10800017 	ldw	r2,0(r2)
   83170:	10800417 	ldw	r2,16(r2)
   83174:	10000626 	beq	r2,zero,83190 <close+0x74>
   83178:	e0bffd17 	ldw	r2,-12(fp)
   8317c:	10800017 	ldw	r2,0(r2)
   83180:	10800417 	ldw	r2,16(r2)
   83184:	e13ffd17 	ldw	r4,-12(fp)
   83188:	103ee83a 	callr	r2
   8318c:	00000106 	br	83194 <close+0x78>
   83190:	0005883a 	mov	r2,zero
   83194:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   83198:	e13fff17 	ldw	r4,-4(fp)
   8319c:	00838040 	call	83804 <alt_release_fd>
    if (rval < 0)
   831a0:	e0bffe17 	ldw	r2,-8(fp)
   831a4:	1000070e 	bge	r2,zero,831c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
   831a8:	00830e00 	call	830e0 <alt_get_errno>
   831ac:	1007883a 	mov	r3,r2
   831b0:	e0bffe17 	ldw	r2,-8(fp)
   831b4:	0085c83a 	sub	r2,zero,r2
   831b8:	18800015 	stw	r2,0(r3)
      return -1;
   831bc:	00bfffc4 	movi	r2,-1
   831c0:	00000706 	br	831e0 <close+0xc4>
    }
    return 0;
   831c4:	0005883a 	mov	r2,zero
   831c8:	00000506 	br	831e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   831cc:	00830e00 	call	830e0 <alt_get_errno>
   831d0:	1007883a 	mov	r3,r2
   831d4:	00801444 	movi	r2,81
   831d8:	18800015 	stw	r2,0(r3)
    return -1;
   831dc:	00bfffc4 	movi	r2,-1
  }
}
   831e0:	e037883a 	mov	sp,fp
   831e4:	dfc00117 	ldw	ra,4(sp)
   831e8:	df000017 	ldw	fp,0(sp)
   831ec:	dec00204 	addi	sp,sp,8
   831f0:	f800283a 	ret

000831f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   831f4:	defffc04 	addi	sp,sp,-16
   831f8:	df000315 	stw	fp,12(sp)
   831fc:	df000304 	addi	fp,sp,12
   83200:	e13ffd15 	stw	r4,-12(fp)
   83204:	e17ffe15 	stw	r5,-8(fp)
   83208:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8320c:	e0bfff17 	ldw	r2,-4(fp)
}
   83210:	e037883a 	mov	sp,fp
   83214:	df000017 	ldw	fp,0(sp)
   83218:	dec00104 	addi	sp,sp,4
   8321c:	f800283a 	ret

00083220 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83220:	defffe04 	addi	sp,sp,-8
   83224:	dfc00115 	stw	ra,4(sp)
   83228:	df000015 	stw	fp,0(sp)
   8322c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83230:	d0a00917 	ldw	r2,-32732(gp)
   83234:	10000326 	beq	r2,zero,83244 <alt_get_errno+0x24>
   83238:	d0a00917 	ldw	r2,-32732(gp)
   8323c:	103ee83a 	callr	r2
   83240:	00000106 	br	83248 <alt_get_errno+0x28>
   83244:	d0a01104 	addi	r2,gp,-32700
}
   83248:	e037883a 	mov	sp,fp
   8324c:	dfc00117 	ldw	ra,4(sp)
   83250:	df000017 	ldw	fp,0(sp)
   83254:	dec00204 	addi	sp,sp,8
   83258:	f800283a 	ret

0008325c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8325c:	defffb04 	addi	sp,sp,-20
   83260:	dfc00415 	stw	ra,16(sp)
   83264:	df000315 	stw	fp,12(sp)
   83268:	df000304 	addi	fp,sp,12
   8326c:	e13ffe15 	stw	r4,-8(fp)
   83270:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83274:	e0bffe17 	ldw	r2,-8(fp)
   83278:	10000816 	blt	r2,zero,8329c <fstat+0x40>
   8327c:	01400304 	movi	r5,12
   83280:	e13ffe17 	ldw	r4,-8(fp)
   83284:	00830b80 	call	830b8 <__mulsi3>
   83288:	1007883a 	mov	r3,r2
   8328c:	00800434 	movhi	r2,16
   83290:	10822804 	addi	r2,r2,2208
   83294:	1885883a 	add	r2,r3,r2
   83298:	00000106 	br	832a0 <fstat+0x44>
   8329c:	0005883a 	mov	r2,zero
   832a0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   832a4:	e0bffd17 	ldw	r2,-12(fp)
   832a8:	10001026 	beq	r2,zero,832ec <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   832ac:	e0bffd17 	ldw	r2,-12(fp)
   832b0:	10800017 	ldw	r2,0(r2)
   832b4:	10800817 	ldw	r2,32(r2)
   832b8:	10000726 	beq	r2,zero,832d8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   832bc:	e0bffd17 	ldw	r2,-12(fp)
   832c0:	10800017 	ldw	r2,0(r2)
   832c4:	10800817 	ldw	r2,32(r2)
   832c8:	e17fff17 	ldw	r5,-4(fp)
   832cc:	e13ffd17 	ldw	r4,-12(fp)
   832d0:	103ee83a 	callr	r2
   832d4:	00000a06 	br	83300 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   832d8:	e0bfff17 	ldw	r2,-4(fp)
   832dc:	00c80004 	movi	r3,8192
   832e0:	10c00115 	stw	r3,4(r2)
      return 0;
   832e4:	0005883a 	mov	r2,zero
   832e8:	00000506 	br	83300 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   832ec:	00832200 	call	83220 <alt_get_errno>
   832f0:	1007883a 	mov	r3,r2
   832f4:	00801444 	movi	r2,81
   832f8:	18800015 	stw	r2,0(r3)
    return -1;
   832fc:	00bfffc4 	movi	r2,-1
  }
}
   83300:	e037883a 	mov	sp,fp
   83304:	dfc00117 	ldw	ra,4(sp)
   83308:	df000017 	ldw	fp,0(sp)
   8330c:	dec00204 	addi	sp,sp,8
   83310:	f800283a 	ret

00083314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83314:	defffe04 	addi	sp,sp,-8
   83318:	dfc00115 	stw	ra,4(sp)
   8331c:	df000015 	stw	fp,0(sp)
   83320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83324:	d0a00917 	ldw	r2,-32732(gp)
   83328:	10000326 	beq	r2,zero,83338 <alt_get_errno+0x24>
   8332c:	d0a00917 	ldw	r2,-32732(gp)
   83330:	103ee83a 	callr	r2
   83334:	00000106 	br	8333c <alt_get_errno+0x28>
   83338:	d0a01104 	addi	r2,gp,-32700
}
   8333c:	e037883a 	mov	sp,fp
   83340:	dfc00117 	ldw	ra,4(sp)
   83344:	df000017 	ldw	fp,0(sp)
   83348:	dec00204 	addi	sp,sp,8
   8334c:	f800283a 	ret

00083350 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   83350:	deffed04 	addi	sp,sp,-76
   83354:	dfc01215 	stw	ra,72(sp)
   83358:	df001115 	stw	fp,68(sp)
   8335c:	df001104 	addi	fp,sp,68
   83360:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83364:	e0bfff17 	ldw	r2,-4(fp)
   83368:	10000816 	blt	r2,zero,8338c <isatty+0x3c>
   8336c:	01400304 	movi	r5,12
   83370:	e13fff17 	ldw	r4,-4(fp)
   83374:	00830b80 	call	830b8 <__mulsi3>
   83378:	1007883a 	mov	r3,r2
   8337c:	00800434 	movhi	r2,16
   83380:	10822804 	addi	r2,r2,2208
   83384:	1885883a 	add	r2,r3,r2
   83388:	00000106 	br	83390 <isatty+0x40>
   8338c:	0005883a 	mov	r2,zero
   83390:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   83394:	e0bfef17 	ldw	r2,-68(fp)
   83398:	10000e26 	beq	r2,zero,833d4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8339c:	e0bfef17 	ldw	r2,-68(fp)
   833a0:	10800017 	ldw	r2,0(r2)
   833a4:	10800817 	ldw	r2,32(r2)
   833a8:	1000021e 	bne	r2,zero,833b4 <isatty+0x64>
    {
      return 1;
   833ac:	00800044 	movi	r2,1
   833b0:	00000d06 	br	833e8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   833b4:	e0bff004 	addi	r2,fp,-64
   833b8:	100b883a 	mov	r5,r2
   833bc:	e13fff17 	ldw	r4,-4(fp)
   833c0:	008325c0 	call	8325c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   833c4:	e0bff117 	ldw	r2,-60(fp)
   833c8:	10880020 	cmpeqi	r2,r2,8192
   833cc:	10803fcc 	andi	r2,r2,255
   833d0:	00000506 	br	833e8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   833d4:	00833140 	call	83314 <alt_get_errno>
   833d8:	1007883a 	mov	r3,r2
   833dc:	00801444 	movi	r2,81
   833e0:	18800015 	stw	r2,0(r3)
    return 0;
   833e4:	0005883a 	mov	r2,zero
  }
}
   833e8:	e037883a 	mov	sp,fp
   833ec:	dfc00117 	ldw	ra,4(sp)
   833f0:	df000017 	ldw	fp,0(sp)
   833f4:	dec00204 	addi	sp,sp,8
   833f8:	f800283a 	ret

000833fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   833fc:	defffc04 	addi	sp,sp,-16
   83400:	df000315 	stw	fp,12(sp)
   83404:	df000304 	addi	fp,sp,12
   83408:	e13ffd15 	stw	r4,-12(fp)
   8340c:	e17ffe15 	stw	r5,-8(fp)
   83410:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   83414:	e0fffe17 	ldw	r3,-8(fp)
   83418:	e0bffd17 	ldw	r2,-12(fp)
   8341c:	18800c26 	beq	r3,r2,83450 <alt_load_section+0x54>
  {
    while( to != end )
   83420:	00000806 	br	83444 <alt_load_section+0x48>
    {
      *to++ = *from++;
   83424:	e0bffe17 	ldw	r2,-8(fp)
   83428:	10c00104 	addi	r3,r2,4
   8342c:	e0fffe15 	stw	r3,-8(fp)
   83430:	e0fffd17 	ldw	r3,-12(fp)
   83434:	19000104 	addi	r4,r3,4
   83438:	e13ffd15 	stw	r4,-12(fp)
   8343c:	18c00017 	ldw	r3,0(r3)
   83440:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   83444:	e0fffe17 	ldw	r3,-8(fp)
   83448:	e0bfff17 	ldw	r2,-4(fp)
   8344c:	18bff51e 	bne	r3,r2,83424 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   83450:	0001883a 	nop
   83454:	e037883a 	mov	sp,fp
   83458:	df000017 	ldw	fp,0(sp)
   8345c:	dec00104 	addi	sp,sp,4
   83460:	f800283a 	ret

00083464 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   83464:	defffe04 	addi	sp,sp,-8
   83468:	dfc00115 	stw	ra,4(sp)
   8346c:	df000015 	stw	fp,0(sp)
   83470:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   83474:	01800434 	movhi	r6,16
   83478:	3186ae04 	addi	r6,r6,6840
   8347c:	01400434 	movhi	r5,16
   83480:	29401304 	addi	r5,r5,76
   83484:	01000234 	movhi	r4,8
   83488:	21163f04 	addi	r4,r4,22780
   8348c:	00833fc0 	call	833fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   83490:	01800234 	movhi	r6,8
   83494:	31808c04 	addi	r6,r6,560
   83498:	01400234 	movhi	r5,8
   8349c:	29400804 	addi	r5,r5,32
   834a0:	01000234 	movhi	r4,8
   834a4:	21000804 	addi	r4,r4,32
   834a8:	00833fc0 	call	833fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   834ac:	01800434 	movhi	r6,16
   834b0:	31801304 	addi	r6,r6,76
   834b4:	01400434 	movhi	r5,16
   834b8:	29400004 	addi	r5,r5,0
   834bc:	01000434 	movhi	r4,16
   834c0:	21000004 	addi	r4,r4,0
   834c4:	00833fc0 	call	833fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   834c8:	00848440 	call	84844 <alt_dcache_flush_all>
  alt_icache_flush_all();
   834cc:	0084a040 	call	84a04 <alt_icache_flush_all>
}
   834d0:	0001883a 	nop
   834d4:	e037883a 	mov	sp,fp
   834d8:	dfc00117 	ldw	ra,4(sp)
   834dc:	df000017 	ldw	fp,0(sp)
   834e0:	dec00204 	addi	sp,sp,8
   834e4:	f800283a 	ret

000834e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   834e8:	defffe04 	addi	sp,sp,-8
   834ec:	dfc00115 	stw	ra,4(sp)
   834f0:	df000015 	stw	fp,0(sp)
   834f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   834f8:	d0a00917 	ldw	r2,-32732(gp)
   834fc:	10000326 	beq	r2,zero,8350c <alt_get_errno+0x24>
   83500:	d0a00917 	ldw	r2,-32732(gp)
   83504:	103ee83a 	callr	r2
   83508:	00000106 	br	83510 <alt_get_errno+0x28>
   8350c:	d0a01104 	addi	r2,gp,-32700
}
   83510:	e037883a 	mov	sp,fp
   83514:	dfc00117 	ldw	ra,4(sp)
   83518:	df000017 	ldw	fp,0(sp)
   8351c:	dec00204 	addi	sp,sp,8
   83520:	f800283a 	ret

00083524 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   83524:	defff904 	addi	sp,sp,-28
   83528:	dfc00615 	stw	ra,24(sp)
   8352c:	df000515 	stw	fp,20(sp)
   83530:	df000504 	addi	fp,sp,20
   83534:	e13ffd15 	stw	r4,-12(fp)
   83538:	e17ffe15 	stw	r5,-8(fp)
   8353c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   83540:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   83544:	e0bffd17 	ldw	r2,-12(fp)
   83548:	10000816 	blt	r2,zero,8356c <lseek+0x48>
   8354c:	01400304 	movi	r5,12
   83550:	e13ffd17 	ldw	r4,-12(fp)
   83554:	00830b80 	call	830b8 <__mulsi3>
   83558:	1007883a 	mov	r3,r2
   8355c:	00800434 	movhi	r2,16
   83560:	10822804 	addi	r2,r2,2208
   83564:	1885883a 	add	r2,r3,r2
   83568:	00000106 	br	83570 <lseek+0x4c>
   8356c:	0005883a 	mov	r2,zero
   83570:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   83574:	e0bffc17 	ldw	r2,-16(fp)
   83578:	10001026 	beq	r2,zero,835bc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8357c:	e0bffc17 	ldw	r2,-16(fp)
   83580:	10800017 	ldw	r2,0(r2)
   83584:	10800717 	ldw	r2,28(r2)
   83588:	10000926 	beq	r2,zero,835b0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8358c:	e0bffc17 	ldw	r2,-16(fp)
   83590:	10800017 	ldw	r2,0(r2)
   83594:	10800717 	ldw	r2,28(r2)
   83598:	e1bfff17 	ldw	r6,-4(fp)
   8359c:	e17ffe17 	ldw	r5,-8(fp)
   835a0:	e13ffc17 	ldw	r4,-16(fp)
   835a4:	103ee83a 	callr	r2
   835a8:	e0bffb15 	stw	r2,-20(fp)
   835ac:	00000506 	br	835c4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   835b0:	00bfde84 	movi	r2,-134
   835b4:	e0bffb15 	stw	r2,-20(fp)
   835b8:	00000206 	br	835c4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   835bc:	00bfebc4 	movi	r2,-81
   835c0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   835c4:	e0bffb17 	ldw	r2,-20(fp)
   835c8:	1000070e 	bge	r2,zero,835e8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   835cc:	00834e80 	call	834e8 <alt_get_errno>
   835d0:	1007883a 	mov	r3,r2
   835d4:	e0bffb17 	ldw	r2,-20(fp)
   835d8:	0085c83a 	sub	r2,zero,r2
   835dc:	18800015 	stw	r2,0(r3)
    rc = -1;
   835e0:	00bfffc4 	movi	r2,-1
   835e4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   835e8:	e0bffb17 	ldw	r2,-20(fp)
}
   835ec:	e037883a 	mov	sp,fp
   835f0:	dfc00117 	ldw	ra,4(sp)
   835f4:	df000017 	ldw	fp,0(sp)
   835f8:	dec00204 	addi	sp,sp,8
   835fc:	f800283a 	ret

00083600 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   83600:	defffd04 	addi	sp,sp,-12
   83604:	dfc00215 	stw	ra,8(sp)
   83608:	df000115 	stw	fp,4(sp)
   8360c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   83610:	0009883a 	mov	r4,zero
   83614:	0083ad80 	call	83ad8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   83618:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8361c:	0083b100 	call	83b10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   83620:	01800434 	movhi	r6,16
   83624:	31800904 	addi	r6,r6,36
   83628:	01400434 	movhi	r5,16
   8362c:	29400904 	addi	r5,r5,36
   83630:	01000434 	movhi	r4,16
   83634:	21000904 	addi	r4,r4,36
   83638:	0084da80 	call	84da8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8363c:	00849440 	call	84944 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   83640:	01000234 	movhi	r4,8
   83644:	21126904 	addi	r4,r4,18852
   83648:	00855680 	call	85568 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8364c:	d0a01217 	ldw	r2,-32696(gp)
   83650:	d0e01317 	ldw	r3,-32692(gp)
   83654:	d1201417 	ldw	r4,-32688(gp)
   83658:	200d883a 	mov	r6,r4
   8365c:	180b883a 	mov	r5,r3
   83660:	1009883a 	mov	r4,r2
   83664:	008026c0 	call	8026c <main>
   83668:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8366c:	01000044 	movi	r4,1
   83670:	008311c0 	call	8311c <close>
  exit (result);
   83674:	e13fff17 	ldw	r4,-4(fp)
   83678:	008557c0 	call	8557c <exit>

0008367c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8367c:	defffe04 	addi	sp,sp,-8
   83680:	df000115 	stw	fp,4(sp)
   83684:	df000104 	addi	fp,sp,4
   83688:	e13fff15 	stw	r4,-4(fp)
}
   8368c:	0001883a 	nop
   83690:	e037883a 	mov	sp,fp
   83694:	df000017 	ldw	fp,0(sp)
   83698:	dec00104 	addi	sp,sp,4
   8369c:	f800283a 	ret

000836a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   836a0:	defffe04 	addi	sp,sp,-8
   836a4:	df000115 	stw	fp,4(sp)
   836a8:	df000104 	addi	fp,sp,4
   836ac:	e13fff15 	stw	r4,-4(fp)
}
   836b0:	0001883a 	nop
   836b4:	e037883a 	mov	sp,fp
   836b8:	df000017 	ldw	fp,0(sp)
   836bc:	dec00104 	addi	sp,sp,4
   836c0:	f800283a 	ret

000836c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   836c4:	defffe04 	addi	sp,sp,-8
   836c8:	dfc00115 	stw	ra,4(sp)
   836cc:	df000015 	stw	fp,0(sp)
   836d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   836d4:	d0a00917 	ldw	r2,-32732(gp)
   836d8:	10000326 	beq	r2,zero,836e8 <alt_get_errno+0x24>
   836dc:	d0a00917 	ldw	r2,-32732(gp)
   836e0:	103ee83a 	callr	r2
   836e4:	00000106 	br	836ec <alt_get_errno+0x28>
   836e8:	d0a01104 	addi	r2,gp,-32700
}
   836ec:	e037883a 	mov	sp,fp
   836f0:	dfc00117 	ldw	ra,4(sp)
   836f4:	df000017 	ldw	fp,0(sp)
   836f8:	dec00204 	addi	sp,sp,8
   836fc:	f800283a 	ret

00083700 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   83700:	defff904 	addi	sp,sp,-28
   83704:	dfc00615 	stw	ra,24(sp)
   83708:	df000515 	stw	fp,20(sp)
   8370c:	df000504 	addi	fp,sp,20
   83710:	e13ffd15 	stw	r4,-12(fp)
   83714:	e17ffe15 	stw	r5,-8(fp)
   83718:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8371c:	e0bffd17 	ldw	r2,-12(fp)
   83720:	10000816 	blt	r2,zero,83744 <read+0x44>
   83724:	01400304 	movi	r5,12
   83728:	e13ffd17 	ldw	r4,-12(fp)
   8372c:	00830b80 	call	830b8 <__mulsi3>
   83730:	1007883a 	mov	r3,r2
   83734:	00800434 	movhi	r2,16
   83738:	10822804 	addi	r2,r2,2208
   8373c:	1885883a 	add	r2,r3,r2
   83740:	00000106 	br	83748 <read+0x48>
   83744:	0005883a 	mov	r2,zero
   83748:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8374c:	e0bffb17 	ldw	r2,-20(fp)
   83750:	10002226 	beq	r2,zero,837dc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83754:	e0bffb17 	ldw	r2,-20(fp)
   83758:	10800217 	ldw	r2,8(r2)
   8375c:	108000cc 	andi	r2,r2,3
   83760:	10800060 	cmpeqi	r2,r2,1
   83764:	1000181e 	bne	r2,zero,837c8 <read+0xc8>
        (fd->dev->read))
   83768:	e0bffb17 	ldw	r2,-20(fp)
   8376c:	10800017 	ldw	r2,0(r2)
   83770:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   83774:	10001426 	beq	r2,zero,837c8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   83778:	e0bffb17 	ldw	r2,-20(fp)
   8377c:	10800017 	ldw	r2,0(r2)
   83780:	10800517 	ldw	r2,20(r2)
   83784:	e0ffff17 	ldw	r3,-4(fp)
   83788:	180d883a 	mov	r6,r3
   8378c:	e17ffe17 	ldw	r5,-8(fp)
   83790:	e13ffb17 	ldw	r4,-20(fp)
   83794:	103ee83a 	callr	r2
   83798:	e0bffc15 	stw	r2,-16(fp)
   8379c:	e0bffc17 	ldw	r2,-16(fp)
   837a0:	1000070e 	bge	r2,zero,837c0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   837a4:	00836c40 	call	836c4 <alt_get_errno>
   837a8:	1007883a 	mov	r3,r2
   837ac:	e0bffc17 	ldw	r2,-16(fp)
   837b0:	0085c83a 	sub	r2,zero,r2
   837b4:	18800015 	stw	r2,0(r3)
          return -1;
   837b8:	00bfffc4 	movi	r2,-1
   837bc:	00000c06 	br	837f0 <read+0xf0>
        }
        return rval;
   837c0:	e0bffc17 	ldw	r2,-16(fp)
   837c4:	00000a06 	br	837f0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   837c8:	00836c40 	call	836c4 <alt_get_errno>
   837cc:	1007883a 	mov	r3,r2
   837d0:	00800344 	movi	r2,13
   837d4:	18800015 	stw	r2,0(r3)
   837d8:	00000406 	br	837ec <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   837dc:	00836c40 	call	836c4 <alt_get_errno>
   837e0:	1007883a 	mov	r3,r2
   837e4:	00801444 	movi	r2,81
   837e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   837ec:	00bfffc4 	movi	r2,-1
}
   837f0:	e037883a 	mov	sp,fp
   837f4:	dfc00117 	ldw	ra,4(sp)
   837f8:	df000017 	ldw	fp,0(sp)
   837fc:	dec00204 	addi	sp,sp,8
   83800:	f800283a 	ret

00083804 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   83804:	defffc04 	addi	sp,sp,-16
   83808:	dfc00315 	stw	ra,12(sp)
   8380c:	df000215 	stw	fp,8(sp)
   83810:	dc000115 	stw	r16,4(sp)
   83814:	df000204 	addi	fp,sp,8
   83818:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   8381c:	e0bffe17 	ldw	r2,-8(fp)
   83820:	108000d0 	cmplti	r2,r2,3
   83824:	1000111e 	bne	r2,zero,8386c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   83828:	04000434 	movhi	r16,16
   8382c:	84022804 	addi	r16,r16,2208
   83830:	e0bffe17 	ldw	r2,-8(fp)
   83834:	01400304 	movi	r5,12
   83838:	1009883a 	mov	r4,r2
   8383c:	00830b80 	call	830b8 <__mulsi3>
   83840:	8085883a 	add	r2,r16,r2
   83844:	10800204 	addi	r2,r2,8
   83848:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8384c:	04000434 	movhi	r16,16
   83850:	84022804 	addi	r16,r16,2208
   83854:	e0bffe17 	ldw	r2,-8(fp)
   83858:	01400304 	movi	r5,12
   8385c:	1009883a 	mov	r4,r2
   83860:	00830b80 	call	830b8 <__mulsi3>
   83864:	8085883a 	add	r2,r16,r2
   83868:	10000015 	stw	zero,0(r2)
  }
}
   8386c:	0001883a 	nop
   83870:	e6ffff04 	addi	sp,fp,-4
   83874:	dfc00217 	ldw	ra,8(sp)
   83878:	df000117 	ldw	fp,4(sp)
   8387c:	dc000017 	ldw	r16,0(sp)
   83880:	dec00304 	addi	sp,sp,12
   83884:	f800283a 	ret

00083888 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   83888:	defff904 	addi	sp,sp,-28
   8388c:	df000615 	stw	fp,24(sp)
   83890:	df000604 	addi	fp,sp,24
   83894:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   83898:	0005303a 	rdctl	r2,status
   8389c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   838a0:	e0fffe17 	ldw	r3,-8(fp)
   838a4:	00bfff84 	movi	r2,-2
   838a8:	1884703a 	and	r2,r3,r2
   838ac:	1001703a 	wrctl	status,r2
  
  return context;
   838b0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   838b4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   838b8:	d0a00a17 	ldw	r2,-32728(gp)
   838bc:	10c000c4 	addi	r3,r2,3
   838c0:	00bfff04 	movi	r2,-4
   838c4:	1884703a 	and	r2,r3,r2
   838c8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   838cc:	d0e00a17 	ldw	r3,-32728(gp)
   838d0:	e0bfff17 	ldw	r2,-4(fp)
   838d4:	1887883a 	add	r3,r3,r2
   838d8:	00800474 	movhi	r2,17
   838dc:	109a9804 	addi	r2,r2,27232
   838e0:	10c0062e 	bgeu	r2,r3,838fc <sbrk+0x74>
   838e4:	e0bffb17 	ldw	r2,-20(fp)
   838e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   838ec:	e0bffa17 	ldw	r2,-24(fp)
   838f0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   838f4:	00bfffc4 	movi	r2,-1
   838f8:	00000b06 	br	83928 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   838fc:	d0a00a17 	ldw	r2,-32728(gp)
   83900:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   83904:	d0e00a17 	ldw	r3,-32728(gp)
   83908:	e0bfff17 	ldw	r2,-4(fp)
   8390c:	1885883a 	add	r2,r3,r2
   83910:	d0a00a15 	stw	r2,-32728(gp)
   83914:	e0bffb17 	ldw	r2,-20(fp)
   83918:	e0bffc15 	stw	r2,-16(fp)
   8391c:	e0bffc17 	ldw	r2,-16(fp)
   83920:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   83924:	e0bffd17 	ldw	r2,-12(fp)
} 
   83928:	e037883a 	mov	sp,fp
   8392c:	df000017 	ldw	fp,0(sp)
   83930:	dec00104 	addi	sp,sp,4
   83934:	f800283a 	ret

00083938 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   83938:	defffd04 	addi	sp,sp,-12
   8393c:	dfc00215 	stw	ra,8(sp)
   83940:	df000115 	stw	fp,4(sp)
   83944:	df000104 	addi	fp,sp,4
   83948:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8394c:	e13fff17 	ldw	r4,-4(fp)
   83950:	00846ec0 	call	846ec <alt_busy_sleep>
}
   83954:	e037883a 	mov	sp,fp
   83958:	dfc00117 	ldw	ra,4(sp)
   8395c:	df000017 	ldw	fp,0(sp)
   83960:	dec00204 	addi	sp,sp,8
   83964:	f800283a 	ret

00083968 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   83968:	defffe04 	addi	sp,sp,-8
   8396c:	dfc00115 	stw	ra,4(sp)
   83970:	df000015 	stw	fp,0(sp)
   83974:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   83978:	d0a00917 	ldw	r2,-32732(gp)
   8397c:	10000326 	beq	r2,zero,8398c <alt_get_errno+0x24>
   83980:	d0a00917 	ldw	r2,-32732(gp)
   83984:	103ee83a 	callr	r2
   83988:	00000106 	br	83990 <alt_get_errno+0x28>
   8398c:	d0a01104 	addi	r2,gp,-32700
}
   83990:	e037883a 	mov	sp,fp
   83994:	dfc00117 	ldw	ra,4(sp)
   83998:	df000017 	ldw	fp,0(sp)
   8399c:	dec00204 	addi	sp,sp,8
   839a0:	f800283a 	ret

000839a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   839a4:	defff904 	addi	sp,sp,-28
   839a8:	dfc00615 	stw	ra,24(sp)
   839ac:	df000515 	stw	fp,20(sp)
   839b0:	df000504 	addi	fp,sp,20
   839b4:	e13ffd15 	stw	r4,-12(fp)
   839b8:	e17ffe15 	stw	r5,-8(fp)
   839bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   839c0:	e0bffd17 	ldw	r2,-12(fp)
   839c4:	10000816 	blt	r2,zero,839e8 <write+0x44>
   839c8:	01400304 	movi	r5,12
   839cc:	e13ffd17 	ldw	r4,-12(fp)
   839d0:	00830b80 	call	830b8 <__mulsi3>
   839d4:	1007883a 	mov	r3,r2
   839d8:	00800434 	movhi	r2,16
   839dc:	10822804 	addi	r2,r2,2208
   839e0:	1885883a 	add	r2,r3,r2
   839e4:	00000106 	br	839ec <write+0x48>
   839e8:	0005883a 	mov	r2,zero
   839ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   839f0:	e0bffb17 	ldw	r2,-20(fp)
   839f4:	10002126 	beq	r2,zero,83a7c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   839f8:	e0bffb17 	ldw	r2,-20(fp)
   839fc:	10800217 	ldw	r2,8(r2)
   83a00:	108000cc 	andi	r2,r2,3
   83a04:	10001826 	beq	r2,zero,83a68 <write+0xc4>
   83a08:	e0bffb17 	ldw	r2,-20(fp)
   83a0c:	10800017 	ldw	r2,0(r2)
   83a10:	10800617 	ldw	r2,24(r2)
   83a14:	10001426 	beq	r2,zero,83a68 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   83a18:	e0bffb17 	ldw	r2,-20(fp)
   83a1c:	10800017 	ldw	r2,0(r2)
   83a20:	10800617 	ldw	r2,24(r2)
   83a24:	e0ffff17 	ldw	r3,-4(fp)
   83a28:	180d883a 	mov	r6,r3
   83a2c:	e17ffe17 	ldw	r5,-8(fp)
   83a30:	e13ffb17 	ldw	r4,-20(fp)
   83a34:	103ee83a 	callr	r2
   83a38:	e0bffc15 	stw	r2,-16(fp)
   83a3c:	e0bffc17 	ldw	r2,-16(fp)
   83a40:	1000070e 	bge	r2,zero,83a60 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   83a44:	00839680 	call	83968 <alt_get_errno>
   83a48:	1007883a 	mov	r3,r2
   83a4c:	e0bffc17 	ldw	r2,-16(fp)
   83a50:	0085c83a 	sub	r2,zero,r2
   83a54:	18800015 	stw	r2,0(r3)
        return -1;
   83a58:	00bfffc4 	movi	r2,-1
   83a5c:	00000c06 	br	83a90 <write+0xec>
      }
      return rval;
   83a60:	e0bffc17 	ldw	r2,-16(fp)
   83a64:	00000a06 	br	83a90 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   83a68:	00839680 	call	83968 <alt_get_errno>
   83a6c:	1007883a 	mov	r3,r2
   83a70:	00800344 	movi	r2,13
   83a74:	18800015 	stw	r2,0(r3)
   83a78:	00000406 	br	83a8c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   83a7c:	00839680 	call	83968 <alt_get_errno>
   83a80:	1007883a 	mov	r3,r2
   83a84:	00801444 	movi	r2,81
   83a88:	18800015 	stw	r2,0(r3)
  }
  return -1;
   83a8c:	00bfffc4 	movi	r2,-1
}
   83a90:	e037883a 	mov	sp,fp
   83a94:	dfc00117 	ldw	ra,4(sp)
   83a98:	df000017 	ldw	fp,0(sp)
   83a9c:	dec00204 	addi	sp,sp,8
   83aa0:	f800283a 	ret

00083aa4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   83aa4:	defffd04 	addi	sp,sp,-12
   83aa8:	dfc00215 	stw	ra,8(sp)
   83aac:	df000115 	stw	fp,4(sp)
   83ab0:	df000104 	addi	fp,sp,4
   83ab4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   83ab8:	d1600604 	addi	r5,gp,-32744
   83abc:	e13fff17 	ldw	r4,-4(fp)
   83ac0:	00848a00 	call	848a0 <alt_dev_llist_insert>
}
   83ac4:	e037883a 	mov	sp,fp
   83ac8:	dfc00117 	ldw	ra,4(sp)
   83acc:	df000017 	ldw	fp,0(sp)
   83ad0:	dec00204 	addi	sp,sp,8
   83ad4:	f800283a 	ret

00083ad8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   83ad8:	defffd04 	addi	sp,sp,-12
   83adc:	dfc00215 	stw	ra,8(sp)
   83ae0:	df000115 	stw	fp,4(sp)
   83ae4:	df000104 	addi	fp,sp,4
   83ae8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   83aec:	008524c0 	call	8524c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   83af0:	00800044 	movi	r2,1
   83af4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   83af8:	0001883a 	nop
   83afc:	e037883a 	mov	sp,fp
   83b00:	dfc00117 	ldw	ra,4(sp)
   83b04:	df000017 	ldw	fp,0(sp)
   83b08:	dec00204 	addi	sp,sp,8
   83b0c:	f800283a 	ret

00083b10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   83b10:	defffe04 	addi	sp,sp,-8
   83b14:	dfc00115 	stw	ra,4(sp)
   83b18:	df000015 	stw	fp,0(sp)
   83b1c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   83b20:	000d883a 	mov	r6,zero
   83b24:	000b883a 	mov	r5,zero
   83b28:	01000434 	movhi	r4,16
   83b2c:	21029204 	addi	r4,r4,2632
   83b30:	0083cbc0 	call	83cbc <altera_avalon_jtag_uart_init>
   83b34:	01000434 	movhi	r4,16
   83b38:	21028804 	addi	r4,r4,2592
   83b3c:	0083aa40 	call	83aa4 <alt_dev_reg>
}
   83b40:	0001883a 	nop
   83b44:	e037883a 	mov	sp,fp
   83b48:	dfc00117 	ldw	ra,4(sp)
   83b4c:	df000017 	ldw	fp,0(sp)
   83b50:	dec00204 	addi	sp,sp,8
   83b54:	f800283a 	ret

00083b58 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   83b58:	defffa04 	addi	sp,sp,-24
   83b5c:	dfc00515 	stw	ra,20(sp)
   83b60:	df000415 	stw	fp,16(sp)
   83b64:	df000404 	addi	fp,sp,16
   83b68:	e13ffd15 	stw	r4,-12(fp)
   83b6c:	e17ffe15 	stw	r5,-8(fp)
   83b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83b74:	e0bffd17 	ldw	r2,-12(fp)
   83b78:	10800017 	ldw	r2,0(r2)
   83b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   83b80:	e0bffc17 	ldw	r2,-16(fp)
   83b84:	10c00a04 	addi	r3,r2,40
   83b88:	e0bffd17 	ldw	r2,-12(fp)
   83b8c:	10800217 	ldw	r2,8(r2)
   83b90:	100f883a 	mov	r7,r2
   83b94:	e1bfff17 	ldw	r6,-4(fp)
   83b98:	e17ffe17 	ldw	r5,-8(fp)
   83b9c:	1809883a 	mov	r4,r3
   83ba0:	00841800 	call	84180 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   83ba4:	e037883a 	mov	sp,fp
   83ba8:	dfc00117 	ldw	ra,4(sp)
   83bac:	df000017 	ldw	fp,0(sp)
   83bb0:	dec00204 	addi	sp,sp,8
   83bb4:	f800283a 	ret

00083bb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   83bb8:	defffa04 	addi	sp,sp,-24
   83bbc:	dfc00515 	stw	ra,20(sp)
   83bc0:	df000415 	stw	fp,16(sp)
   83bc4:	df000404 	addi	fp,sp,16
   83bc8:	e13ffd15 	stw	r4,-12(fp)
   83bcc:	e17ffe15 	stw	r5,-8(fp)
   83bd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83bd4:	e0bffd17 	ldw	r2,-12(fp)
   83bd8:	10800017 	ldw	r2,0(r2)
   83bdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   83be0:	e0bffc17 	ldw	r2,-16(fp)
   83be4:	10c00a04 	addi	r3,r2,40
   83be8:	e0bffd17 	ldw	r2,-12(fp)
   83bec:	10800217 	ldw	r2,8(r2)
   83bf0:	100f883a 	mov	r7,r2
   83bf4:	e1bfff17 	ldw	r6,-4(fp)
   83bf8:	e17ffe17 	ldw	r5,-8(fp)
   83bfc:	1809883a 	mov	r4,r3
   83c00:	008439c0 	call	8439c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   83c04:	e037883a 	mov	sp,fp
   83c08:	dfc00117 	ldw	ra,4(sp)
   83c0c:	df000017 	ldw	fp,0(sp)
   83c10:	dec00204 	addi	sp,sp,8
   83c14:	f800283a 	ret

00083c18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   83c18:	defffc04 	addi	sp,sp,-16
   83c1c:	dfc00315 	stw	ra,12(sp)
   83c20:	df000215 	stw	fp,8(sp)
   83c24:	df000204 	addi	fp,sp,8
   83c28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   83c2c:	e0bfff17 	ldw	r2,-4(fp)
   83c30:	10800017 	ldw	r2,0(r2)
   83c34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   83c38:	e0bffe17 	ldw	r2,-8(fp)
   83c3c:	10c00a04 	addi	r3,r2,40
   83c40:	e0bfff17 	ldw	r2,-4(fp)
   83c44:	10800217 	ldw	r2,8(r2)
   83c48:	100b883a 	mov	r5,r2
   83c4c:	1809883a 	mov	r4,r3
   83c50:	00840280 	call	84028 <altera_avalon_jtag_uart_close>
}
   83c54:	e037883a 	mov	sp,fp
   83c58:	dfc00117 	ldw	ra,4(sp)
   83c5c:	df000017 	ldw	fp,0(sp)
   83c60:	dec00204 	addi	sp,sp,8
   83c64:	f800283a 	ret

00083c68 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   83c68:	defffa04 	addi	sp,sp,-24
   83c6c:	dfc00515 	stw	ra,20(sp)
   83c70:	df000415 	stw	fp,16(sp)
   83c74:	df000404 	addi	fp,sp,16
   83c78:	e13ffd15 	stw	r4,-12(fp)
   83c7c:	e17ffe15 	stw	r5,-8(fp)
   83c80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   83c84:	e0bffd17 	ldw	r2,-12(fp)
   83c88:	10800017 	ldw	r2,0(r2)
   83c8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   83c90:	e0bffc17 	ldw	r2,-16(fp)
   83c94:	10800a04 	addi	r2,r2,40
   83c98:	e1bfff17 	ldw	r6,-4(fp)
   83c9c:	e17ffe17 	ldw	r5,-8(fp)
   83ca0:	1009883a 	mov	r4,r2
   83ca4:	00840900 	call	84090 <altera_avalon_jtag_uart_ioctl>
}
   83ca8:	e037883a 	mov	sp,fp
   83cac:	dfc00117 	ldw	ra,4(sp)
   83cb0:	df000017 	ldw	fp,0(sp)
   83cb4:	dec00204 	addi	sp,sp,8
   83cb8:	f800283a 	ret

00083cbc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   83cbc:	defffa04 	addi	sp,sp,-24
   83cc0:	dfc00515 	stw	ra,20(sp)
   83cc4:	df000415 	stw	fp,16(sp)
   83cc8:	df000404 	addi	fp,sp,16
   83ccc:	e13ffd15 	stw	r4,-12(fp)
   83cd0:	e17ffe15 	stw	r5,-8(fp)
   83cd4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83cd8:	e0bffd17 	ldw	r2,-12(fp)
   83cdc:	00c00044 	movi	r3,1
   83ce0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   83ce4:	e0bffd17 	ldw	r2,-12(fp)
   83ce8:	10800017 	ldw	r2,0(r2)
   83cec:	10800104 	addi	r2,r2,4
   83cf0:	1007883a 	mov	r3,r2
   83cf4:	e0bffd17 	ldw	r2,-12(fp)
   83cf8:	10800817 	ldw	r2,32(r2)
   83cfc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   83d00:	e0bffe17 	ldw	r2,-8(fp)
   83d04:	e0ffff17 	ldw	r3,-4(fp)
   83d08:	d8000015 	stw	zero,0(sp)
   83d0c:	e1fffd17 	ldw	r7,-12(fp)
   83d10:	01800234 	movhi	r6,8
   83d14:	318f5f04 	addi	r6,r6,15740
   83d18:	180b883a 	mov	r5,r3
   83d1c:	1009883a 	mov	r4,r2
   83d20:	0084a240 	call	84a24 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   83d24:	e0bffd17 	ldw	r2,-12(fp)
   83d28:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   83d2c:	e0bffd17 	ldw	r2,-12(fp)
   83d30:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   83d34:	d0e01617 	ldw	r3,-32680(gp)
   83d38:	e1fffd17 	ldw	r7,-12(fp)
   83d3c:	01800234 	movhi	r6,8
   83d40:	318fe204 	addi	r6,r6,16264
   83d44:	180b883a 	mov	r5,r3
   83d48:	1009883a 	mov	r4,r2
   83d4c:	00845c00 	call	845c0 <alt_alarm_start>
   83d50:	1000040e 	bge	r2,zero,83d64 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   83d54:	e0fffd17 	ldw	r3,-12(fp)
   83d58:	00a00034 	movhi	r2,32768
   83d5c:	10bfffc4 	addi	r2,r2,-1
   83d60:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   83d64:	0001883a 	nop
   83d68:	e037883a 	mov	sp,fp
   83d6c:	dfc00117 	ldw	ra,4(sp)
   83d70:	df000017 	ldw	fp,0(sp)
   83d74:	dec00204 	addi	sp,sp,8
   83d78:	f800283a 	ret

00083d7c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   83d7c:	defff804 	addi	sp,sp,-32
   83d80:	df000715 	stw	fp,28(sp)
   83d84:	df000704 	addi	fp,sp,28
   83d88:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   83d8c:	e0bfff17 	ldw	r2,-4(fp)
   83d90:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   83d94:	e0bffb17 	ldw	r2,-20(fp)
   83d98:	10800017 	ldw	r2,0(r2)
   83d9c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83da0:	e0bffc17 	ldw	r2,-16(fp)
   83da4:	10800104 	addi	r2,r2,4
   83da8:	10800037 	ldwio	r2,0(r2)
   83dac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   83db0:	e0bffd17 	ldw	r2,-12(fp)
   83db4:	1080c00c 	andi	r2,r2,768
   83db8:	10006d26 	beq	r2,zero,83f70 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   83dbc:	e0bffd17 	ldw	r2,-12(fp)
   83dc0:	1080400c 	andi	r2,r2,256
   83dc4:	10003526 	beq	r2,zero,83e9c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   83dc8:	00800074 	movhi	r2,1
   83dcc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83dd0:	e0bffb17 	ldw	r2,-20(fp)
   83dd4:	10800a17 	ldw	r2,40(r2)
   83dd8:	10800044 	addi	r2,r2,1
   83ddc:	1081ffcc 	andi	r2,r2,2047
   83de0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   83de4:	e0bffb17 	ldw	r2,-20(fp)
   83de8:	10c00b17 	ldw	r3,44(r2)
   83dec:	e0bffe17 	ldw	r2,-8(fp)
   83df0:	18801526 	beq	r3,r2,83e48 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   83df4:	e0bffc17 	ldw	r2,-16(fp)
   83df8:	10800037 	ldwio	r2,0(r2)
   83dfc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   83e00:	e0bff917 	ldw	r2,-28(fp)
   83e04:	10a0000c 	andi	r2,r2,32768
   83e08:	10001126 	beq	r2,zero,83e50 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   83e0c:	e0bffb17 	ldw	r2,-20(fp)
   83e10:	10800a17 	ldw	r2,40(r2)
   83e14:	e0fff917 	ldw	r3,-28(fp)
   83e18:	1809883a 	mov	r4,r3
   83e1c:	e0fffb17 	ldw	r3,-20(fp)
   83e20:	1885883a 	add	r2,r3,r2
   83e24:	10800e04 	addi	r2,r2,56
   83e28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83e2c:	e0bffb17 	ldw	r2,-20(fp)
   83e30:	10800a17 	ldw	r2,40(r2)
   83e34:	10800044 	addi	r2,r2,1
   83e38:	10c1ffcc 	andi	r3,r2,2047
   83e3c:	e0bffb17 	ldw	r2,-20(fp)
   83e40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   83e44:	003fe206 	br	83dd0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   83e48:	0001883a 	nop
   83e4c:	00000106 	br	83e54 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   83e50:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   83e54:	e0bff917 	ldw	r2,-28(fp)
   83e58:	10bfffec 	andhi	r2,r2,65535
   83e5c:	10000f26 	beq	r2,zero,83e9c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   83e60:	e0bffb17 	ldw	r2,-20(fp)
   83e64:	10c00817 	ldw	r3,32(r2)
   83e68:	00bfff84 	movi	r2,-2
   83e6c:	1886703a 	and	r3,r3,r2
   83e70:	e0bffb17 	ldw	r2,-20(fp)
   83e74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   83e78:	e0bffc17 	ldw	r2,-16(fp)
   83e7c:	10800104 	addi	r2,r2,4
   83e80:	1007883a 	mov	r3,r2
   83e84:	e0bffb17 	ldw	r2,-20(fp)
   83e88:	10800817 	ldw	r2,32(r2)
   83e8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83e90:	e0bffc17 	ldw	r2,-16(fp)
   83e94:	10800104 	addi	r2,r2,4
   83e98:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   83e9c:	e0bffd17 	ldw	r2,-12(fp)
   83ea0:	1080800c 	andi	r2,r2,512
   83ea4:	103fbe26 	beq	r2,zero,83da0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   83ea8:	e0bffd17 	ldw	r2,-12(fp)
   83eac:	1004d43a 	srli	r2,r2,16
   83eb0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   83eb4:	00001406 	br	83f08 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   83eb8:	e0bffc17 	ldw	r2,-16(fp)
   83ebc:	e0fffb17 	ldw	r3,-20(fp)
   83ec0:	18c00d17 	ldw	r3,52(r3)
   83ec4:	e13ffb17 	ldw	r4,-20(fp)
   83ec8:	20c7883a 	add	r3,r4,r3
   83ecc:	18c20e04 	addi	r3,r3,2104
   83ed0:	18c00003 	ldbu	r3,0(r3)
   83ed4:	18c03fcc 	andi	r3,r3,255
   83ed8:	18c0201c 	xori	r3,r3,128
   83edc:	18ffe004 	addi	r3,r3,-128
   83ee0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   83ee4:	e0bffb17 	ldw	r2,-20(fp)
   83ee8:	10800d17 	ldw	r2,52(r2)
   83eec:	10800044 	addi	r2,r2,1
   83ef0:	10c1ffcc 	andi	r3,r2,2047
   83ef4:	e0bffb17 	ldw	r2,-20(fp)
   83ef8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   83efc:	e0bffa17 	ldw	r2,-24(fp)
   83f00:	10bfffc4 	addi	r2,r2,-1
   83f04:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   83f08:	e0bffa17 	ldw	r2,-24(fp)
   83f0c:	10000526 	beq	r2,zero,83f24 <altera_avalon_jtag_uart_irq+0x1a8>
   83f10:	e0bffb17 	ldw	r2,-20(fp)
   83f14:	10c00d17 	ldw	r3,52(r2)
   83f18:	e0bffb17 	ldw	r2,-20(fp)
   83f1c:	10800c17 	ldw	r2,48(r2)
   83f20:	18bfe51e 	bne	r3,r2,83eb8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   83f24:	e0bffa17 	ldw	r2,-24(fp)
   83f28:	103f9d26 	beq	r2,zero,83da0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   83f2c:	e0bffb17 	ldw	r2,-20(fp)
   83f30:	10c00817 	ldw	r3,32(r2)
   83f34:	00bfff44 	movi	r2,-3
   83f38:	1886703a 	and	r3,r3,r2
   83f3c:	e0bffb17 	ldw	r2,-20(fp)
   83f40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   83f44:	e0bffb17 	ldw	r2,-20(fp)
   83f48:	10800017 	ldw	r2,0(r2)
   83f4c:	10800104 	addi	r2,r2,4
   83f50:	1007883a 	mov	r3,r2
   83f54:	e0bffb17 	ldw	r2,-20(fp)
   83f58:	10800817 	ldw	r2,32(r2)
   83f5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   83f60:	e0bffc17 	ldw	r2,-16(fp)
   83f64:	10800104 	addi	r2,r2,4
   83f68:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   83f6c:	003f8c06 	br	83da0 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   83f70:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   83f74:	0001883a 	nop
   83f78:	e037883a 	mov	sp,fp
   83f7c:	df000017 	ldw	fp,0(sp)
   83f80:	dec00104 	addi	sp,sp,4
   83f84:	f800283a 	ret

00083f88 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   83f88:	defff804 	addi	sp,sp,-32
   83f8c:	df000715 	stw	fp,28(sp)
   83f90:	df000704 	addi	fp,sp,28
   83f94:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   83f98:	e0bffb17 	ldw	r2,-20(fp)
   83f9c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   83fa0:	e0bff917 	ldw	r2,-28(fp)
   83fa4:	10800017 	ldw	r2,0(r2)
   83fa8:	10800104 	addi	r2,r2,4
   83fac:	10800037 	ldwio	r2,0(r2)
   83fb0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   83fb4:	e0bffa17 	ldw	r2,-24(fp)
   83fb8:	1081000c 	andi	r2,r2,1024
   83fbc:	10000b26 	beq	r2,zero,83fec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   83fc0:	e0bff917 	ldw	r2,-28(fp)
   83fc4:	10800017 	ldw	r2,0(r2)
   83fc8:	10800104 	addi	r2,r2,4
   83fcc:	1007883a 	mov	r3,r2
   83fd0:	e0bff917 	ldw	r2,-28(fp)
   83fd4:	10800817 	ldw	r2,32(r2)
   83fd8:	10810014 	ori	r2,r2,1024
   83fdc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   83fe0:	e0bff917 	ldw	r2,-28(fp)
   83fe4:	10000915 	stw	zero,36(r2)
   83fe8:	00000a06 	br	84014 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   83fec:	e0bff917 	ldw	r2,-28(fp)
   83ff0:	10c00917 	ldw	r3,36(r2)
   83ff4:	00a00034 	movhi	r2,32768
   83ff8:	10bfff04 	addi	r2,r2,-4
   83ffc:	10c00536 	bltu	r2,r3,84014 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   84000:	e0bff917 	ldw	r2,-28(fp)
   84004:	10800917 	ldw	r2,36(r2)
   84008:	10c00044 	addi	r3,r2,1
   8400c:	e0bff917 	ldw	r2,-28(fp)
   84010:	10c00915 	stw	r3,36(r2)
   84014:	d0a01617 	ldw	r2,-32680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   84018:	e037883a 	mov	sp,fp
   8401c:	df000017 	ldw	fp,0(sp)
   84020:	dec00104 	addi	sp,sp,4
   84024:	f800283a 	ret

00084028 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   84028:	defffd04 	addi	sp,sp,-12
   8402c:	df000215 	stw	fp,8(sp)
   84030:	df000204 	addi	fp,sp,8
   84034:	e13ffe15 	stw	r4,-8(fp)
   84038:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8403c:	00000506 	br	84054 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   84040:	e0bfff17 	ldw	r2,-4(fp)
   84044:	1090000c 	andi	r2,r2,16384
   84048:	10000226 	beq	r2,zero,84054 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8404c:	00bffd44 	movi	r2,-11
   84050:	00000b06 	br	84080 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   84054:	e0bffe17 	ldw	r2,-8(fp)
   84058:	10c00d17 	ldw	r3,52(r2)
   8405c:	e0bffe17 	ldw	r2,-8(fp)
   84060:	10800c17 	ldw	r2,48(r2)
   84064:	18800526 	beq	r3,r2,8407c <altera_avalon_jtag_uart_close+0x54>
   84068:	e0bffe17 	ldw	r2,-8(fp)
   8406c:	10c00917 	ldw	r3,36(r2)
   84070:	e0bffe17 	ldw	r2,-8(fp)
   84074:	10800117 	ldw	r2,4(r2)
   84078:	18bff136 	bltu	r3,r2,84040 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8407c:	0005883a 	mov	r2,zero
}
   84080:	e037883a 	mov	sp,fp
   84084:	df000017 	ldw	fp,0(sp)
   84088:	dec00104 	addi	sp,sp,4
   8408c:	f800283a 	ret

00084090 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   84090:	defffa04 	addi	sp,sp,-24
   84094:	df000515 	stw	fp,20(sp)
   84098:	df000504 	addi	fp,sp,20
   8409c:	e13ffd15 	stw	r4,-12(fp)
   840a0:	e17ffe15 	stw	r5,-8(fp)
   840a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   840a8:	00bff9c4 	movi	r2,-25
   840ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   840b0:	e0bffe17 	ldw	r2,-8(fp)
   840b4:	10da8060 	cmpeqi	r3,r2,27137
   840b8:	1800031e 	bne	r3,zero,840c8 <altera_avalon_jtag_uart_ioctl+0x38>
   840bc:	109a80a0 	cmpeqi	r2,r2,27138
   840c0:	1000181e 	bne	r2,zero,84124 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   840c4:	00002906 	br	8416c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   840c8:	e0bffd17 	ldw	r2,-12(fp)
   840cc:	10c00117 	ldw	r3,4(r2)
   840d0:	00a00034 	movhi	r2,32768
   840d4:	10bfffc4 	addi	r2,r2,-1
   840d8:	18802126 	beq	r3,r2,84160 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   840dc:	e0bfff17 	ldw	r2,-4(fp)
   840e0:	10800017 	ldw	r2,0(r2)
   840e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   840e8:	e0bffc17 	ldw	r2,-16(fp)
   840ec:	10800090 	cmplti	r2,r2,2
   840f0:	1000061e 	bne	r2,zero,8410c <altera_avalon_jtag_uart_ioctl+0x7c>
   840f4:	e0fffc17 	ldw	r3,-16(fp)
   840f8:	00a00034 	movhi	r2,32768
   840fc:	10bfffc4 	addi	r2,r2,-1
   84100:	18800226 	beq	r3,r2,8410c <altera_avalon_jtag_uart_ioctl+0x7c>
   84104:	e0bffc17 	ldw	r2,-16(fp)
   84108:	00000206 	br	84114 <altera_avalon_jtag_uart_ioctl+0x84>
   8410c:	00a00034 	movhi	r2,32768
   84110:	10bfff84 	addi	r2,r2,-2
   84114:	e0fffd17 	ldw	r3,-12(fp)
   84118:	18800115 	stw	r2,4(r3)
      rc = 0;
   8411c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   84120:	00000f06 	br	84160 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   84124:	e0bffd17 	ldw	r2,-12(fp)
   84128:	10c00117 	ldw	r3,4(r2)
   8412c:	00a00034 	movhi	r2,32768
   84130:	10bfffc4 	addi	r2,r2,-1
   84134:	18800c26 	beq	r3,r2,84168 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   84138:	e0bffd17 	ldw	r2,-12(fp)
   8413c:	10c00917 	ldw	r3,36(r2)
   84140:	e0bffd17 	ldw	r2,-12(fp)
   84144:	10800117 	ldw	r2,4(r2)
   84148:	1885803a 	cmpltu	r2,r3,r2
   8414c:	10c03fcc 	andi	r3,r2,255
   84150:	e0bfff17 	ldw	r2,-4(fp)
   84154:	10c00015 	stw	r3,0(r2)
      rc = 0;
   84158:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8415c:	00000206 	br	84168 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   84160:	0001883a 	nop
   84164:	00000106 	br	8416c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   84168:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8416c:	e0bffb17 	ldw	r2,-20(fp)
}
   84170:	e037883a 	mov	sp,fp
   84174:	df000017 	ldw	fp,0(sp)
   84178:	dec00104 	addi	sp,sp,4
   8417c:	f800283a 	ret

00084180 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   84180:	defff304 	addi	sp,sp,-52
   84184:	dfc00c15 	stw	ra,48(sp)
   84188:	df000b15 	stw	fp,44(sp)
   8418c:	df000b04 	addi	fp,sp,44
   84190:	e13ffc15 	stw	r4,-16(fp)
   84194:	e17ffd15 	stw	r5,-12(fp)
   84198:	e1bffe15 	stw	r6,-8(fp)
   8419c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   841a0:	e0bffd17 	ldw	r2,-12(fp)
   841a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   841a8:	00004706 	br	842c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   841ac:	e0bffc17 	ldw	r2,-16(fp)
   841b0:	10800a17 	ldw	r2,40(r2)
   841b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   841b8:	e0bffc17 	ldw	r2,-16(fp)
   841bc:	10800b17 	ldw	r2,44(r2)
   841c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   841c4:	e0fff717 	ldw	r3,-36(fp)
   841c8:	e0bff817 	ldw	r2,-32(fp)
   841cc:	18800536 	bltu	r3,r2,841e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   841d0:	e0fff717 	ldw	r3,-36(fp)
   841d4:	e0bff817 	ldw	r2,-32(fp)
   841d8:	1885c83a 	sub	r2,r3,r2
   841dc:	e0bff615 	stw	r2,-40(fp)
   841e0:	00000406 	br	841f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   841e4:	00c20004 	movi	r3,2048
   841e8:	e0bff817 	ldw	r2,-32(fp)
   841ec:	1885c83a 	sub	r2,r3,r2
   841f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   841f4:	e0bff617 	ldw	r2,-40(fp)
   841f8:	10001e26 	beq	r2,zero,84274 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   841fc:	e0fffe17 	ldw	r3,-8(fp)
   84200:	e0bff617 	ldw	r2,-40(fp)
   84204:	1880022e 	bgeu	r3,r2,84210 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   84208:	e0bffe17 	ldw	r2,-8(fp)
   8420c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   84210:	e0bffc17 	ldw	r2,-16(fp)
   84214:	10c00e04 	addi	r3,r2,56
   84218:	e0bff817 	ldw	r2,-32(fp)
   8421c:	1885883a 	add	r2,r3,r2
   84220:	e1bff617 	ldw	r6,-40(fp)
   84224:	100b883a 	mov	r5,r2
   84228:	e13ff517 	ldw	r4,-44(fp)
   8422c:	00817300 	call	81730 <memcpy>
      ptr   += n;
   84230:	e0fff517 	ldw	r3,-44(fp)
   84234:	e0bff617 	ldw	r2,-40(fp)
   84238:	1885883a 	add	r2,r3,r2
   8423c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   84240:	e0fffe17 	ldw	r3,-8(fp)
   84244:	e0bff617 	ldw	r2,-40(fp)
   84248:	1885c83a 	sub	r2,r3,r2
   8424c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84250:	e0fff817 	ldw	r3,-32(fp)
   84254:	e0bff617 	ldw	r2,-40(fp)
   84258:	1885883a 	add	r2,r3,r2
   8425c:	10c1ffcc 	andi	r3,r2,2047
   84260:	e0bffc17 	ldw	r2,-16(fp)
   84264:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   84268:	e0bffe17 	ldw	r2,-8(fp)
   8426c:	00bfcf16 	blt	zero,r2,841ac <altera_avalon_jtag_uart_read+0x2c>
   84270:	00000106 	br	84278 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   84274:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   84278:	e0fff517 	ldw	r3,-44(fp)
   8427c:	e0bffd17 	ldw	r2,-12(fp)
   84280:	1880141e 	bne	r3,r2,842d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   84284:	e0bfff17 	ldw	r2,-4(fp)
   84288:	1090000c 	andi	r2,r2,16384
   8428c:	1000131e 	bne	r2,zero,842dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   84290:	0001883a 	nop
   84294:	e0bffc17 	ldw	r2,-16(fp)
   84298:	10c00a17 	ldw	r3,40(r2)
   8429c:	e0bff717 	ldw	r2,-36(fp)
   842a0:	1880051e 	bne	r3,r2,842b8 <altera_avalon_jtag_uart_read+0x138>
   842a4:	e0bffc17 	ldw	r2,-16(fp)
   842a8:	10c00917 	ldw	r3,36(r2)
   842ac:	e0bffc17 	ldw	r2,-16(fp)
   842b0:	10800117 	ldw	r2,4(r2)
   842b4:	18bff736 	bltu	r3,r2,84294 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   842b8:	e0bffc17 	ldw	r2,-16(fp)
   842bc:	10c00a17 	ldw	r3,40(r2)
   842c0:	e0bff717 	ldw	r2,-36(fp)
   842c4:	18800726 	beq	r3,r2,842e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   842c8:	e0bffe17 	ldw	r2,-8(fp)
   842cc:	00bfb716 	blt	zero,r2,841ac <altera_avalon_jtag_uart_read+0x2c>
   842d0:	00000506 	br	842e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   842d4:	0001883a 	nop
   842d8:	00000306 	br	842e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   842dc:	0001883a 	nop
   842e0:	00000106 	br	842e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   842e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   842e8:	e0fff517 	ldw	r3,-44(fp)
   842ec:	e0bffd17 	ldw	r2,-12(fp)
   842f0:	18801826 	beq	r3,r2,84354 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   842f4:	0005303a 	rdctl	r2,status
   842f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   842fc:	e0fffb17 	ldw	r3,-20(fp)
   84300:	00bfff84 	movi	r2,-2
   84304:	1884703a 	and	r2,r3,r2
   84308:	1001703a 	wrctl	status,r2
  
  return context;
   8430c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   84310:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   84314:	e0bffc17 	ldw	r2,-16(fp)
   84318:	10800817 	ldw	r2,32(r2)
   8431c:	10c00054 	ori	r3,r2,1
   84320:	e0bffc17 	ldw	r2,-16(fp)
   84324:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   84328:	e0bffc17 	ldw	r2,-16(fp)
   8432c:	10800017 	ldw	r2,0(r2)
   84330:	10800104 	addi	r2,r2,4
   84334:	1007883a 	mov	r3,r2
   84338:	e0bffc17 	ldw	r2,-16(fp)
   8433c:	10800817 	ldw	r2,32(r2)
   84340:	18800035 	stwio	r2,0(r3)
   84344:	e0bffa17 	ldw	r2,-24(fp)
   84348:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8434c:	e0bff917 	ldw	r2,-28(fp)
   84350:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   84354:	e0fff517 	ldw	r3,-44(fp)
   84358:	e0bffd17 	ldw	r2,-12(fp)
   8435c:	18800426 	beq	r3,r2,84370 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   84360:	e0fff517 	ldw	r3,-44(fp)
   84364:	e0bffd17 	ldw	r2,-12(fp)
   84368:	1885c83a 	sub	r2,r3,r2
   8436c:	00000606 	br	84388 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   84370:	e0bfff17 	ldw	r2,-4(fp)
   84374:	1090000c 	andi	r2,r2,16384
   84378:	10000226 	beq	r2,zero,84384 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8437c:	00bffd44 	movi	r2,-11
   84380:	00000106 	br	84388 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   84384:	00bffec4 	movi	r2,-5
}
   84388:	e037883a 	mov	sp,fp
   8438c:	dfc00117 	ldw	ra,4(sp)
   84390:	df000017 	ldw	fp,0(sp)
   84394:	dec00204 	addi	sp,sp,8
   84398:	f800283a 	ret

0008439c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8439c:	defff304 	addi	sp,sp,-52
   843a0:	dfc00c15 	stw	ra,48(sp)
   843a4:	df000b15 	stw	fp,44(sp)
   843a8:	df000b04 	addi	fp,sp,44
   843ac:	e13ffc15 	stw	r4,-16(fp)
   843b0:	e17ffd15 	stw	r5,-12(fp)
   843b4:	e1bffe15 	stw	r6,-8(fp)
   843b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   843bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   843c0:	e0bffd17 	ldw	r2,-12(fp)
   843c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   843c8:	00003706 	br	844a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   843cc:	e0bffc17 	ldw	r2,-16(fp)
   843d0:	10800c17 	ldw	r2,48(r2)
   843d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   843d8:	e0bffc17 	ldw	r2,-16(fp)
   843dc:	10800d17 	ldw	r2,52(r2)
   843e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   843e4:	e0fff917 	ldw	r3,-28(fp)
   843e8:	e0bff517 	ldw	r2,-44(fp)
   843ec:	1880062e 	bgeu	r3,r2,84408 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   843f0:	e0fff517 	ldw	r3,-44(fp)
   843f4:	e0bff917 	ldw	r2,-28(fp)
   843f8:	1885c83a 	sub	r2,r3,r2
   843fc:	10bfffc4 	addi	r2,r2,-1
   84400:	e0bff615 	stw	r2,-40(fp)
   84404:	00000b06 	br	84434 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   84408:	e0bff517 	ldw	r2,-44(fp)
   8440c:	10000526 	beq	r2,zero,84424 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   84410:	00c20004 	movi	r3,2048
   84414:	e0bff917 	ldw	r2,-28(fp)
   84418:	1885c83a 	sub	r2,r3,r2
   8441c:	e0bff615 	stw	r2,-40(fp)
   84420:	00000406 	br	84434 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   84424:	00c1ffc4 	movi	r3,2047
   84428:	e0bff917 	ldw	r2,-28(fp)
   8442c:	1885c83a 	sub	r2,r3,r2
   84430:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   84434:	e0bff617 	ldw	r2,-40(fp)
   84438:	10001e26 	beq	r2,zero,844b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8443c:	e0fffe17 	ldw	r3,-8(fp)
   84440:	e0bff617 	ldw	r2,-40(fp)
   84444:	1880022e 	bgeu	r3,r2,84450 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   84448:	e0bffe17 	ldw	r2,-8(fp)
   8444c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   84450:	e0bffc17 	ldw	r2,-16(fp)
   84454:	10c20e04 	addi	r3,r2,2104
   84458:	e0bff917 	ldw	r2,-28(fp)
   8445c:	1885883a 	add	r2,r3,r2
   84460:	e1bff617 	ldw	r6,-40(fp)
   84464:	e17ffd17 	ldw	r5,-12(fp)
   84468:	1009883a 	mov	r4,r2
   8446c:	00817300 	call	81730 <memcpy>
      ptr   += n;
   84470:	e0fffd17 	ldw	r3,-12(fp)
   84474:	e0bff617 	ldw	r2,-40(fp)
   84478:	1885883a 	add	r2,r3,r2
   8447c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   84480:	e0fffe17 	ldw	r3,-8(fp)
   84484:	e0bff617 	ldw	r2,-40(fp)
   84488:	1885c83a 	sub	r2,r3,r2
   8448c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   84490:	e0fff917 	ldw	r3,-28(fp)
   84494:	e0bff617 	ldw	r2,-40(fp)
   84498:	1885883a 	add	r2,r3,r2
   8449c:	10c1ffcc 	andi	r3,r2,2047
   844a0:	e0bffc17 	ldw	r2,-16(fp)
   844a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   844a8:	e0bffe17 	ldw	r2,-8(fp)
   844ac:	00bfc716 	blt	zero,r2,843cc <altera_avalon_jtag_uart_write+0x30>
   844b0:	00000106 	br	844b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   844b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   844b8:	0005303a 	rdctl	r2,status
   844bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   844c0:	e0fffb17 	ldw	r3,-20(fp)
   844c4:	00bfff84 	movi	r2,-2
   844c8:	1884703a 	and	r2,r3,r2
   844cc:	1001703a 	wrctl	status,r2
  
  return context;
   844d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   844d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   844d8:	e0bffc17 	ldw	r2,-16(fp)
   844dc:	10800817 	ldw	r2,32(r2)
   844e0:	10c00094 	ori	r3,r2,2
   844e4:	e0bffc17 	ldw	r2,-16(fp)
   844e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   844ec:	e0bffc17 	ldw	r2,-16(fp)
   844f0:	10800017 	ldw	r2,0(r2)
   844f4:	10800104 	addi	r2,r2,4
   844f8:	1007883a 	mov	r3,r2
   844fc:	e0bffc17 	ldw	r2,-16(fp)
   84500:	10800817 	ldw	r2,32(r2)
   84504:	18800035 	stwio	r2,0(r3)
   84508:	e0bffa17 	ldw	r2,-24(fp)
   8450c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84510:	e0bff817 	ldw	r2,-32(fp)
   84514:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   84518:	e0bffe17 	ldw	r2,-8(fp)
   8451c:	0080100e 	bge	zero,r2,84560 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   84520:	e0bfff17 	ldw	r2,-4(fp)
   84524:	1090000c 	andi	r2,r2,16384
   84528:	1000101e 	bne	r2,zero,8456c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8452c:	0001883a 	nop
   84530:	e0bffc17 	ldw	r2,-16(fp)
   84534:	10c00d17 	ldw	r3,52(r2)
   84538:	e0bff517 	ldw	r2,-44(fp)
   8453c:	1880051e 	bne	r3,r2,84554 <altera_avalon_jtag_uart_write+0x1b8>
   84540:	e0bffc17 	ldw	r2,-16(fp)
   84544:	10c00917 	ldw	r3,36(r2)
   84548:	e0bffc17 	ldw	r2,-16(fp)
   8454c:	10800117 	ldw	r2,4(r2)
   84550:	18bff736 	bltu	r3,r2,84530 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   84554:	e0bffc17 	ldw	r2,-16(fp)
   84558:	10800917 	ldw	r2,36(r2)
   8455c:	1000051e 	bne	r2,zero,84574 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   84560:	e0bffe17 	ldw	r2,-8(fp)
   84564:	00bfd016 	blt	zero,r2,844a8 <altera_avalon_jtag_uart_write+0x10c>
   84568:	00000306 	br	84578 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8456c:	0001883a 	nop
   84570:	00000106 	br	84578 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   84574:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   84578:	e0fffd17 	ldw	r3,-12(fp)
   8457c:	e0bff717 	ldw	r2,-36(fp)
   84580:	18800426 	beq	r3,r2,84594 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   84584:	e0fffd17 	ldw	r3,-12(fp)
   84588:	e0bff717 	ldw	r2,-36(fp)
   8458c:	1885c83a 	sub	r2,r3,r2
   84590:	00000606 	br	845ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   84594:	e0bfff17 	ldw	r2,-4(fp)
   84598:	1090000c 	andi	r2,r2,16384
   8459c:	10000226 	beq	r2,zero,845a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   845a0:	00bffd44 	movi	r2,-11
   845a4:	00000106 	br	845ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   845a8:	00bffec4 	movi	r2,-5
}
   845ac:	e037883a 	mov	sp,fp
   845b0:	dfc00117 	ldw	ra,4(sp)
   845b4:	df000017 	ldw	fp,0(sp)
   845b8:	dec00204 	addi	sp,sp,8
   845bc:	f800283a 	ret

000845c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   845c0:	defff504 	addi	sp,sp,-44
   845c4:	df000a15 	stw	fp,40(sp)
   845c8:	df000a04 	addi	fp,sp,40
   845cc:	e13ffc15 	stw	r4,-16(fp)
   845d0:	e17ffd15 	stw	r5,-12(fp)
   845d4:	e1bffe15 	stw	r6,-8(fp)
   845d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   845dc:	e03ff615 	stw	zero,-40(fp)
   845e0:	d0a01617 	ldw	r2,-32680(gp)
  
  if (alt_ticks_per_second ())
   845e4:	10003c26 	beq	r2,zero,846d8 <alt_alarm_start+0x118>
  {
    if (alarm)
   845e8:	e0bffc17 	ldw	r2,-16(fp)
   845ec:	10003826 	beq	r2,zero,846d0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   845f0:	e0bffc17 	ldw	r2,-16(fp)
   845f4:	e0fffe17 	ldw	r3,-8(fp)
   845f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   845fc:	e0bffc17 	ldw	r2,-16(fp)
   84600:	e0ffff17 	ldw	r3,-4(fp)
   84604:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84608:	0005303a 	rdctl	r2,status
   8460c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84610:	e0fff917 	ldw	r3,-28(fp)
   84614:	00bfff84 	movi	r2,-2
   84618:	1884703a 	and	r2,r3,r2
   8461c:	1001703a 	wrctl	status,r2
  
  return context;
   84620:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   84624:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   84628:	d0a01717 	ldw	r2,-32676(gp)
      
      current_nticks = alt_nticks();
   8462c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   84630:	e0fffd17 	ldw	r3,-12(fp)
   84634:	e0bff617 	ldw	r2,-40(fp)
   84638:	1885883a 	add	r2,r3,r2
   8463c:	10c00044 	addi	r3,r2,1
   84640:	e0bffc17 	ldw	r2,-16(fp)
   84644:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   84648:	e0bffc17 	ldw	r2,-16(fp)
   8464c:	10c00217 	ldw	r3,8(r2)
   84650:	e0bff617 	ldw	r2,-40(fp)
   84654:	1880042e 	bgeu	r3,r2,84668 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   84658:	e0bffc17 	ldw	r2,-16(fp)
   8465c:	00c00044 	movi	r3,1
   84660:	10c00405 	stb	r3,16(r2)
   84664:	00000206 	br	84670 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   84668:	e0bffc17 	ldw	r2,-16(fp)
   8466c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   84670:	e0bffc17 	ldw	r2,-16(fp)
   84674:	d0e00c04 	addi	r3,gp,-32720
   84678:	e0fffa15 	stw	r3,-24(fp)
   8467c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   84680:	e0bffb17 	ldw	r2,-20(fp)
   84684:	e0fffa17 	ldw	r3,-24(fp)
   84688:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8468c:	e0bffa17 	ldw	r2,-24(fp)
   84690:	10c00017 	ldw	r3,0(r2)
   84694:	e0bffb17 	ldw	r2,-20(fp)
   84698:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8469c:	e0bffa17 	ldw	r2,-24(fp)
   846a0:	10800017 	ldw	r2,0(r2)
   846a4:	e0fffb17 	ldw	r3,-20(fp)
   846a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   846ac:	e0bffa17 	ldw	r2,-24(fp)
   846b0:	e0fffb17 	ldw	r3,-20(fp)
   846b4:	10c00015 	stw	r3,0(r2)
   846b8:	e0bff817 	ldw	r2,-32(fp)
   846bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   846c0:	e0bff717 	ldw	r2,-36(fp)
   846c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   846c8:	0005883a 	mov	r2,zero
   846cc:	00000306 	br	846dc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   846d0:	00bffa84 	movi	r2,-22
   846d4:	00000106 	br	846dc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   846d8:	00bfde84 	movi	r2,-134
  }
}
   846dc:	e037883a 	mov	sp,fp
   846e0:	df000017 	ldw	fp,0(sp)
   846e4:	dec00104 	addi	sp,sp,4
   846e8:	f800283a 	ret

000846ec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   846ec:	defffa04 	addi	sp,sp,-24
   846f0:	dfc00515 	stw	ra,20(sp)
   846f4:	df000415 	stw	fp,16(sp)
   846f8:	df000404 	addi	fp,sp,16
   846fc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   84700:	00800244 	movi	r2,9
   84704:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   84708:	014003f4 	movhi	r5,15
   8470c:	29509004 	addi	r5,r5,16960
   84710:	e13ffd17 	ldw	r4,-12(fp)
   84714:	00830b80 	call	830b8 <__mulsi3>
   84718:	100b883a 	mov	r5,r2
   8471c:	0100bef4 	movhi	r4,763
   84720:	213c2004 	addi	r4,r4,-3968
   84724:	0082ffc0 	call	82ffc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   84728:	100b883a 	mov	r5,r2
   8472c:	01200034 	movhi	r4,32768
   84730:	213fffc4 	addi	r4,r4,-1
   84734:	0082ffc0 	call	82ffc <__udivsi3>
   84738:	100b883a 	mov	r5,r2
   8473c:	e13fff17 	ldw	r4,-4(fp)
   84740:	0082ffc0 	call	82ffc <__udivsi3>
   84744:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   84748:	e0bffe17 	ldw	r2,-8(fp)
   8474c:	10002a26 	beq	r2,zero,847f8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   84750:	e03ffc15 	stw	zero,-16(fp)
   84754:	00001706 	br	847b4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   84758:	00a00034 	movhi	r2,32768
   8475c:	10bfffc4 	addi	r2,r2,-1
   84760:	10bfffc4 	addi	r2,r2,-1
   84764:	103ffe1e 	bne	r2,zero,84760 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   84768:	014003f4 	movhi	r5,15
   8476c:	29509004 	addi	r5,r5,16960
   84770:	e13ffd17 	ldw	r4,-12(fp)
   84774:	00830b80 	call	830b8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   84778:	100b883a 	mov	r5,r2
   8477c:	0100bef4 	movhi	r4,763
   84780:	213c2004 	addi	r4,r4,-3968
   84784:	0082ffc0 	call	82ffc <__udivsi3>
   84788:	100b883a 	mov	r5,r2
   8478c:	01200034 	movhi	r4,32768
   84790:	213fffc4 	addi	r4,r4,-1
   84794:	0082ffc0 	call	82ffc <__udivsi3>
   84798:	1007883a 	mov	r3,r2
   8479c:	e0bfff17 	ldw	r2,-4(fp)
   847a0:	10c5c83a 	sub	r2,r2,r3
   847a4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   847a8:	e0bffc17 	ldw	r2,-16(fp)
   847ac:	10800044 	addi	r2,r2,1
   847b0:	e0bffc15 	stw	r2,-16(fp)
   847b4:	e0fffc17 	ldw	r3,-16(fp)
   847b8:	e0bffe17 	ldw	r2,-8(fp)
   847bc:	18bfe616 	blt	r3,r2,84758 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   847c0:	014003f4 	movhi	r5,15
   847c4:	29509004 	addi	r5,r5,16960
   847c8:	e13ffd17 	ldw	r4,-12(fp)
   847cc:	00830b80 	call	830b8 <__mulsi3>
   847d0:	100b883a 	mov	r5,r2
   847d4:	0100bef4 	movhi	r4,763
   847d8:	213c2004 	addi	r4,r4,-3968
   847dc:	0082ffc0 	call	82ffc <__udivsi3>
   847e0:	e17fff17 	ldw	r5,-4(fp)
   847e4:	1009883a 	mov	r4,r2
   847e8:	00830b80 	call	830b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   847ec:	10bfffc4 	addi	r2,r2,-1
   847f0:	103ffe1e 	bne	r2,zero,847ec <alt_busy_sleep+0x100>
   847f4:	00000d06 	br	8482c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   847f8:	014003f4 	movhi	r5,15
   847fc:	29509004 	addi	r5,r5,16960
   84800:	e13ffd17 	ldw	r4,-12(fp)
   84804:	00830b80 	call	830b8 <__mulsi3>
   84808:	100b883a 	mov	r5,r2
   8480c:	0100bef4 	movhi	r4,763
   84810:	213c2004 	addi	r4,r4,-3968
   84814:	0082ffc0 	call	82ffc <__udivsi3>
   84818:	e17fff17 	ldw	r5,-4(fp)
   8481c:	1009883a 	mov	r4,r2
   84820:	00830b80 	call	830b8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   84824:	10bfffc4 	addi	r2,r2,-1
   84828:	00bffe16 	blt	zero,r2,84824 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8482c:	0005883a 	mov	r2,zero
}
   84830:	e037883a 	mov	sp,fp
   84834:	dfc00117 	ldw	ra,4(sp)
   84838:	df000017 	ldw	fp,0(sp)
   8483c:	dec00204 	addi	sp,sp,8
   84840:	f800283a 	ret

00084844 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   84844:	deffff04 	addi	sp,sp,-4
   84848:	df000015 	stw	fp,0(sp)
   8484c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   84850:	0001883a 	nop
   84854:	e037883a 	mov	sp,fp
   84858:	df000017 	ldw	fp,0(sp)
   8485c:	dec00104 	addi	sp,sp,4
   84860:	f800283a 	ret

00084864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84864:	defffe04 	addi	sp,sp,-8
   84868:	dfc00115 	stw	ra,4(sp)
   8486c:	df000015 	stw	fp,0(sp)
   84870:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84874:	d0a00917 	ldw	r2,-32732(gp)
   84878:	10000326 	beq	r2,zero,84888 <alt_get_errno+0x24>
   8487c:	d0a00917 	ldw	r2,-32732(gp)
   84880:	103ee83a 	callr	r2
   84884:	00000106 	br	8488c <alt_get_errno+0x28>
   84888:	d0a01104 	addi	r2,gp,-32700
}
   8488c:	e037883a 	mov	sp,fp
   84890:	dfc00117 	ldw	ra,4(sp)
   84894:	df000017 	ldw	fp,0(sp)
   84898:	dec00204 	addi	sp,sp,8
   8489c:	f800283a 	ret

000848a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   848a0:	defffa04 	addi	sp,sp,-24
   848a4:	dfc00515 	stw	ra,20(sp)
   848a8:	df000415 	stw	fp,16(sp)
   848ac:	df000404 	addi	fp,sp,16
   848b0:	e13ffe15 	stw	r4,-8(fp)
   848b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   848b8:	e0bffe17 	ldw	r2,-8(fp)
   848bc:	10000326 	beq	r2,zero,848cc <alt_dev_llist_insert+0x2c>
   848c0:	e0bffe17 	ldw	r2,-8(fp)
   848c4:	10800217 	ldw	r2,8(r2)
   848c8:	1000061e 	bne	r2,zero,848e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   848cc:	00848640 	call	84864 <alt_get_errno>
   848d0:	1007883a 	mov	r3,r2
   848d4:	00800584 	movi	r2,22
   848d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   848dc:	00bffa84 	movi	r2,-22
   848e0:	00001306 	br	84930 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   848e4:	e0bffe17 	ldw	r2,-8(fp)
   848e8:	e0ffff17 	ldw	r3,-4(fp)
   848ec:	e0fffc15 	stw	r3,-16(fp)
   848f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   848f4:	e0bffd17 	ldw	r2,-12(fp)
   848f8:	e0fffc17 	ldw	r3,-16(fp)
   848fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   84900:	e0bffc17 	ldw	r2,-16(fp)
   84904:	10c00017 	ldw	r3,0(r2)
   84908:	e0bffd17 	ldw	r2,-12(fp)
   8490c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   84910:	e0bffc17 	ldw	r2,-16(fp)
   84914:	10800017 	ldw	r2,0(r2)
   84918:	e0fffd17 	ldw	r3,-12(fp)
   8491c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   84920:	e0bffc17 	ldw	r2,-16(fp)
   84924:	e0fffd17 	ldw	r3,-12(fp)
   84928:	10c00015 	stw	r3,0(r2)

  return 0;  
   8492c:	0005883a 	mov	r2,zero
}
   84930:	e037883a 	mov	sp,fp
   84934:	dfc00117 	ldw	ra,4(sp)
   84938:	df000017 	ldw	fp,0(sp)
   8493c:	dec00204 	addi	sp,sp,8
   84940:	f800283a 	ret

00084944 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   84944:	defffd04 	addi	sp,sp,-12
   84948:	dfc00215 	stw	ra,8(sp)
   8494c:	df000115 	stw	fp,4(sp)
   84950:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84954:	00800234 	movhi	r2,8
   84958:	10963e04 	addi	r2,r2,22776
   8495c:	e0bfff15 	stw	r2,-4(fp)
   84960:	00000606 	br	8497c <_do_ctors+0x38>
        (*ctor) (); 
   84964:	e0bfff17 	ldw	r2,-4(fp)
   84968:	10800017 	ldw	r2,0(r2)
   8496c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   84970:	e0bfff17 	ldw	r2,-4(fp)
   84974:	10bfff04 	addi	r2,r2,-4
   84978:	e0bfff15 	stw	r2,-4(fp)
   8497c:	e0ffff17 	ldw	r3,-4(fp)
   84980:	00800234 	movhi	r2,8
   84984:	10963f04 	addi	r2,r2,22780
   84988:	18bff62e 	bgeu	r3,r2,84964 <_do_ctors+0x20>
        (*ctor) (); 
}
   8498c:	0001883a 	nop
   84990:	e037883a 	mov	sp,fp
   84994:	dfc00117 	ldw	ra,4(sp)
   84998:	df000017 	ldw	fp,0(sp)
   8499c:	dec00204 	addi	sp,sp,8
   849a0:	f800283a 	ret

000849a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   849a4:	defffd04 	addi	sp,sp,-12
   849a8:	dfc00215 	stw	ra,8(sp)
   849ac:	df000115 	stw	fp,4(sp)
   849b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   849b4:	00800234 	movhi	r2,8
   849b8:	10963e04 	addi	r2,r2,22776
   849bc:	e0bfff15 	stw	r2,-4(fp)
   849c0:	00000606 	br	849dc <_do_dtors+0x38>
        (*dtor) (); 
   849c4:	e0bfff17 	ldw	r2,-4(fp)
   849c8:	10800017 	ldw	r2,0(r2)
   849cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   849d0:	e0bfff17 	ldw	r2,-4(fp)
   849d4:	10bfff04 	addi	r2,r2,-4
   849d8:	e0bfff15 	stw	r2,-4(fp)
   849dc:	e0ffff17 	ldw	r3,-4(fp)
   849e0:	00800234 	movhi	r2,8
   849e4:	10963f04 	addi	r2,r2,22780
   849e8:	18bff62e 	bgeu	r3,r2,849c4 <_do_dtors+0x20>
        (*dtor) (); 
}
   849ec:	0001883a 	nop
   849f0:	e037883a 	mov	sp,fp
   849f4:	dfc00117 	ldw	ra,4(sp)
   849f8:	df000017 	ldw	fp,0(sp)
   849fc:	dec00204 	addi	sp,sp,8
   84a00:	f800283a 	ret

00084a04 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   84a04:	deffff04 	addi	sp,sp,-4
   84a08:	df000015 	stw	fp,0(sp)
   84a0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   84a10:	0001883a 	nop
   84a14:	e037883a 	mov	sp,fp
   84a18:	df000017 	ldw	fp,0(sp)
   84a1c:	dec00104 	addi	sp,sp,4
   84a20:	f800283a 	ret

00084a24 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84a24:	defff904 	addi	sp,sp,-28
   84a28:	dfc00615 	stw	ra,24(sp)
   84a2c:	df000515 	stw	fp,20(sp)
   84a30:	df000504 	addi	fp,sp,20
   84a34:	e13ffc15 	stw	r4,-16(fp)
   84a38:	e17ffd15 	stw	r5,-12(fp)
   84a3c:	e1bffe15 	stw	r6,-8(fp)
   84a40:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   84a44:	e0800217 	ldw	r2,8(fp)
   84a48:	d8800015 	stw	r2,0(sp)
   84a4c:	e1ffff17 	ldw	r7,-4(fp)
   84a50:	e1bffe17 	ldw	r6,-8(fp)
   84a54:	e17ffd17 	ldw	r5,-12(fp)
   84a58:	e13ffc17 	ldw	r4,-16(fp)
   84a5c:	0084bd40 	call	84bd4 <alt_iic_isr_register>
}  
   84a60:	e037883a 	mov	sp,fp
   84a64:	dfc00117 	ldw	ra,4(sp)
   84a68:	df000017 	ldw	fp,0(sp)
   84a6c:	dec00204 	addi	sp,sp,8
   84a70:	f800283a 	ret

00084a74 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   84a74:	defff904 	addi	sp,sp,-28
   84a78:	df000615 	stw	fp,24(sp)
   84a7c:	df000604 	addi	fp,sp,24
   84a80:	e13ffe15 	stw	r4,-8(fp)
   84a84:	e17fff15 	stw	r5,-4(fp)
   84a88:	e0bfff17 	ldw	r2,-4(fp)
   84a8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84a90:	0005303a 	rdctl	r2,status
   84a94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84a98:	e0fffb17 	ldw	r3,-20(fp)
   84a9c:	00bfff84 	movi	r2,-2
   84aa0:	1884703a 	and	r2,r3,r2
   84aa4:	1001703a 	wrctl	status,r2
  
  return context;
   84aa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84aac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   84ab0:	00c00044 	movi	r3,1
   84ab4:	e0bffa17 	ldw	r2,-24(fp)
   84ab8:	1884983a 	sll	r2,r3,r2
   84abc:	1007883a 	mov	r3,r2
   84ac0:	d0a01517 	ldw	r2,-32684(gp)
   84ac4:	1884b03a 	or	r2,r3,r2
   84ac8:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84acc:	d0a01517 	ldw	r2,-32684(gp)
   84ad0:	100170fa 	wrctl	ienable,r2
   84ad4:	e0bffc17 	ldw	r2,-16(fp)
   84ad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84adc:	e0bffd17 	ldw	r2,-12(fp)
   84ae0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84ae4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   84ae8:	0001883a 	nop
}
   84aec:	e037883a 	mov	sp,fp
   84af0:	df000017 	ldw	fp,0(sp)
   84af4:	dec00104 	addi	sp,sp,4
   84af8:	f800283a 	ret

00084afc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   84afc:	defff904 	addi	sp,sp,-28
   84b00:	df000615 	stw	fp,24(sp)
   84b04:	df000604 	addi	fp,sp,24
   84b08:	e13ffe15 	stw	r4,-8(fp)
   84b0c:	e17fff15 	stw	r5,-4(fp)
   84b10:	e0bfff17 	ldw	r2,-4(fp)
   84b14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84b18:	0005303a 	rdctl	r2,status
   84b1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84b20:	e0fffb17 	ldw	r3,-20(fp)
   84b24:	00bfff84 	movi	r2,-2
   84b28:	1884703a 	and	r2,r3,r2
   84b2c:	1001703a 	wrctl	status,r2
  
  return context;
   84b30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   84b34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   84b38:	00c00044 	movi	r3,1
   84b3c:	e0bffa17 	ldw	r2,-24(fp)
   84b40:	1884983a 	sll	r2,r3,r2
   84b44:	0084303a 	nor	r2,zero,r2
   84b48:	1007883a 	mov	r3,r2
   84b4c:	d0a01517 	ldw	r2,-32684(gp)
   84b50:	1884703a 	and	r2,r3,r2
   84b54:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   84b58:	d0a01517 	ldw	r2,-32684(gp)
   84b5c:	100170fa 	wrctl	ienable,r2
   84b60:	e0bffc17 	ldw	r2,-16(fp)
   84b64:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84b68:	e0bffd17 	ldw	r2,-12(fp)
   84b6c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   84b70:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   84b74:	0001883a 	nop
}
   84b78:	e037883a 	mov	sp,fp
   84b7c:	df000017 	ldw	fp,0(sp)
   84b80:	dec00104 	addi	sp,sp,4
   84b84:	f800283a 	ret

00084b88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   84b88:	defffc04 	addi	sp,sp,-16
   84b8c:	df000315 	stw	fp,12(sp)
   84b90:	df000304 	addi	fp,sp,12
   84b94:	e13ffe15 	stw	r4,-8(fp)
   84b98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   84b9c:	000530fa 	rdctl	r2,ienable
   84ba0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   84ba4:	00c00044 	movi	r3,1
   84ba8:	e0bfff17 	ldw	r2,-4(fp)
   84bac:	1884983a 	sll	r2,r3,r2
   84bb0:	1007883a 	mov	r3,r2
   84bb4:	e0bffd17 	ldw	r2,-12(fp)
   84bb8:	1884703a 	and	r2,r3,r2
   84bbc:	1004c03a 	cmpne	r2,r2,zero
   84bc0:	10803fcc 	andi	r2,r2,255
}
   84bc4:	e037883a 	mov	sp,fp
   84bc8:	df000017 	ldw	fp,0(sp)
   84bcc:	dec00104 	addi	sp,sp,4
   84bd0:	f800283a 	ret

00084bd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   84bd4:	defff504 	addi	sp,sp,-44
   84bd8:	dfc00a15 	stw	ra,40(sp)
   84bdc:	df000915 	stw	fp,36(sp)
   84be0:	df000904 	addi	fp,sp,36
   84be4:	e13ffc15 	stw	r4,-16(fp)
   84be8:	e17ffd15 	stw	r5,-12(fp)
   84bec:	e1bffe15 	stw	r6,-8(fp)
   84bf0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   84bf4:	00bffa84 	movi	r2,-22
   84bf8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   84bfc:	e0bffd17 	ldw	r2,-12(fp)
   84c00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   84c04:	e0bff817 	ldw	r2,-32(fp)
   84c08:	10800808 	cmpgei	r2,r2,32
   84c0c:	1000271e 	bne	r2,zero,84cac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   84c10:	0005303a 	rdctl	r2,status
   84c14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   84c18:	e0fffb17 	ldw	r3,-20(fp)
   84c1c:	00bfff84 	movi	r2,-2
   84c20:	1884703a 	and	r2,r3,r2
   84c24:	1001703a 	wrctl	status,r2
  
  return context;
   84c28:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   84c2c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   84c30:	00800434 	movhi	r2,16
   84c34:	1086c304 	addi	r2,r2,6924
   84c38:	e0fff817 	ldw	r3,-32(fp)
   84c3c:	180690fa 	slli	r3,r3,3
   84c40:	10c5883a 	add	r2,r2,r3
   84c44:	e0fffe17 	ldw	r3,-8(fp)
   84c48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   84c4c:	00800434 	movhi	r2,16
   84c50:	1086c304 	addi	r2,r2,6924
   84c54:	e0fff817 	ldw	r3,-32(fp)
   84c58:	180690fa 	slli	r3,r3,3
   84c5c:	10c5883a 	add	r2,r2,r3
   84c60:	10800104 	addi	r2,r2,4
   84c64:	e0ffff17 	ldw	r3,-4(fp)
   84c68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   84c6c:	e0bffe17 	ldw	r2,-8(fp)
   84c70:	10000526 	beq	r2,zero,84c88 <alt_iic_isr_register+0xb4>
   84c74:	e0bff817 	ldw	r2,-32(fp)
   84c78:	100b883a 	mov	r5,r2
   84c7c:	e13ffc17 	ldw	r4,-16(fp)
   84c80:	0084a740 	call	84a74 <alt_ic_irq_enable>
   84c84:	00000406 	br	84c98 <alt_iic_isr_register+0xc4>
   84c88:	e0bff817 	ldw	r2,-32(fp)
   84c8c:	100b883a 	mov	r5,r2
   84c90:	e13ffc17 	ldw	r4,-16(fp)
   84c94:	0084afc0 	call	84afc <alt_ic_irq_disable>
   84c98:	e0bff715 	stw	r2,-36(fp)
   84c9c:	e0bffa17 	ldw	r2,-24(fp)
   84ca0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   84ca4:	e0bff917 	ldw	r2,-28(fp)
   84ca8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   84cac:	e0bff717 	ldw	r2,-36(fp)
}
   84cb0:	e037883a 	mov	sp,fp
   84cb4:	dfc00117 	ldw	ra,4(sp)
   84cb8:	df000017 	ldw	fp,0(sp)
   84cbc:	dec00204 	addi	sp,sp,8
   84cc0:	f800283a 	ret

00084cc4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   84cc4:	defff804 	addi	sp,sp,-32
   84cc8:	dfc00715 	stw	ra,28(sp)
   84ccc:	df000615 	stw	fp,24(sp)
   84cd0:	dc000515 	stw	r16,20(sp)
   84cd4:	df000604 	addi	fp,sp,24
   84cd8:	e13ffb15 	stw	r4,-20(fp)
   84cdc:	e17ffc15 	stw	r5,-16(fp)
   84ce0:	e1bffd15 	stw	r6,-12(fp)
   84ce4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   84ce8:	e1bffe17 	ldw	r6,-8(fp)
   84cec:	e17ffd17 	ldw	r5,-12(fp)
   84cf0:	e13ffc17 	ldw	r4,-16(fp)
   84cf4:	0084f4c0 	call	84f4c <open>
   84cf8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   84cfc:	e0bffa17 	ldw	r2,-24(fp)
   84d00:	10002216 	blt	r2,zero,84d8c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   84d04:	04000434 	movhi	r16,16
   84d08:	84022804 	addi	r16,r16,2208
   84d0c:	e0bffa17 	ldw	r2,-24(fp)
   84d10:	01400304 	movi	r5,12
   84d14:	1009883a 	mov	r4,r2
   84d18:	00830b80 	call	830b8 <__mulsi3>
   84d1c:	8085883a 	add	r2,r16,r2
   84d20:	10c00017 	ldw	r3,0(r2)
   84d24:	e0bffb17 	ldw	r2,-20(fp)
   84d28:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   84d2c:	04000434 	movhi	r16,16
   84d30:	84022804 	addi	r16,r16,2208
   84d34:	e0bffa17 	ldw	r2,-24(fp)
   84d38:	01400304 	movi	r5,12
   84d3c:	1009883a 	mov	r4,r2
   84d40:	00830b80 	call	830b8 <__mulsi3>
   84d44:	8085883a 	add	r2,r16,r2
   84d48:	10800104 	addi	r2,r2,4
   84d4c:	10c00017 	ldw	r3,0(r2)
   84d50:	e0bffb17 	ldw	r2,-20(fp)
   84d54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   84d58:	04000434 	movhi	r16,16
   84d5c:	84022804 	addi	r16,r16,2208
   84d60:	e0bffa17 	ldw	r2,-24(fp)
   84d64:	01400304 	movi	r5,12
   84d68:	1009883a 	mov	r4,r2
   84d6c:	00830b80 	call	830b8 <__mulsi3>
   84d70:	8085883a 	add	r2,r16,r2
   84d74:	10800204 	addi	r2,r2,8
   84d78:	10c00017 	ldw	r3,0(r2)
   84d7c:	e0bffb17 	ldw	r2,-20(fp)
   84d80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   84d84:	e13ffa17 	ldw	r4,-24(fp)
   84d88:	00838040 	call	83804 <alt_release_fd>
  }
} 
   84d8c:	0001883a 	nop
   84d90:	e6ffff04 	addi	sp,fp,-4
   84d94:	dfc00217 	ldw	ra,8(sp)
   84d98:	df000117 	ldw	fp,4(sp)
   84d9c:	dc000017 	ldw	r16,0(sp)
   84da0:	dec00304 	addi	sp,sp,12
   84da4:	f800283a 	ret

00084da8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   84da8:	defffb04 	addi	sp,sp,-20
   84dac:	dfc00415 	stw	ra,16(sp)
   84db0:	df000315 	stw	fp,12(sp)
   84db4:	df000304 	addi	fp,sp,12
   84db8:	e13ffd15 	stw	r4,-12(fp)
   84dbc:	e17ffe15 	stw	r5,-8(fp)
   84dc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   84dc4:	01c07fc4 	movi	r7,511
   84dc8:	01800044 	movi	r6,1
   84dcc:	e17ffd17 	ldw	r5,-12(fp)
   84dd0:	01000434 	movhi	r4,16
   84dd4:	21022b04 	addi	r4,r4,2220
   84dd8:	0084cc40 	call	84cc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   84ddc:	01c07fc4 	movi	r7,511
   84de0:	000d883a 	mov	r6,zero
   84de4:	e17ffe17 	ldw	r5,-8(fp)
   84de8:	01000434 	movhi	r4,16
   84dec:	21022804 	addi	r4,r4,2208
   84df0:	0084cc40 	call	84cc4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   84df4:	01c07fc4 	movi	r7,511
   84df8:	01800044 	movi	r6,1
   84dfc:	e17fff17 	ldw	r5,-4(fp)
   84e00:	01000434 	movhi	r4,16
   84e04:	21022e04 	addi	r4,r4,2232
   84e08:	0084cc40 	call	84cc4 <alt_open_fd>
}  
   84e0c:	0001883a 	nop
   84e10:	e037883a 	mov	sp,fp
   84e14:	dfc00117 	ldw	ra,4(sp)
   84e18:	df000017 	ldw	fp,0(sp)
   84e1c:	dec00204 	addi	sp,sp,8
   84e20:	f800283a 	ret

00084e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   84e24:	defffe04 	addi	sp,sp,-8
   84e28:	dfc00115 	stw	ra,4(sp)
   84e2c:	df000015 	stw	fp,0(sp)
   84e30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   84e34:	d0a00917 	ldw	r2,-32732(gp)
   84e38:	10000326 	beq	r2,zero,84e48 <alt_get_errno+0x24>
   84e3c:	d0a00917 	ldw	r2,-32732(gp)
   84e40:	103ee83a 	callr	r2
   84e44:	00000106 	br	84e4c <alt_get_errno+0x28>
   84e48:	d0a01104 	addi	r2,gp,-32700
}
   84e4c:	e037883a 	mov	sp,fp
   84e50:	dfc00117 	ldw	ra,4(sp)
   84e54:	df000017 	ldw	fp,0(sp)
   84e58:	dec00204 	addi	sp,sp,8
   84e5c:	f800283a 	ret

00084e60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   84e60:	defffb04 	addi	sp,sp,-20
   84e64:	dfc00415 	stw	ra,16(sp)
   84e68:	df000315 	stw	fp,12(sp)
   84e6c:	dc000215 	stw	r16,8(sp)
   84e70:	df000304 	addi	fp,sp,12
   84e74:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   84e78:	e0bffe17 	ldw	r2,-8(fp)
   84e7c:	10800217 	ldw	r2,8(r2)
   84e80:	10d00034 	orhi	r3,r2,16384
   84e84:	e0bffe17 	ldw	r2,-8(fp)
   84e88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84e8c:	e03ffd15 	stw	zero,-12(fp)
   84e90:	00002306 	br	84f20 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84e94:	04000434 	movhi	r16,16
   84e98:	84022804 	addi	r16,r16,2208
   84e9c:	e0bffd17 	ldw	r2,-12(fp)
   84ea0:	01400304 	movi	r5,12
   84ea4:	1009883a 	mov	r4,r2
   84ea8:	00830b80 	call	830b8 <__mulsi3>
   84eac:	8085883a 	add	r2,r16,r2
   84eb0:	10c00017 	ldw	r3,0(r2)
   84eb4:	e0bffe17 	ldw	r2,-8(fp)
   84eb8:	10800017 	ldw	r2,0(r2)
   84ebc:	1880151e 	bne	r3,r2,84f14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84ec0:	04000434 	movhi	r16,16
   84ec4:	84022804 	addi	r16,r16,2208
   84ec8:	e0bffd17 	ldw	r2,-12(fp)
   84ecc:	01400304 	movi	r5,12
   84ed0:	1009883a 	mov	r4,r2
   84ed4:	00830b80 	call	830b8 <__mulsi3>
   84ed8:	8085883a 	add	r2,r16,r2
   84edc:	10800204 	addi	r2,r2,8
   84ee0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   84ee4:	10000b0e 	bge	r2,zero,84f14 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   84ee8:	01400304 	movi	r5,12
   84eec:	e13ffd17 	ldw	r4,-12(fp)
   84ef0:	00830b80 	call	830b8 <__mulsi3>
   84ef4:	1007883a 	mov	r3,r2
   84ef8:	00800434 	movhi	r2,16
   84efc:	10822804 	addi	r2,r2,2208
   84f00:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   84f04:	e0bffe17 	ldw	r2,-8(fp)
   84f08:	18800226 	beq	r3,r2,84f14 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   84f0c:	00bffcc4 	movi	r2,-13
   84f10:	00000806 	br	84f34 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   84f14:	e0bffd17 	ldw	r2,-12(fp)
   84f18:	10800044 	addi	r2,r2,1
   84f1c:	e0bffd15 	stw	r2,-12(fp)
   84f20:	d0a00817 	ldw	r2,-32736(gp)
   84f24:	1007883a 	mov	r3,r2
   84f28:	e0bffd17 	ldw	r2,-12(fp)
   84f2c:	18bfd92e 	bgeu	r3,r2,84e94 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   84f30:	0005883a 	mov	r2,zero
}
   84f34:	e6ffff04 	addi	sp,fp,-4
   84f38:	dfc00217 	ldw	ra,8(sp)
   84f3c:	df000117 	ldw	fp,4(sp)
   84f40:	dc000017 	ldw	r16,0(sp)
   84f44:	dec00304 	addi	sp,sp,12
   84f48:	f800283a 	ret

00084f4c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   84f4c:	defff604 	addi	sp,sp,-40
   84f50:	dfc00915 	stw	ra,36(sp)
   84f54:	df000815 	stw	fp,32(sp)
   84f58:	df000804 	addi	fp,sp,32
   84f5c:	e13ffd15 	stw	r4,-12(fp)
   84f60:	e17ffe15 	stw	r5,-8(fp)
   84f64:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   84f68:	00bfffc4 	movi	r2,-1
   84f6c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   84f70:	00bffb44 	movi	r2,-19
   84f74:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   84f78:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   84f7c:	d1600604 	addi	r5,gp,-32744
   84f80:	e13ffd17 	ldw	r4,-12(fp)
   84f84:	00852700 	call	85270 <alt_find_dev>
   84f88:	e0bff815 	stw	r2,-32(fp)
   84f8c:	e0bff817 	ldw	r2,-32(fp)
   84f90:	1000051e 	bne	r2,zero,84fa8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   84f94:	e13ffd17 	ldw	r4,-12(fp)
   84f98:	00853000 	call	85300 <alt_find_file>
   84f9c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   84fa0:	00800044 	movi	r2,1
   84fa4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   84fa8:	e0bff817 	ldw	r2,-32(fp)
   84fac:	10002b26 	beq	r2,zero,8505c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   84fb0:	e13ff817 	ldw	r4,-32(fp)
   84fb4:	00854080 	call	85408 <alt_get_fd>
   84fb8:	e0bff915 	stw	r2,-28(fp)
   84fbc:	e0bff917 	ldw	r2,-28(fp)
   84fc0:	1000030e 	bge	r2,zero,84fd0 <open+0x84>
    {
      status = index;
   84fc4:	e0bff917 	ldw	r2,-28(fp)
   84fc8:	e0bffa15 	stw	r2,-24(fp)
   84fcc:	00002506 	br	85064 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   84fd0:	01400304 	movi	r5,12
   84fd4:	e13ff917 	ldw	r4,-28(fp)
   84fd8:	00830b80 	call	830b8 <__mulsi3>
   84fdc:	1007883a 	mov	r3,r2
   84fe0:	00800434 	movhi	r2,16
   84fe4:	10822804 	addi	r2,r2,2208
   84fe8:	1885883a 	add	r2,r3,r2
   84fec:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   84ff0:	e0fffe17 	ldw	r3,-8(fp)
   84ff4:	00900034 	movhi	r2,16384
   84ff8:	10bfffc4 	addi	r2,r2,-1
   84ffc:	1886703a 	and	r3,r3,r2
   85000:	e0bffc17 	ldw	r2,-16(fp)
   85004:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   85008:	e0bffb17 	ldw	r2,-20(fp)
   8500c:	1000051e 	bne	r2,zero,85024 <open+0xd8>
   85010:	e13ffc17 	ldw	r4,-16(fp)
   85014:	0084e600 	call	84e60 <alt_file_locked>
   85018:	e0bffa15 	stw	r2,-24(fp)
   8501c:	e0bffa17 	ldw	r2,-24(fp)
   85020:	10001016 	blt	r2,zero,85064 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   85024:	e0bff817 	ldw	r2,-32(fp)
   85028:	10800317 	ldw	r2,12(r2)
   8502c:	10000826 	beq	r2,zero,85050 <open+0x104>
   85030:	e0bff817 	ldw	r2,-32(fp)
   85034:	10800317 	ldw	r2,12(r2)
   85038:	e1ffff17 	ldw	r7,-4(fp)
   8503c:	e1bffe17 	ldw	r6,-8(fp)
   85040:	e17ffd17 	ldw	r5,-12(fp)
   85044:	e13ffc17 	ldw	r4,-16(fp)
   85048:	103ee83a 	callr	r2
   8504c:	00000106 	br	85054 <open+0x108>
   85050:	0005883a 	mov	r2,zero
   85054:	e0bffa15 	stw	r2,-24(fp)
   85058:	00000206 	br	85064 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8505c:	00bffb44 	movi	r2,-19
   85060:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   85064:	e0bffa17 	ldw	r2,-24(fp)
   85068:	1000090e 	bge	r2,zero,85090 <open+0x144>
  {
    alt_release_fd (index);  
   8506c:	e13ff917 	ldw	r4,-28(fp)
   85070:	00838040 	call	83804 <alt_release_fd>
    ALT_ERRNO = -status;
   85074:	0084e240 	call	84e24 <alt_get_errno>
   85078:	1007883a 	mov	r3,r2
   8507c:	e0bffa17 	ldw	r2,-24(fp)
   85080:	0085c83a 	sub	r2,zero,r2
   85084:	18800015 	stw	r2,0(r3)
    return -1;
   85088:	00bfffc4 	movi	r2,-1
   8508c:	00000106 	br	85094 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   85090:	e0bff917 	ldw	r2,-28(fp)
}
   85094:	e037883a 	mov	sp,fp
   85098:	dfc00117 	ldw	ra,4(sp)
   8509c:	df000017 	ldw	fp,0(sp)
   850a0:	dec00204 	addi	sp,sp,8
   850a4:	f800283a 	ret

000850a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   850a8:	defffa04 	addi	sp,sp,-24
   850ac:	df000515 	stw	fp,20(sp)
   850b0:	df000504 	addi	fp,sp,20
   850b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   850b8:	0005303a 	rdctl	r2,status
   850bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   850c0:	e0fffc17 	ldw	r3,-16(fp)
   850c4:	00bfff84 	movi	r2,-2
   850c8:	1884703a 	and	r2,r3,r2
   850cc:	1001703a 	wrctl	status,r2
  
  return context;
   850d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   850d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   850d8:	e0bfff17 	ldw	r2,-4(fp)
   850dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   850e0:	e0bffd17 	ldw	r2,-12(fp)
   850e4:	10800017 	ldw	r2,0(r2)
   850e8:	e0fffd17 	ldw	r3,-12(fp)
   850ec:	18c00117 	ldw	r3,4(r3)
   850f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   850f4:	e0bffd17 	ldw	r2,-12(fp)
   850f8:	10800117 	ldw	r2,4(r2)
   850fc:	e0fffd17 	ldw	r3,-12(fp)
   85100:	18c00017 	ldw	r3,0(r3)
   85104:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   85108:	e0bffd17 	ldw	r2,-12(fp)
   8510c:	e0fffd17 	ldw	r3,-12(fp)
   85110:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   85114:	e0bffd17 	ldw	r2,-12(fp)
   85118:	e0fffd17 	ldw	r3,-12(fp)
   8511c:	10c00015 	stw	r3,0(r2)
   85120:	e0bffb17 	ldw	r2,-20(fp)
   85124:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85128:	e0bffe17 	ldw	r2,-8(fp)
   8512c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   85130:	0001883a 	nop
   85134:	e037883a 	mov	sp,fp
   85138:	df000017 	ldw	fp,0(sp)
   8513c:	dec00104 	addi	sp,sp,4
   85140:	f800283a 	ret

00085144 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   85144:	defffb04 	addi	sp,sp,-20
   85148:	dfc00415 	stw	ra,16(sp)
   8514c:	df000315 	stw	fp,12(sp)
   85150:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   85154:	d0a00c17 	ldw	r2,-32720(gp)
   85158:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8515c:	d0a01717 	ldw	r2,-32676(gp)
   85160:	10800044 	addi	r2,r2,1
   85164:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85168:	00002e06 	br	85224 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8516c:	e0bffd17 	ldw	r2,-12(fp)
   85170:	10800017 	ldw	r2,0(r2)
   85174:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   85178:	e0bffd17 	ldw	r2,-12(fp)
   8517c:	10800403 	ldbu	r2,16(r2)
   85180:	10803fcc 	andi	r2,r2,255
   85184:	10000426 	beq	r2,zero,85198 <alt_tick+0x54>
   85188:	d0a01717 	ldw	r2,-32676(gp)
   8518c:	1000021e 	bne	r2,zero,85198 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   85190:	e0bffd17 	ldw	r2,-12(fp)
   85194:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   85198:	e0bffd17 	ldw	r2,-12(fp)
   8519c:	10800217 	ldw	r2,8(r2)
   851a0:	d0e01717 	ldw	r3,-32676(gp)
   851a4:	18801d36 	bltu	r3,r2,8521c <alt_tick+0xd8>
   851a8:	e0bffd17 	ldw	r2,-12(fp)
   851ac:	10800403 	ldbu	r2,16(r2)
   851b0:	10803fcc 	andi	r2,r2,255
   851b4:	1000191e 	bne	r2,zero,8521c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   851b8:	e0bffd17 	ldw	r2,-12(fp)
   851bc:	10800317 	ldw	r2,12(r2)
   851c0:	e0fffd17 	ldw	r3,-12(fp)
   851c4:	18c00517 	ldw	r3,20(r3)
   851c8:	1809883a 	mov	r4,r3
   851cc:	103ee83a 	callr	r2
   851d0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   851d4:	e0bfff17 	ldw	r2,-4(fp)
   851d8:	1000031e 	bne	r2,zero,851e8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   851dc:	e13ffd17 	ldw	r4,-12(fp)
   851e0:	00850a80 	call	850a8 <alt_alarm_stop>
   851e4:	00000d06 	br	8521c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   851e8:	e0bffd17 	ldw	r2,-12(fp)
   851ec:	10c00217 	ldw	r3,8(r2)
   851f0:	e0bfff17 	ldw	r2,-4(fp)
   851f4:	1887883a 	add	r3,r3,r2
   851f8:	e0bffd17 	ldw	r2,-12(fp)
   851fc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   85200:	e0bffd17 	ldw	r2,-12(fp)
   85204:	10c00217 	ldw	r3,8(r2)
   85208:	d0a01717 	ldw	r2,-32676(gp)
   8520c:	1880032e 	bgeu	r3,r2,8521c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   85210:	e0bffd17 	ldw	r2,-12(fp)
   85214:	00c00044 	movi	r3,1
   85218:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8521c:	e0bffe17 	ldw	r2,-8(fp)
   85220:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   85224:	e0fffd17 	ldw	r3,-12(fp)
   85228:	d0a00c04 	addi	r2,gp,-32720
   8522c:	18bfcf1e 	bne	r3,r2,8516c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   85230:	0001883a 	nop
}
   85234:	0001883a 	nop
   85238:	e037883a 	mov	sp,fp
   8523c:	dfc00117 	ldw	ra,4(sp)
   85240:	df000017 	ldw	fp,0(sp)
   85244:	dec00204 	addi	sp,sp,8
   85248:	f800283a 	ret

0008524c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   8524c:	deffff04 	addi	sp,sp,-4
   85250:	df000015 	stw	fp,0(sp)
   85254:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   85258:	000170fa 	wrctl	ienable,zero
}
   8525c:	0001883a 	nop
   85260:	e037883a 	mov	sp,fp
   85264:	df000017 	ldw	fp,0(sp)
   85268:	dec00104 	addi	sp,sp,4
   8526c:	f800283a 	ret

00085270 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   85270:	defffa04 	addi	sp,sp,-24
   85274:	dfc00515 	stw	ra,20(sp)
   85278:	df000415 	stw	fp,16(sp)
   8527c:	df000404 	addi	fp,sp,16
   85280:	e13ffe15 	stw	r4,-8(fp)
   85284:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   85288:	e0bfff17 	ldw	r2,-4(fp)
   8528c:	10800017 	ldw	r2,0(r2)
   85290:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   85294:	e13ffe17 	ldw	r4,-8(fp)
   85298:	00803a80 	call	803a8 <strlen>
   8529c:	10800044 	addi	r2,r2,1
   852a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   852a4:	00000d06 	br	852dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   852a8:	e0bffc17 	ldw	r2,-16(fp)
   852ac:	10800217 	ldw	r2,8(r2)
   852b0:	e0fffd17 	ldw	r3,-12(fp)
   852b4:	180d883a 	mov	r6,r3
   852b8:	e17ffe17 	ldw	r5,-8(fp)
   852bc:	1009883a 	mov	r4,r2
   852c0:	00855b40 	call	855b4 <memcmp>
   852c4:	1000021e 	bne	r2,zero,852d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   852c8:	e0bffc17 	ldw	r2,-16(fp)
   852cc:	00000706 	br	852ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   852d0:	e0bffc17 	ldw	r2,-16(fp)
   852d4:	10800017 	ldw	r2,0(r2)
   852d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   852dc:	e0fffc17 	ldw	r3,-16(fp)
   852e0:	e0bfff17 	ldw	r2,-4(fp)
   852e4:	18bff01e 	bne	r3,r2,852a8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   852e8:	0005883a 	mov	r2,zero
}
   852ec:	e037883a 	mov	sp,fp
   852f0:	dfc00117 	ldw	ra,4(sp)
   852f4:	df000017 	ldw	fp,0(sp)
   852f8:	dec00204 	addi	sp,sp,8
   852fc:	f800283a 	ret

00085300 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   85300:	defffb04 	addi	sp,sp,-20
   85304:	dfc00415 	stw	ra,16(sp)
   85308:	df000315 	stw	fp,12(sp)
   8530c:	df000304 	addi	fp,sp,12
   85310:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   85314:	d0a00417 	ldw	r2,-32752(gp)
   85318:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8531c:	00003106 	br	853e4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   85320:	e0bffd17 	ldw	r2,-12(fp)
   85324:	10800217 	ldw	r2,8(r2)
   85328:	1009883a 	mov	r4,r2
   8532c:	00803a80 	call	803a8 <strlen>
   85330:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   85334:	e0bffd17 	ldw	r2,-12(fp)
   85338:	10c00217 	ldw	r3,8(r2)
   8533c:	e0bffe17 	ldw	r2,-8(fp)
   85340:	10bfffc4 	addi	r2,r2,-1
   85344:	1885883a 	add	r2,r3,r2
   85348:	10800003 	ldbu	r2,0(r2)
   8534c:	10803fcc 	andi	r2,r2,255
   85350:	1080201c 	xori	r2,r2,128
   85354:	10bfe004 	addi	r2,r2,-128
   85358:	10800bd8 	cmpnei	r2,r2,47
   8535c:	1000031e 	bne	r2,zero,8536c <alt_find_file+0x6c>
    {
      len -= 1;
   85360:	e0bffe17 	ldw	r2,-8(fp)
   85364:	10bfffc4 	addi	r2,r2,-1
   85368:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8536c:	e0bffe17 	ldw	r2,-8(fp)
   85370:	e0ffff17 	ldw	r3,-4(fp)
   85374:	1885883a 	add	r2,r3,r2
   85378:	10800003 	ldbu	r2,0(r2)
   8537c:	10803fcc 	andi	r2,r2,255
   85380:	1080201c 	xori	r2,r2,128
   85384:	10bfe004 	addi	r2,r2,-128
   85388:	10800be0 	cmpeqi	r2,r2,47
   8538c:	1000081e 	bne	r2,zero,853b0 <alt_find_file+0xb0>
   85390:	e0bffe17 	ldw	r2,-8(fp)
   85394:	e0ffff17 	ldw	r3,-4(fp)
   85398:	1885883a 	add	r2,r3,r2
   8539c:	10800003 	ldbu	r2,0(r2)
   853a0:	10803fcc 	andi	r2,r2,255
   853a4:	1080201c 	xori	r2,r2,128
   853a8:	10bfe004 	addi	r2,r2,-128
   853ac:	10000a1e 	bne	r2,zero,853d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   853b0:	e0bffd17 	ldw	r2,-12(fp)
   853b4:	10800217 	ldw	r2,8(r2)
   853b8:	e0fffe17 	ldw	r3,-8(fp)
   853bc:	180d883a 	mov	r6,r3
   853c0:	e17fff17 	ldw	r5,-4(fp)
   853c4:	1009883a 	mov	r4,r2
   853c8:	00855b40 	call	855b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   853cc:	1000021e 	bne	r2,zero,853d8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   853d0:	e0bffd17 	ldw	r2,-12(fp)
   853d4:	00000706 	br	853f4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   853d8:	e0bffd17 	ldw	r2,-12(fp)
   853dc:	10800017 	ldw	r2,0(r2)
   853e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   853e4:	e0fffd17 	ldw	r3,-12(fp)
   853e8:	d0a00404 	addi	r2,gp,-32752
   853ec:	18bfcc1e 	bne	r3,r2,85320 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   853f0:	0005883a 	mov	r2,zero
}
   853f4:	e037883a 	mov	sp,fp
   853f8:	dfc00117 	ldw	ra,4(sp)
   853fc:	df000017 	ldw	fp,0(sp)
   85400:	dec00204 	addi	sp,sp,8
   85404:	f800283a 	ret

00085408 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   85408:	defffa04 	addi	sp,sp,-24
   8540c:	dfc00515 	stw	ra,20(sp)
   85410:	df000415 	stw	fp,16(sp)
   85414:	dc000315 	stw	r16,12(sp)
   85418:	df000404 	addi	fp,sp,16
   8541c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   85420:	00bffa04 	movi	r2,-24
   85424:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85428:	e03ffc15 	stw	zero,-16(fp)
   8542c:	00001d06 	br	854a4 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   85430:	04000434 	movhi	r16,16
   85434:	84022804 	addi	r16,r16,2208
   85438:	e0bffc17 	ldw	r2,-16(fp)
   8543c:	01400304 	movi	r5,12
   85440:	1009883a 	mov	r4,r2
   85444:	00830b80 	call	830b8 <__mulsi3>
   85448:	8085883a 	add	r2,r16,r2
   8544c:	10800017 	ldw	r2,0(r2)
   85450:	1000111e 	bne	r2,zero,85498 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   85454:	04000434 	movhi	r16,16
   85458:	84022804 	addi	r16,r16,2208
   8545c:	e0bffc17 	ldw	r2,-16(fp)
   85460:	01400304 	movi	r5,12
   85464:	1009883a 	mov	r4,r2
   85468:	00830b80 	call	830b8 <__mulsi3>
   8546c:	8085883a 	add	r2,r16,r2
   85470:	e0fffe17 	ldw	r3,-8(fp)
   85474:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   85478:	d0e00817 	ldw	r3,-32736(gp)
   8547c:	e0bffc17 	ldw	r2,-16(fp)
   85480:	1880020e 	bge	r3,r2,8548c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   85484:	e0bffc17 	ldw	r2,-16(fp)
   85488:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   8548c:	e0bffc17 	ldw	r2,-16(fp)
   85490:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   85494:	00000606 	br	854b0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   85498:	e0bffc17 	ldw	r2,-16(fp)
   8549c:	10800044 	addi	r2,r2,1
   854a0:	e0bffc15 	stw	r2,-16(fp)
   854a4:	e0bffc17 	ldw	r2,-16(fp)
   854a8:	10800810 	cmplti	r2,r2,32
   854ac:	103fe01e 	bne	r2,zero,85430 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   854b0:	e0bffd17 	ldw	r2,-12(fp)
}
   854b4:	e6ffff04 	addi	sp,fp,-4
   854b8:	dfc00217 	ldw	ra,8(sp)
   854bc:	df000117 	ldw	fp,4(sp)
   854c0:	dc000017 	ldw	r16,0(sp)
   854c4:	dec00304 	addi	sp,sp,12
   854c8:	f800283a 	ret

000854cc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   854cc:	defffe04 	addi	sp,sp,-8
   854d0:	df000115 	stw	fp,4(sp)
   854d4:	df000104 	addi	fp,sp,4
   854d8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   854dc:	e0bfff17 	ldw	r2,-4(fp)
   854e0:	10bffe84 	addi	r2,r2,-6
   854e4:	10c00428 	cmpgeui	r3,r2,16
   854e8:	18001a1e 	bne	r3,zero,85554 <alt_exception_cause_generated_bad_addr+0x88>
   854ec:	100690ba 	slli	r3,r2,2
   854f0:	00800234 	movhi	r2,8
   854f4:	10954104 	addi	r2,r2,21764
   854f8:	1885883a 	add	r2,r3,r2
   854fc:	10800017 	ldw	r2,0(r2)
   85500:	1000683a 	jmp	r2
   85504:	00085544 	movi	zero,8533
   85508:	00085544 	movi	zero,8533
   8550c:	00085554 	movui	zero,8533
   85510:	00085554 	movui	zero,8533
   85514:	00085554 	movui	zero,8533
   85518:	00085544 	movi	zero,8533
   8551c:	0008554c 	andi	zero,zero,8533
   85520:	00085554 	movui	zero,8533
   85524:	00085544 	movi	zero,8533
   85528:	00085544 	movi	zero,8533
   8552c:	00085554 	movui	zero,8533
   85530:	00085544 	movi	zero,8533
   85534:	0008554c 	andi	zero,zero,8533
   85538:	00085554 	movui	zero,8533
   8553c:	00085554 	movui	zero,8533
   85540:	00085544 	movi	zero,8533
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   85544:	00800044 	movi	r2,1
   85548:	00000306 	br	85558 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   8554c:	0005883a 	mov	r2,zero
   85550:	00000106 	br	85558 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   85554:	0005883a 	mov	r2,zero
  }
}
   85558:	e037883a 	mov	sp,fp
   8555c:	df000017 	ldw	fp,0(sp)
   85560:	dec00104 	addi	sp,sp,4
   85564:	f800283a 	ret

00085568 <atexit>:
   85568:	200b883a 	mov	r5,r4
   8556c:	000f883a 	mov	r7,zero
   85570:	000d883a 	mov	r6,zero
   85574:	0009883a 	mov	r4,zero
   85578:	00856301 	jmpi	85630 <__register_exitproc>

0008557c <exit>:
   8557c:	defffe04 	addi	sp,sp,-8
   85580:	000b883a 	mov	r5,zero
   85584:	dc000015 	stw	r16,0(sp)
   85588:	dfc00115 	stw	ra,4(sp)
   8558c:	2021883a 	mov	r16,r4
   85590:	00857480 	call	85748 <__call_exitprocs>
   85594:	00800434 	movhi	r2,16
   85598:	1086a004 	addi	r2,r2,6784
   8559c:	11000017 	ldw	r4,0(r2)
   855a0:	20800f17 	ldw	r2,60(r4)
   855a4:	10000126 	beq	r2,zero,855ac <exit+0x30>
   855a8:	103ee83a 	callr	r2
   855ac:	8009883a 	mov	r4,r16
   855b0:	00858c80 	call	858c8 <_exit>

000855b4 <memcmp>:
   855b4:	01c000c4 	movi	r7,3
   855b8:	3980192e 	bgeu	r7,r6,85620 <memcmp+0x6c>
   855bc:	2144b03a 	or	r2,r4,r5
   855c0:	11c4703a 	and	r2,r2,r7
   855c4:	10000f26 	beq	r2,zero,85604 <memcmp+0x50>
   855c8:	20800003 	ldbu	r2,0(r4)
   855cc:	28c00003 	ldbu	r3,0(r5)
   855d0:	10c0151e 	bne	r2,r3,85628 <memcmp+0x74>
   855d4:	31bfff84 	addi	r6,r6,-2
   855d8:	01ffffc4 	movi	r7,-1
   855dc:	00000406 	br	855f0 <memcmp+0x3c>
   855e0:	20800003 	ldbu	r2,0(r4)
   855e4:	28c00003 	ldbu	r3,0(r5)
   855e8:	31bfffc4 	addi	r6,r6,-1
   855ec:	10c00e1e 	bne	r2,r3,85628 <memcmp+0x74>
   855f0:	21000044 	addi	r4,r4,1
   855f4:	29400044 	addi	r5,r5,1
   855f8:	31fff91e 	bne	r6,r7,855e0 <memcmp+0x2c>
   855fc:	0005883a 	mov	r2,zero
   85600:	f800283a 	ret
   85604:	20c00017 	ldw	r3,0(r4)
   85608:	28800017 	ldw	r2,0(r5)
   8560c:	18bfee1e 	bne	r3,r2,855c8 <memcmp+0x14>
   85610:	31bfff04 	addi	r6,r6,-4
   85614:	21000104 	addi	r4,r4,4
   85618:	29400104 	addi	r5,r5,4
   8561c:	39bff936 	bltu	r7,r6,85604 <memcmp+0x50>
   85620:	303fe91e 	bne	r6,zero,855c8 <memcmp+0x14>
   85624:	003ff506 	br	855fc <memcmp+0x48>
   85628:	10c5c83a 	sub	r2,r2,r3
   8562c:	f800283a 	ret

00085630 <__register_exitproc>:
   85630:	defffa04 	addi	sp,sp,-24
   85634:	dc000315 	stw	r16,12(sp)
   85638:	04000434 	movhi	r16,16
   8563c:	8406a004 	addi	r16,r16,6784
   85640:	80c00017 	ldw	r3,0(r16)
   85644:	dc400415 	stw	r17,16(sp)
   85648:	dfc00515 	stw	ra,20(sp)
   8564c:	18805217 	ldw	r2,328(r3)
   85650:	2023883a 	mov	r17,r4
   85654:	10003726 	beq	r2,zero,85734 <__register_exitproc+0x104>
   85658:	10c00117 	ldw	r3,4(r2)
   8565c:	010007c4 	movi	r4,31
   85660:	20c00e16 	blt	r4,r3,8569c <__register_exitproc+0x6c>
   85664:	1a000044 	addi	r8,r3,1
   85668:	8800221e 	bne	r17,zero,856f4 <__register_exitproc+0xc4>
   8566c:	18c00084 	addi	r3,r3,2
   85670:	18c7883a 	add	r3,r3,r3
   85674:	18c7883a 	add	r3,r3,r3
   85678:	12000115 	stw	r8,4(r2)
   8567c:	10c7883a 	add	r3,r2,r3
   85680:	19400015 	stw	r5,0(r3)
   85684:	0005883a 	mov	r2,zero
   85688:	dfc00517 	ldw	ra,20(sp)
   8568c:	dc400417 	ldw	r17,16(sp)
   85690:	dc000317 	ldw	r16,12(sp)
   85694:	dec00604 	addi	sp,sp,24
   85698:	f800283a 	ret
   8569c:	00800034 	movhi	r2,0
   856a0:	10800004 	addi	r2,r2,0
   856a4:	10002626 	beq	r2,zero,85740 <__register_exitproc+0x110>
   856a8:	01006404 	movi	r4,400
   856ac:	d9400015 	stw	r5,0(sp)
   856b0:	d9800115 	stw	r6,4(sp)
   856b4:	d9c00215 	stw	r7,8(sp)
   856b8:	00000000 	call	0 <__alt_mem_program_memory-0x80000>
   856bc:	d9400017 	ldw	r5,0(sp)
   856c0:	d9800117 	ldw	r6,4(sp)
   856c4:	d9c00217 	ldw	r7,8(sp)
   856c8:	10001d26 	beq	r2,zero,85740 <__register_exitproc+0x110>
   856cc:	81000017 	ldw	r4,0(r16)
   856d0:	10000115 	stw	zero,4(r2)
   856d4:	02000044 	movi	r8,1
   856d8:	22405217 	ldw	r9,328(r4)
   856dc:	0007883a 	mov	r3,zero
   856e0:	12400015 	stw	r9,0(r2)
   856e4:	20805215 	stw	r2,328(r4)
   856e8:	10006215 	stw	zero,392(r2)
   856ec:	10006315 	stw	zero,396(r2)
   856f0:	883fde26 	beq	r17,zero,8566c <__register_exitproc+0x3c>
   856f4:	18c9883a 	add	r4,r3,r3
   856f8:	2109883a 	add	r4,r4,r4
   856fc:	1109883a 	add	r4,r2,r4
   85700:	21802215 	stw	r6,136(r4)
   85704:	01800044 	movi	r6,1
   85708:	12406217 	ldw	r9,392(r2)
   8570c:	30cc983a 	sll	r6,r6,r3
   85710:	4992b03a 	or	r9,r9,r6
   85714:	12406215 	stw	r9,392(r2)
   85718:	21c04215 	stw	r7,264(r4)
   8571c:	01000084 	movi	r4,2
   85720:	893fd21e 	bne	r17,r4,8566c <__register_exitproc+0x3c>
   85724:	11006317 	ldw	r4,396(r2)
   85728:	218cb03a 	or	r6,r4,r6
   8572c:	11806315 	stw	r6,396(r2)
   85730:	003fce06 	br	8566c <__register_exitproc+0x3c>
   85734:	18805304 	addi	r2,r3,332
   85738:	18805215 	stw	r2,328(r3)
   8573c:	003fc606 	br	85658 <__register_exitproc+0x28>
   85740:	00bfffc4 	movi	r2,-1
   85744:	003fd006 	br	85688 <__register_exitproc+0x58>

00085748 <__call_exitprocs>:
   85748:	defff504 	addi	sp,sp,-44
   8574c:	df000915 	stw	fp,36(sp)
   85750:	dd400615 	stw	r21,24(sp)
   85754:	dc800315 	stw	r18,12(sp)
   85758:	dfc00a15 	stw	ra,40(sp)
   8575c:	ddc00815 	stw	r23,32(sp)
   85760:	dd800715 	stw	r22,28(sp)
   85764:	dd000515 	stw	r20,20(sp)
   85768:	dcc00415 	stw	r19,16(sp)
   8576c:	dc400215 	stw	r17,8(sp)
   85770:	dc000115 	stw	r16,4(sp)
   85774:	d9000015 	stw	r4,0(sp)
   85778:	2839883a 	mov	fp,r5
   8577c:	04800044 	movi	r18,1
   85780:	057fffc4 	movi	r21,-1
   85784:	00800434 	movhi	r2,16
   85788:	1086a004 	addi	r2,r2,6784
   8578c:	12000017 	ldw	r8,0(r2)
   85790:	45005217 	ldw	r20,328(r8)
   85794:	44c05204 	addi	r19,r8,328
   85798:	a0001c26 	beq	r20,zero,8580c <__call_exitprocs+0xc4>
   8579c:	a0800117 	ldw	r2,4(r20)
   857a0:	15ffffc4 	addi	r23,r2,-1
   857a4:	b8000d16 	blt	r23,zero,857dc <__call_exitprocs+0x94>
   857a8:	14000044 	addi	r16,r2,1
   857ac:	8421883a 	add	r16,r16,r16
   857b0:	8421883a 	add	r16,r16,r16
   857b4:	84402004 	addi	r17,r16,128
   857b8:	a463883a 	add	r17,r20,r17
   857bc:	a421883a 	add	r16,r20,r16
   857c0:	e0001e26 	beq	fp,zero,8583c <__call_exitprocs+0xf4>
   857c4:	80804017 	ldw	r2,256(r16)
   857c8:	e0801c26 	beq	fp,r2,8583c <__call_exitprocs+0xf4>
   857cc:	bdffffc4 	addi	r23,r23,-1
   857d0:	843fff04 	addi	r16,r16,-4
   857d4:	8c7fff04 	addi	r17,r17,-4
   857d8:	bd7ff91e 	bne	r23,r21,857c0 <__call_exitprocs+0x78>
   857dc:	00800034 	movhi	r2,0
   857e0:	10800004 	addi	r2,r2,0
   857e4:	10000926 	beq	r2,zero,8580c <__call_exitprocs+0xc4>
   857e8:	a0800117 	ldw	r2,4(r20)
   857ec:	1000301e 	bne	r2,zero,858b0 <__call_exitprocs+0x168>
   857f0:	a0800017 	ldw	r2,0(r20)
   857f4:	10003226 	beq	r2,zero,858c0 <__call_exitprocs+0x178>
   857f8:	a009883a 	mov	r4,r20
   857fc:	98800015 	stw	r2,0(r19)
   85800:	00000000 	call	0 <__alt_mem_program_memory-0x80000>
   85804:	9d000017 	ldw	r20,0(r19)
   85808:	a03fe41e 	bne	r20,zero,8579c <__call_exitprocs+0x54>
   8580c:	dfc00a17 	ldw	ra,40(sp)
   85810:	df000917 	ldw	fp,36(sp)
   85814:	ddc00817 	ldw	r23,32(sp)
   85818:	dd800717 	ldw	r22,28(sp)
   8581c:	dd400617 	ldw	r21,24(sp)
   85820:	dd000517 	ldw	r20,20(sp)
   85824:	dcc00417 	ldw	r19,16(sp)
   85828:	dc800317 	ldw	r18,12(sp)
   8582c:	dc400217 	ldw	r17,8(sp)
   85830:	dc000117 	ldw	r16,4(sp)
   85834:	dec00b04 	addi	sp,sp,44
   85838:	f800283a 	ret
   8583c:	a0800117 	ldw	r2,4(r20)
   85840:	80c00017 	ldw	r3,0(r16)
   85844:	10bfffc4 	addi	r2,r2,-1
   85848:	15c01426 	beq	r2,r23,8589c <__call_exitprocs+0x154>
   8584c:	80000015 	stw	zero,0(r16)
   85850:	183fde26 	beq	r3,zero,857cc <__call_exitprocs+0x84>
   85854:	95c8983a 	sll	r4,r18,r23
   85858:	a0806217 	ldw	r2,392(r20)
   8585c:	a5800117 	ldw	r22,4(r20)
   85860:	2084703a 	and	r2,r4,r2
   85864:	10000b26 	beq	r2,zero,85894 <__call_exitprocs+0x14c>
   85868:	a0806317 	ldw	r2,396(r20)
   8586c:	2088703a 	and	r4,r4,r2
   85870:	20000c1e 	bne	r4,zero,858a4 <__call_exitprocs+0x15c>
   85874:	89400017 	ldw	r5,0(r17)
   85878:	d9000017 	ldw	r4,0(sp)
   8587c:	183ee83a 	callr	r3
   85880:	a0800117 	ldw	r2,4(r20)
   85884:	15bfbf1e 	bne	r2,r22,85784 <__call_exitprocs+0x3c>
   85888:	98800017 	ldw	r2,0(r19)
   8588c:	153fcf26 	beq	r2,r20,857cc <__call_exitprocs+0x84>
   85890:	003fbc06 	br	85784 <__call_exitprocs+0x3c>
   85894:	183ee83a 	callr	r3
   85898:	003ff906 	br	85880 <__call_exitprocs+0x138>
   8589c:	a5c00115 	stw	r23,4(r20)
   858a0:	003feb06 	br	85850 <__call_exitprocs+0x108>
   858a4:	89000017 	ldw	r4,0(r17)
   858a8:	183ee83a 	callr	r3
   858ac:	003ff406 	br	85880 <__call_exitprocs+0x138>
   858b0:	a0800017 	ldw	r2,0(r20)
   858b4:	a027883a 	mov	r19,r20
   858b8:	1029883a 	mov	r20,r2
   858bc:	003fb606 	br	85798 <__call_exitprocs+0x50>
   858c0:	0005883a 	mov	r2,zero
   858c4:	003ffb06 	br	858b4 <__call_exitprocs+0x16c>

000858c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   858c8:	defffd04 	addi	sp,sp,-12
   858cc:	df000215 	stw	fp,8(sp)
   858d0:	df000204 	addi	fp,sp,8
   858d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   858d8:	0001883a 	nop
   858dc:	e0bfff17 	ldw	r2,-4(fp)
   858e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   858e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   858e8:	10000226 	beq	r2,zero,858f4 <_exit+0x2c>
    ALT_SIM_FAIL();
   858ec:	002af070 	cmpltui	zero,zero,43969
   858f0:	00000106 	br	858f8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   858f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   858f8:	003fff06 	br	858f8 <_exit+0x30>
