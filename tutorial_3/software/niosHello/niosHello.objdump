
niosHello.elf:     file format elf32-littlenios2
niosHello.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000048c4 memsz 0x000048c4 flags r-x
    LOAD off    0x0000604c vaddr 0x0001004c paddr 0x000048e4 align 2**12
         filesz 0x00000a2c memsz 0x00000a70 flags rw-
    LOAD off    0x00007000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000004c memsz 0x0000004c flags r--

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0000704c  2**0
                  CONTENTS
  2 .text         000048c4  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00010000  00010000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  0001004c  000048e4  0000604c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  00010a78  00005310  00006a78  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_1 00000000  00005310  00005310  0000704c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  00010abc  00010abc  0000704c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000008c8  00000000  00000000  00007070  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000148eb  00000000  00000000  00007938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000535a  00000000  00000000  0001c223  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000602b  00000000  00000000  0002157d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001274  00000000  00000000  000275a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001fd6  00000000  00000000  0002881c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  0002a7f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0002f2cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005d0  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000318e6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000318e9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000318f5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000318f6  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000318f7  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00031902  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003190d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00031918  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003d  00000000  00000000  00031921  2**0
                  CONTENTS, READONLY
 27 .jdi          00004f81  00000000  00000000  0003195e  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00045e55  00000000  00000000  000368df  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00010000 l    d  .rodata	00000000 .rodata
0001004c l    d  .rwdata	00000000 .rwdata
00010a78 l    d  .bss	00000000 .bss
00005310 l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00010abc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosHello_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00000298 l     F .text	00000008 __fp_unlock
000002ac l     F .text	0000019c __sinit.part.1
00000448 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0001004c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00002f10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00003024 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00003050 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00003144 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000322c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003318 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000034f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00010a74 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00003798 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000038d4 l     F .text	00000034 alt_dev_reg
00010a20 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00003d2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00003eec l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000404c l     F .text	0000003c alt_get_errno
00004088 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002d08 g     F .text	00000054 _isatty_r
00003430 g     F .text	0000007c alt_main
0000012c g     F .text	000000c0 _puts_r
00002a30 g     F .text	00000060 _lseek_r
000048e4 g       *ABS*	00000000 __flash_rwdata_start
00010abc g       *ABS*	00000000 __alt_heap_start
00001fe4 g     F .text	0000005c __sseek
000005f8 g     F .text	00000010 __sinit
00000450 g     F .text	00000078 __sfmoreglue
000034d0 g     F .text	00000024 __malloc_unlock
000016d0 g     F .text	0000015c memmove
000005e0 g     F .text	00000018 _cleanup
000042d0 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002cac g     F .text	0000005c _fstat_r
00010a84 g     O .bss	00000004 errno
00001f60 g     F .text	00000008 __seofread
00010a8c g     O .bss	00000004 alt_argv
00018a4c g       *ABS*	00000000 _gp
00003768 g     F .text	00000030 usleep
000108a0 g     O .rwdata	00000180 alt_fd_list
000042f4 g     F .text	00000090 alt_find_dev
00001588 g     F .text	00000148 memcpy
000002a0 g     F .text	0000000c _cleanup_r
00003fd0 g     F .text	0000007c alt_io_redirect
000048e4 g       *ABS*	00000000 __DTOR_END__
000001ec g     F .text	00000014 puts
00003a34 g     F .text	000000ec altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002e54 g     F .text	00000064 .hidden __udivsi3
00003180 g     F .text	000000ac isatty
00010a80 g     O .bss	00000004 __malloc_top_pad
00000648 g     F .text	000004c8 __sfvwrite_r
00001eb8 g     F .text	00000054 _sbrk_r
00002c4c g     F .text	00000060 _read_r
00010a6c g     O .rwdata	00000004 alt_max_fd
00002250 g     F .text	000000f0 _fclose_r
000025cc g     F .text	00000030 fflush
00010a7c g     O .bss	00000004 __malloc_max_sbrked_mem
00003354 g     F .text	000000dc lseek
00010a4c g     O .rwdata	00000004 _global_impure_ptr
00001954 g     F .text	00000564 _realloc_r
00010abc g       *ABS*	00000000 __bss_end
00000618 g     F .text	00000018 __fp_lock_all
00010878 g     O .rwdata	00000028 alt_dev_null
00003d0c g     F .text	00000020 alt_dcache_flush_all
00010a78 g       *ABS*	00000000 __ram_rwdata_end
00010a64 g     O .rwdata	00000008 alt_dev_list
000037d4 g     F .text	00000100 write
0001004c g       *ABS*	00000000 __ram_rodata_end
0000308c g     F .text	000000b8 fstat
00002eb8 g     F .text	00000058 .hidden __umodsi3
00010abc g       *ABS*	00000000 end
000048e4 g       *ABS*	00000000 __CTOR_LIST__
00018000 g       *ABS*	00000000 __alt_stack_pointer
00003b20 g     F .text	00000094 altera_avalon_jtag_uart_write
00000608 g     F .text	00000004 __sfp_lock_acquire
000014a4 g     F .text	000000e4 memchr
00002720 g     F .text	00000310 _free_r
00004730 g     F .text	00000180 __call_exitprocs
00010a54 g     O .rwdata	00000004 __malloc_sbrk_base
00000020 g     F .text	0000003c _start
00003530 g     F .text	00000104 read
00003940 g     F .text	00000034 alt_sys_init
00004618 g     F .text	00000118 __register_exitproc
00000104 g     F .text	00000028 .hidden __mulsi3
0001004c g       *ABS*	00000000 __ram_rwdata_start
00010000 g       *ABS*	00000000 __ram_rodata_start
00010a94 g     O .bss	00000028 __malloc_current_mallinfo
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00003974 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000448c g     F .text	000000c4 alt_get_fd
00003bb4 g     F .text	00000158 alt_busy_sleep
000021fc g     F .text	00000054 _close_r
0000459c g     F .text	0000007c memcmp
00010abc g       *ABS*	00000000 __alt_stack_base
000020a8 g     F .text	00000154 __swsetup_r
000004c8 g     F .text	00000118 __sfp
00010470 g     O .rwdata	00000408 __malloc_av_
00000614 g     F .text	00000004 __sinit_lock_release
00001f0c g     F .text	00000054 __sread
00004384 g     F .text	00000108 alt_find_file
00003d68 g     F .text	000000a4 alt_dev_llist_insert
000034ac g     F .text	00000024 __malloc_lock
000036b8 g     F .text	000000b0 sbrk
00002570 g     F .text	0000005c _fflush_r
00010a78 g       *ABS*	00000000 __bss_start
0000182c g     F .text	00000128 memset
0000005c g     F .text	000000a8 main
00010a90 g     O .bss	00000004 alt_envp
00010a78 g     O .bss	00000004 __malloc_max_total_mem
000039d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002040 g     F .text	00000008 __sclose
00018000 g       *ABS*	00000000 __alt_heap_limit
00002340 g     F .text	00000014 fclose
00000c98 g     F .text	0000080c _malloc_r
00010a70 g     O .rwdata	00000004 alt_errno
00000b10 g     F .text	000000c4 _fwalk
00002d5c g     F .text	00000084 .hidden __divsi3
000025fc g     F .text	00000124 _malloc_trim_r
000048e4 g       *ABS*	00000000 __CTOR_END__
00010000 g       *ABS*	00000000 __flash_rodata_start
000048e4 g       *ABS*	00000000 __DTOR_LIST__
00003908 g     F .text	00000038 alt_irq_init
00003634 g     F .text	00000084 alt_release_fd
00004550 g     F .text	00000014 atexit
00002048 g     F .text	00000060 _write_r
00010a50 g     O .rwdata	00000004 _impure_ptr
00010a88 g     O .bss	00000004 alt_argc
00002354 g     F .text	0000021c __sflush_r
00003e6c g     F .text	00000060 _do_dtors
00000630 g     F .text	00000018 __fp_unlock_all
00010a5c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00010a78 g       *ABS*	00000000 _edata
00010abc g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00001f68 g     F .text	0000007c __swrite
00010a58 g     O .rwdata	00000004 __malloc_trim_threshold
00004564 g     F .text	00000038 exit
00000bd4 g     F .text	000000c4 _fwalk_reent
00002de0 g     F .text	00000074 .hidden __modsi3
00018000 g       *ABS*	00000000 __alt_data_end
0000060c g     F .text	00000004 __sfp_lock_release
000048b0 g     F .text	00000034 _exit
00002a90 g     F .text	000001bc __smakebuf_r
00000200 g     F .text	00000098 strlen
00004174 g     F .text	0000015c open
00003ecc g     F .text	00000020 alt_icache_flush_all
00003e0c g     F .text	00000060 _do_ctors
00002f4c g     F .text	000000d8 close
00003294 g     F .text	00000084 alt_load
00000610 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
      28:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
      2c:	d6a29314 	ori	gp,gp,35404
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
      34:	10829e14 	ori	r2,r2,2680

    movhi r3, %hi(__bss_end)
      38:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
      3c:	18c2af14 	ori	r3,r3,2748

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	00032940 	call	3294 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	00034300 	call	3430 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
#include <io.h> /* Leitura e escrita no Avalon */

#define PIO_1_BASE 0x19000
#define PIO_2_BASE 0x19010

int main(void){
      5c:	defffa04 	addi	sp,sp,-24
      60:	dfc00515 	stw	ra,20(sp)
      64:	df000415 	stw	fp,16(sp)
      68:	df000404 	addi	fp,sp,16
  unsigned int led = 0;
      6c:	e03ffc15 	stw	zero,-16(fp)
  unsigned led_speed = 50000;
      70:	00b0d414 	movui	r2,50000
      74:	e0bffd15 	stw	r2,-12(fp)
  alt_u32 speed_multiplier;
  alt_u32 enable;

  printf("Embarcados++ \n");
      78:	01000074 	movhi	r4,1
      7c:	21000004 	addi	r4,r4,0
      80:	00001ec0 	call	1ec <puts>

  while(1){
	  enable = IORD_32DIRECT(PIO_2_BASE, 0);
      84:	008000b4 	movhi	r2,2
      88:	10a40404 	addi	r2,r2,-28656
      8c:	10800037 	ldwio	r2,0(r2)
      90:	e0bffe15 	stw	r2,-8(fp)
	  if (enable){
      94:	e0bffe17 	ldw	r2,-8(fp)
      98:	103ffa26 	beq	r2,zero,84 <main+0x28>
		  speed_multiplier = IORD_32DIRECT(PIO_1_BASE, 0);
      9c:	008000b4 	movhi	r2,2
      a0:	10a40004 	addi	r2,r2,-28672
      a4:	10800037 	ldwio	r2,0(r2)
      a8:	e0bfff15 	stw	r2,-4(fp)
		  led_speed = 50000 * (speed_multiplier + 1);
      ac:	e0bfff17 	ldw	r2,-4(fp)
      b0:	10800044 	addi	r2,r2,1
      b4:	0170d414 	movui	r5,50000
      b8:	1009883a 	mov	r4,r2
      bc:	00001040 	call	104 <__mulsi3>
      c0:	e0bffd15 	stw	r2,-12(fp)
		  if (led <= 5){
      c4:	e0bffc17 	ldw	r2,-16(fp)
      c8:	108001a8 	cmpgeui	r2,r2,6
      cc:	10000b1e 	bne	r2,zero,fc <main+0xa0>
			  IOWR_32DIRECT(PIO_0_BASE, 0, 0x01 << led++);
      d0:	e0bffc17 	ldw	r2,-16(fp)
      d4:	10c00044 	addi	r3,r2,1
      d8:	e0fffc15 	stw	r3,-16(fp)
      dc:	00c00044 	movi	r3,1
      e0:	1886983a 	sll	r3,r3,r2
      e4:	008000b4 	movhi	r2,2
      e8:	10a40804 	addi	r2,r2,-28640
      ec:	10c00035 	stwio	r3,0(r2)
			  usleep(led_speed);
      f0:	e13ffd17 	ldw	r4,-12(fp)
      f4:	00037680 	call	3768 <usleep>
      f8:	003fe206 	br	84 <main+0x28>
		  }
		  else{
			  led = 0;
      fc:	e03ffc15 	stw	zero,-16(fp)
		  }
	  }
  };
     100:	003fe006 	br	84 <main+0x28>

00000104 <__mulsi3>:
     104:	0005883a 	mov	r2,zero
     108:	20000726 	beq	r4,zero,128 <__mulsi3+0x24>
     10c:	20c0004c 	andi	r3,r4,1
     110:	2008d07a 	srli	r4,r4,1
     114:	18000126 	beq	r3,zero,11c <__mulsi3+0x18>
     118:	1145883a 	add	r2,r2,r5
     11c:	294b883a 	add	r5,r5,r5
     120:	203ffa1e 	bne	r4,zero,10c <__mulsi3+0x8>
     124:	f800283a 	ret
     128:	f800283a 	ret

0000012c <_puts_r>:
     12c:	defff604 	addi	sp,sp,-40
     130:	dc000715 	stw	r16,28(sp)
     134:	2021883a 	mov	r16,r4
     138:	2809883a 	mov	r4,r5
     13c:	dc400815 	stw	r17,32(sp)
     140:	dfc00915 	stw	ra,36(sp)
     144:	2823883a 	mov	r17,r5
     148:	00002000 	call	200 <strlen>
     14c:	10c00044 	addi	r3,r2,1
     150:	d8800115 	stw	r2,4(sp)
     154:	00800074 	movhi	r2,1
     158:	10800404 	addi	r2,r2,16
     15c:	d8800215 	stw	r2,8(sp)
     160:	00800044 	movi	r2,1
     164:	d8800315 	stw	r2,12(sp)
     168:	00800084 	movi	r2,2
     16c:	dc400015 	stw	r17,0(sp)
     170:	d8c00615 	stw	r3,24(sp)
     174:	dec00415 	stw	sp,16(sp)
     178:	d8800515 	stw	r2,20(sp)
     17c:	80000226 	beq	r16,zero,188 <_puts_r+0x5c>
     180:	80800e17 	ldw	r2,56(r16)
     184:	10001426 	beq	r2,zero,1d8 <_puts_r+0xac>
     188:	81400217 	ldw	r5,8(r16)
     18c:	2880030b 	ldhu	r2,12(r5)
     190:	10c8000c 	andi	r3,r2,8192
     194:	1800061e 	bne	r3,zero,1b0 <_puts_r+0x84>
     198:	29001917 	ldw	r4,100(r5)
     19c:	00f7ffc4 	movi	r3,-8193
     1a0:	10880014 	ori	r2,r2,8192
     1a4:	20c6703a 	and	r3,r4,r3
     1a8:	2880030d 	sth	r2,12(r5)
     1ac:	28c01915 	stw	r3,100(r5)
     1b0:	d9800404 	addi	r6,sp,16
     1b4:	8009883a 	mov	r4,r16
     1b8:	00006480 	call	648 <__sfvwrite_r>
     1bc:	1000091e 	bne	r2,zero,1e4 <_puts_r+0xb8>
     1c0:	00800284 	movi	r2,10
     1c4:	dfc00917 	ldw	ra,36(sp)
     1c8:	dc400817 	ldw	r17,32(sp)
     1cc:	dc000717 	ldw	r16,28(sp)
     1d0:	dec00a04 	addi	sp,sp,40
     1d4:	f800283a 	ret
     1d8:	8009883a 	mov	r4,r16
     1dc:	00005f80 	call	5f8 <__sinit>
     1e0:	003fe906 	br	188 <_puts_r+0x5c>
     1e4:	00bfffc4 	movi	r2,-1
     1e8:	003ff606 	br	1c4 <_puts_r+0x98>

000001ec <puts>:
     1ec:	00800074 	movhi	r2,1
     1f0:	10829404 	addi	r2,r2,2640
     1f4:	200b883a 	mov	r5,r4
     1f8:	11000017 	ldw	r4,0(r2)
     1fc:	000012c1 	jmpi	12c <_puts_r>

00000200 <strlen>:
     200:	208000cc 	andi	r2,r4,3
     204:	10002026 	beq	r2,zero,288 <strlen+0x88>
     208:	20800007 	ldb	r2,0(r4)
     20c:	10002026 	beq	r2,zero,290 <strlen+0x90>
     210:	2005883a 	mov	r2,r4
     214:	00000206 	br	220 <strlen+0x20>
     218:	10c00007 	ldb	r3,0(r2)
     21c:	18001826 	beq	r3,zero,280 <strlen+0x80>
     220:	10800044 	addi	r2,r2,1
     224:	10c000cc 	andi	r3,r2,3
     228:	183ffb1e 	bne	r3,zero,218 <strlen+0x18>
     22c:	10c00017 	ldw	r3,0(r2)
     230:	01ffbff4 	movhi	r7,65279
     234:	39ffbfc4 	addi	r7,r7,-257
     238:	00ca303a 	nor	r5,zero,r3
     23c:	01a02074 	movhi	r6,32897
     240:	19c7883a 	add	r3,r3,r7
     244:	31a02004 	addi	r6,r6,-32640
     248:	1946703a 	and	r3,r3,r5
     24c:	1986703a 	and	r3,r3,r6
     250:	1800091e 	bne	r3,zero,278 <strlen+0x78>
     254:	10800104 	addi	r2,r2,4
     258:	10c00017 	ldw	r3,0(r2)
     25c:	19cb883a 	add	r5,r3,r7
     260:	00c6303a 	nor	r3,zero,r3
     264:	28c6703a 	and	r3,r5,r3
     268:	1986703a 	and	r3,r3,r6
     26c:	183ff926 	beq	r3,zero,254 <strlen+0x54>
     270:	00000106 	br	278 <strlen+0x78>
     274:	10800044 	addi	r2,r2,1
     278:	10c00007 	ldb	r3,0(r2)
     27c:	183ffd1e 	bne	r3,zero,274 <strlen+0x74>
     280:	1105c83a 	sub	r2,r2,r4
     284:	f800283a 	ret
     288:	2005883a 	mov	r2,r4
     28c:	003fe706 	br	22c <strlen+0x2c>
     290:	0005883a 	mov	r2,zero
     294:	f800283a 	ret

00000298 <__fp_unlock>:
     298:	0005883a 	mov	r2,zero
     29c:	f800283a 	ret

000002a0 <_cleanup_r>:
     2a0:	01400034 	movhi	r5,0
     2a4:	29489404 	addi	r5,r5,8784
     2a8:	0000bd41 	jmpi	bd4 <_fwalk_reent>

000002ac <__sinit.part.1>:
     2ac:	defff704 	addi	sp,sp,-36
     2b0:	00c00034 	movhi	r3,0
     2b4:	dfc00815 	stw	ra,32(sp)
     2b8:	ddc00715 	stw	r23,28(sp)
     2bc:	dd800615 	stw	r22,24(sp)
     2c0:	dd400515 	stw	r21,20(sp)
     2c4:	dd000415 	stw	r20,16(sp)
     2c8:	dcc00315 	stw	r19,12(sp)
     2cc:	dc800215 	stw	r18,8(sp)
     2d0:	dc400115 	stw	r17,4(sp)
     2d4:	dc000015 	stw	r16,0(sp)
     2d8:	18c0a804 	addi	r3,r3,672
     2dc:	24000117 	ldw	r16,4(r4)
     2e0:	20c00f15 	stw	r3,60(r4)
     2e4:	2080bb04 	addi	r2,r4,748
     2e8:	00c000c4 	movi	r3,3
     2ec:	20c0b915 	stw	r3,740(r4)
     2f0:	2080ba15 	stw	r2,744(r4)
     2f4:	2000b815 	stw	zero,736(r4)
     2f8:	05c00204 	movi	r23,8
     2fc:	00800104 	movi	r2,4
     300:	2025883a 	mov	r18,r4
     304:	b80d883a 	mov	r6,r23
     308:	81001704 	addi	r4,r16,92
     30c:	000b883a 	mov	r5,zero
     310:	80000015 	stw	zero,0(r16)
     314:	80000115 	stw	zero,4(r16)
     318:	80000215 	stw	zero,8(r16)
     31c:	8080030d 	sth	r2,12(r16)
     320:	80001915 	stw	zero,100(r16)
     324:	8000038d 	sth	zero,14(r16)
     328:	80000415 	stw	zero,16(r16)
     32c:	80000515 	stw	zero,20(r16)
     330:	80000615 	stw	zero,24(r16)
     334:	000182c0 	call	182c <memset>
     338:	05800034 	movhi	r22,0
     33c:	94400217 	ldw	r17,8(r18)
     340:	05400034 	movhi	r21,0
     344:	05000034 	movhi	r20,0
     348:	04c00034 	movhi	r19,0
     34c:	b587c304 	addi	r22,r22,7948
     350:	ad47da04 	addi	r21,r21,8040
     354:	a507f904 	addi	r20,r20,8164
     358:	9cc81004 	addi	r19,r19,8256
     35c:	85800815 	stw	r22,32(r16)
     360:	85400915 	stw	r21,36(r16)
     364:	85000a15 	stw	r20,40(r16)
     368:	84c00b15 	stw	r19,44(r16)
     36c:	84000715 	stw	r16,28(r16)
     370:	00800284 	movi	r2,10
     374:	8880030d 	sth	r2,12(r17)
     378:	00800044 	movi	r2,1
     37c:	b80d883a 	mov	r6,r23
     380:	89001704 	addi	r4,r17,92
     384:	000b883a 	mov	r5,zero
     388:	88000015 	stw	zero,0(r17)
     38c:	88000115 	stw	zero,4(r17)
     390:	88000215 	stw	zero,8(r17)
     394:	88001915 	stw	zero,100(r17)
     398:	8880038d 	sth	r2,14(r17)
     39c:	88000415 	stw	zero,16(r17)
     3a0:	88000515 	stw	zero,20(r17)
     3a4:	88000615 	stw	zero,24(r17)
     3a8:	000182c0 	call	182c <memset>
     3ac:	94000317 	ldw	r16,12(r18)
     3b0:	00800484 	movi	r2,18
     3b4:	8c400715 	stw	r17,28(r17)
     3b8:	8d800815 	stw	r22,32(r17)
     3bc:	8d400915 	stw	r21,36(r17)
     3c0:	8d000a15 	stw	r20,40(r17)
     3c4:	8cc00b15 	stw	r19,44(r17)
     3c8:	8080030d 	sth	r2,12(r16)
     3cc:	00800084 	movi	r2,2
     3d0:	80000015 	stw	zero,0(r16)
     3d4:	80000115 	stw	zero,4(r16)
     3d8:	80000215 	stw	zero,8(r16)
     3dc:	80001915 	stw	zero,100(r16)
     3e0:	8080038d 	sth	r2,14(r16)
     3e4:	80000415 	stw	zero,16(r16)
     3e8:	80000515 	stw	zero,20(r16)
     3ec:	80000615 	stw	zero,24(r16)
     3f0:	b80d883a 	mov	r6,r23
     3f4:	000b883a 	mov	r5,zero
     3f8:	81001704 	addi	r4,r16,92
     3fc:	000182c0 	call	182c <memset>
     400:	00800044 	movi	r2,1
     404:	84000715 	stw	r16,28(r16)
     408:	85800815 	stw	r22,32(r16)
     40c:	85400915 	stw	r21,36(r16)
     410:	85000a15 	stw	r20,40(r16)
     414:	84c00b15 	stw	r19,44(r16)
     418:	90800e15 	stw	r2,56(r18)
     41c:	dfc00817 	ldw	ra,32(sp)
     420:	ddc00717 	ldw	r23,28(sp)
     424:	dd800617 	ldw	r22,24(sp)
     428:	dd400517 	ldw	r21,20(sp)
     42c:	dd000417 	ldw	r20,16(sp)
     430:	dcc00317 	ldw	r19,12(sp)
     434:	dc800217 	ldw	r18,8(sp)
     438:	dc400117 	ldw	r17,4(sp)
     43c:	dc000017 	ldw	r16,0(sp)
     440:	dec00904 	addi	sp,sp,36
     444:	f800283a 	ret

00000448 <__fp_lock>:
     448:	0005883a 	mov	r2,zero
     44c:	f800283a 	ret

00000450 <__sfmoreglue>:
     450:	defffc04 	addi	sp,sp,-16
     454:	dc800215 	stw	r18,8(sp)
     458:	2825883a 	mov	r18,r5
     45c:	dc000015 	stw	r16,0(sp)
     460:	01401a04 	movi	r5,104
     464:	2021883a 	mov	r16,r4
     468:	913fffc4 	addi	r4,r18,-1
     46c:	dfc00315 	stw	ra,12(sp)
     470:	dc400115 	stw	r17,4(sp)
     474:	00001040 	call	104 <__mulsi3>
     478:	8009883a 	mov	r4,r16
     47c:	11401d04 	addi	r5,r2,116
     480:	1023883a 	mov	r17,r2
     484:	0000c980 	call	c98 <_malloc_r>
     488:	1021883a 	mov	r16,r2
     48c:	10000726 	beq	r2,zero,4ac <__sfmoreglue+0x5c>
     490:	11000304 	addi	r4,r2,12
     494:	10000015 	stw	zero,0(r2)
     498:	14800115 	stw	r18,4(r2)
     49c:	11000215 	stw	r4,8(r2)
     4a0:	89801a04 	addi	r6,r17,104
     4a4:	000b883a 	mov	r5,zero
     4a8:	000182c0 	call	182c <memset>
     4ac:	8005883a 	mov	r2,r16
     4b0:	dfc00317 	ldw	ra,12(sp)
     4b4:	dc800217 	ldw	r18,8(sp)
     4b8:	dc400117 	ldw	r17,4(sp)
     4bc:	dc000017 	ldw	r16,0(sp)
     4c0:	dec00404 	addi	sp,sp,16
     4c4:	f800283a 	ret

000004c8 <__sfp>:
     4c8:	defffb04 	addi	sp,sp,-20
     4cc:	dc000015 	stw	r16,0(sp)
     4d0:	04000074 	movhi	r16,1
     4d4:	84029304 	addi	r16,r16,2636
     4d8:	dcc00315 	stw	r19,12(sp)
     4dc:	2027883a 	mov	r19,r4
     4e0:	81000017 	ldw	r4,0(r16)
     4e4:	dfc00415 	stw	ra,16(sp)
     4e8:	dc800215 	stw	r18,8(sp)
     4ec:	20800e17 	ldw	r2,56(r4)
     4f0:	dc400115 	stw	r17,4(sp)
     4f4:	1000021e 	bne	r2,zero,500 <__sfp+0x38>
     4f8:	00002ac0 	call	2ac <__sinit.part.1>
     4fc:	81000017 	ldw	r4,0(r16)
     500:	2480b804 	addi	r18,r4,736
     504:	047fffc4 	movi	r17,-1
     508:	91000117 	ldw	r4,4(r18)
     50c:	94000217 	ldw	r16,8(r18)
     510:	213fffc4 	addi	r4,r4,-1
     514:	20000a16 	blt	r4,zero,540 <__sfp+0x78>
     518:	8080030f 	ldh	r2,12(r16)
     51c:	10000c26 	beq	r2,zero,550 <__sfp+0x88>
     520:	80c01d04 	addi	r3,r16,116
     524:	00000206 	br	530 <__sfp+0x68>
     528:	18bfe60f 	ldh	r2,-104(r3)
     52c:	10000826 	beq	r2,zero,550 <__sfp+0x88>
     530:	213fffc4 	addi	r4,r4,-1
     534:	1c3ffd04 	addi	r16,r3,-12
     538:	18c01a04 	addi	r3,r3,104
     53c:	247ffa1e 	bne	r4,r17,528 <__sfp+0x60>
     540:	90800017 	ldw	r2,0(r18)
     544:	10001d26 	beq	r2,zero,5bc <__sfp+0xf4>
     548:	1025883a 	mov	r18,r2
     54c:	003fee06 	br	508 <__sfp+0x40>
     550:	00bfffc4 	movi	r2,-1
     554:	8080038d 	sth	r2,14(r16)
     558:	00800044 	movi	r2,1
     55c:	8080030d 	sth	r2,12(r16)
     560:	80001915 	stw	zero,100(r16)
     564:	80000015 	stw	zero,0(r16)
     568:	80000215 	stw	zero,8(r16)
     56c:	80000115 	stw	zero,4(r16)
     570:	80000415 	stw	zero,16(r16)
     574:	80000515 	stw	zero,20(r16)
     578:	80000615 	stw	zero,24(r16)
     57c:	01800204 	movi	r6,8
     580:	000b883a 	mov	r5,zero
     584:	81001704 	addi	r4,r16,92
     588:	000182c0 	call	182c <memset>
     58c:	8005883a 	mov	r2,r16
     590:	80000c15 	stw	zero,48(r16)
     594:	80000d15 	stw	zero,52(r16)
     598:	80001115 	stw	zero,68(r16)
     59c:	80001215 	stw	zero,72(r16)
     5a0:	dfc00417 	ldw	ra,16(sp)
     5a4:	dcc00317 	ldw	r19,12(sp)
     5a8:	dc800217 	ldw	r18,8(sp)
     5ac:	dc400117 	ldw	r17,4(sp)
     5b0:	dc000017 	ldw	r16,0(sp)
     5b4:	dec00504 	addi	sp,sp,20
     5b8:	f800283a 	ret
     5bc:	01400104 	movi	r5,4
     5c0:	9809883a 	mov	r4,r19
     5c4:	00004500 	call	450 <__sfmoreglue>
     5c8:	90800015 	stw	r2,0(r18)
     5cc:	103fde1e 	bne	r2,zero,548 <__sfp+0x80>
     5d0:	00800304 	movi	r2,12
     5d4:	98800015 	stw	r2,0(r19)
     5d8:	0005883a 	mov	r2,zero
     5dc:	003ff006 	br	5a0 <__sfp+0xd8>

000005e0 <_cleanup>:
     5e0:	00800074 	movhi	r2,1
     5e4:	10829304 	addi	r2,r2,2636
     5e8:	11000017 	ldw	r4,0(r2)
     5ec:	01400034 	movhi	r5,0
     5f0:	29489404 	addi	r5,r5,8784
     5f4:	0000bd41 	jmpi	bd4 <_fwalk_reent>

000005f8 <__sinit>:
     5f8:	20800e17 	ldw	r2,56(r4)
     5fc:	10000126 	beq	r2,zero,604 <__sinit+0xc>
     600:	f800283a 	ret
     604:	00002ac1 	jmpi	2ac <__sinit.part.1>

00000608 <__sfp_lock_acquire>:
     608:	f800283a 	ret

0000060c <__sfp_lock_release>:
     60c:	f800283a 	ret

00000610 <__sinit_lock_acquire>:
     610:	f800283a 	ret

00000614 <__sinit_lock_release>:
     614:	f800283a 	ret

00000618 <__fp_lock_all>:
     618:	00800074 	movhi	r2,1
     61c:	10829404 	addi	r2,r2,2640
     620:	11000017 	ldw	r4,0(r2)
     624:	01400034 	movhi	r5,0
     628:	29411204 	addi	r5,r5,1096
     62c:	0000b101 	jmpi	b10 <_fwalk>

00000630 <__fp_unlock_all>:
     630:	00800074 	movhi	r2,1
     634:	10829404 	addi	r2,r2,2640
     638:	11000017 	ldw	r4,0(r2)
     63c:	01400034 	movhi	r5,0
     640:	2940a604 	addi	r5,r5,664
     644:	0000b101 	jmpi	b10 <_fwalk>

00000648 <__sfvwrite_r>:
     648:	30800217 	ldw	r2,8(r6)
     64c:	10006726 	beq	r2,zero,7ec <__sfvwrite_r+0x1a4>
     650:	28c0030b 	ldhu	r3,12(r5)
     654:	defff404 	addi	sp,sp,-48
     658:	dd400715 	stw	r21,28(sp)
     65c:	dd000615 	stw	r20,24(sp)
     660:	dc000215 	stw	r16,8(sp)
     664:	dfc00b15 	stw	ra,44(sp)
     668:	df000a15 	stw	fp,40(sp)
     66c:	ddc00915 	stw	r23,36(sp)
     670:	dd800815 	stw	r22,32(sp)
     674:	dcc00515 	stw	r19,20(sp)
     678:	dc800415 	stw	r18,16(sp)
     67c:	dc400315 	stw	r17,12(sp)
     680:	1880020c 	andi	r2,r3,8
     684:	2821883a 	mov	r16,r5
     688:	202b883a 	mov	r21,r4
     68c:	3029883a 	mov	r20,r6
     690:	10002726 	beq	r2,zero,730 <__sfvwrite_r+0xe8>
     694:	28800417 	ldw	r2,16(r5)
     698:	10002526 	beq	r2,zero,730 <__sfvwrite_r+0xe8>
     69c:	1880008c 	andi	r2,r3,2
     6a0:	a4400017 	ldw	r17,0(r20)
     6a4:	10002a26 	beq	r2,zero,750 <__sfvwrite_r+0x108>
     6a8:	05a00034 	movhi	r22,32768
     6ac:	0027883a 	mov	r19,zero
     6b0:	0025883a 	mov	r18,zero
     6b4:	b5bf0004 	addi	r22,r22,-1024
     6b8:	980d883a 	mov	r6,r19
     6bc:	a809883a 	mov	r4,r21
     6c0:	90004626 	beq	r18,zero,7dc <__sfvwrite_r+0x194>
     6c4:	900f883a 	mov	r7,r18
     6c8:	b480022e 	bgeu	r22,r18,6d4 <__sfvwrite_r+0x8c>
     6cc:	01e00034 	movhi	r7,32768
     6d0:	39ff0004 	addi	r7,r7,-1024
     6d4:	80800917 	ldw	r2,36(r16)
     6d8:	81400717 	ldw	r5,28(r16)
     6dc:	103ee83a 	callr	r2
     6e0:	00805a0e 	bge	zero,r2,84c <__sfvwrite_r+0x204>
     6e4:	a0c00217 	ldw	r3,8(r20)
     6e8:	98a7883a 	add	r19,r19,r2
     6ec:	90a5c83a 	sub	r18,r18,r2
     6f0:	1885c83a 	sub	r2,r3,r2
     6f4:	a0800215 	stw	r2,8(r20)
     6f8:	103fef1e 	bne	r2,zero,6b8 <__sfvwrite_r+0x70>
     6fc:	0005883a 	mov	r2,zero
     700:	dfc00b17 	ldw	ra,44(sp)
     704:	df000a17 	ldw	fp,40(sp)
     708:	ddc00917 	ldw	r23,36(sp)
     70c:	dd800817 	ldw	r22,32(sp)
     710:	dd400717 	ldw	r21,28(sp)
     714:	dd000617 	ldw	r20,24(sp)
     718:	dcc00517 	ldw	r19,20(sp)
     71c:	dc800417 	ldw	r18,16(sp)
     720:	dc400317 	ldw	r17,12(sp)
     724:	dc000217 	ldw	r16,8(sp)
     728:	dec00c04 	addi	sp,sp,48
     72c:	f800283a 	ret
     730:	800b883a 	mov	r5,r16
     734:	a809883a 	mov	r4,r21
     738:	00020a80 	call	20a8 <__swsetup_r>
     73c:	1000ee1e 	bne	r2,zero,af8 <__sfvwrite_r+0x4b0>
     740:	80c0030b 	ldhu	r3,12(r16)
     744:	a4400017 	ldw	r17,0(r20)
     748:	1880008c 	andi	r2,r3,2
     74c:	103fd61e 	bne	r2,zero,6a8 <__sfvwrite_r+0x60>
     750:	1880004c 	andi	r2,r3,1
     754:	1000421e 	bne	r2,zero,860 <__sfvwrite_r+0x218>
     758:	0039883a 	mov	fp,zero
     75c:	0025883a 	mov	r18,zero
     760:	90001a26 	beq	r18,zero,7cc <__sfvwrite_r+0x184>
     764:	1880800c 	andi	r2,r3,512
     768:	84c00217 	ldw	r19,8(r16)
     76c:	10002126 	beq	r2,zero,7f4 <__sfvwrite_r+0x1ac>
     770:	982f883a 	mov	r23,r19
     774:	94c09636 	bltu	r18,r19,9d0 <__sfvwrite_r+0x388>
     778:	1881200c 	andi	r2,r3,1152
     77c:	1000a11e 	bne	r2,zero,a04 <__sfvwrite_r+0x3bc>
     780:	81000017 	ldw	r4,0(r16)
     784:	b80d883a 	mov	r6,r23
     788:	e00b883a 	mov	r5,fp
     78c:	00016d00 	call	16d0 <memmove>
     790:	80c00217 	ldw	r3,8(r16)
     794:	81000017 	ldw	r4,0(r16)
     798:	9005883a 	mov	r2,r18
     79c:	1ce7c83a 	sub	r19,r3,r19
     7a0:	25cf883a 	add	r7,r4,r23
     7a4:	84c00215 	stw	r19,8(r16)
     7a8:	81c00015 	stw	r7,0(r16)
     7ac:	a0c00217 	ldw	r3,8(r20)
     7b0:	e0b9883a 	add	fp,fp,r2
     7b4:	90a5c83a 	sub	r18,r18,r2
     7b8:	18a7c83a 	sub	r19,r3,r2
     7bc:	a4c00215 	stw	r19,8(r20)
     7c0:	983fce26 	beq	r19,zero,6fc <__sfvwrite_r+0xb4>
     7c4:	80c0030b 	ldhu	r3,12(r16)
     7c8:	903fe61e 	bne	r18,zero,764 <__sfvwrite_r+0x11c>
     7cc:	8f000017 	ldw	fp,0(r17)
     7d0:	8c800117 	ldw	r18,4(r17)
     7d4:	8c400204 	addi	r17,r17,8
     7d8:	003fe106 	br	760 <__sfvwrite_r+0x118>
     7dc:	8cc00017 	ldw	r19,0(r17)
     7e0:	8c800117 	ldw	r18,4(r17)
     7e4:	8c400204 	addi	r17,r17,8
     7e8:	003fb306 	br	6b8 <__sfvwrite_r+0x70>
     7ec:	0005883a 	mov	r2,zero
     7f0:	f800283a 	ret
     7f4:	81000017 	ldw	r4,0(r16)
     7f8:	80800417 	ldw	r2,16(r16)
     7fc:	11005a36 	bltu	r2,r4,968 <__sfvwrite_r+0x320>
     800:	85c00517 	ldw	r23,20(r16)
     804:	95c05836 	bltu	r18,r23,968 <__sfvwrite_r+0x320>
     808:	00a00034 	movhi	r2,32768
     80c:	10bfffc4 	addi	r2,r2,-1
     810:	9009883a 	mov	r4,r18
     814:	1480012e 	bgeu	r2,r18,81c <__sfvwrite_r+0x1d4>
     818:	1009883a 	mov	r4,r2
     81c:	b80b883a 	mov	r5,r23
     820:	0002d5c0 	call	2d5c <__divsi3>
     824:	b80b883a 	mov	r5,r23
     828:	1009883a 	mov	r4,r2
     82c:	00001040 	call	104 <__mulsi3>
     830:	81400717 	ldw	r5,28(r16)
     834:	80c00917 	ldw	r3,36(r16)
     838:	100f883a 	mov	r7,r2
     83c:	e00d883a 	mov	r6,fp
     840:	a809883a 	mov	r4,r21
     844:	183ee83a 	callr	r3
     848:	00bfd816 	blt	zero,r2,7ac <__sfvwrite_r+0x164>
     84c:	8080030b 	ldhu	r2,12(r16)
     850:	10801014 	ori	r2,r2,64
     854:	8080030d 	sth	r2,12(r16)
     858:	00bfffc4 	movi	r2,-1
     85c:	003fa806 	br	700 <__sfvwrite_r+0xb8>
     860:	0027883a 	mov	r19,zero
     864:	0011883a 	mov	r8,zero
     868:	0039883a 	mov	fp,zero
     86c:	0025883a 	mov	r18,zero
     870:	90001f26 	beq	r18,zero,8f0 <__sfvwrite_r+0x2a8>
     874:	40005a26 	beq	r8,zero,9e0 <__sfvwrite_r+0x398>
     878:	982d883a 	mov	r22,r19
     87c:	94c0012e 	bgeu	r18,r19,884 <__sfvwrite_r+0x23c>
     880:	902d883a 	mov	r22,r18
     884:	81000017 	ldw	r4,0(r16)
     888:	80800417 	ldw	r2,16(r16)
     88c:	b02f883a 	mov	r23,r22
     890:	81c00517 	ldw	r7,20(r16)
     894:	1100032e 	bgeu	r2,r4,8a4 <__sfvwrite_r+0x25c>
     898:	80c00217 	ldw	r3,8(r16)
     89c:	38c7883a 	add	r3,r7,r3
     8a0:	1d801816 	blt	r3,r22,904 <__sfvwrite_r+0x2bc>
     8a4:	b1c03e16 	blt	r22,r7,9a0 <__sfvwrite_r+0x358>
     8a8:	80800917 	ldw	r2,36(r16)
     8ac:	81400717 	ldw	r5,28(r16)
     8b0:	e00d883a 	mov	r6,fp
     8b4:	da000115 	stw	r8,4(sp)
     8b8:	a809883a 	mov	r4,r21
     8bc:	103ee83a 	callr	r2
     8c0:	102f883a 	mov	r23,r2
     8c4:	da000117 	ldw	r8,4(sp)
     8c8:	00bfe00e 	bge	zero,r2,84c <__sfvwrite_r+0x204>
     8cc:	9de7c83a 	sub	r19,r19,r23
     8d0:	98001f26 	beq	r19,zero,950 <__sfvwrite_r+0x308>
     8d4:	a0800217 	ldw	r2,8(r20)
     8d8:	e5f9883a 	add	fp,fp,r23
     8dc:	95e5c83a 	sub	r18,r18,r23
     8e0:	15efc83a 	sub	r23,r2,r23
     8e4:	a5c00215 	stw	r23,8(r20)
     8e8:	b83f8426 	beq	r23,zero,6fc <__sfvwrite_r+0xb4>
     8ec:	903fe11e 	bne	r18,zero,874 <__sfvwrite_r+0x22c>
     8f0:	8f000017 	ldw	fp,0(r17)
     8f4:	8c800117 	ldw	r18,4(r17)
     8f8:	0011883a 	mov	r8,zero
     8fc:	8c400204 	addi	r17,r17,8
     900:	003fdb06 	br	870 <__sfvwrite_r+0x228>
     904:	180d883a 	mov	r6,r3
     908:	e00b883a 	mov	r5,fp
     90c:	da000115 	stw	r8,4(sp)
     910:	d8c00015 	stw	r3,0(sp)
     914:	00016d00 	call	16d0 <memmove>
     918:	d8c00017 	ldw	r3,0(sp)
     91c:	80800017 	ldw	r2,0(r16)
     920:	800b883a 	mov	r5,r16
     924:	a809883a 	mov	r4,r21
     928:	10c5883a 	add	r2,r2,r3
     92c:	80800015 	stw	r2,0(r16)
     930:	d8c00015 	stw	r3,0(sp)
     934:	00025700 	call	2570 <_fflush_r>
     938:	d8c00017 	ldw	r3,0(sp)
     93c:	da000117 	ldw	r8,4(sp)
     940:	103fc21e 	bne	r2,zero,84c <__sfvwrite_r+0x204>
     944:	182f883a 	mov	r23,r3
     948:	9de7c83a 	sub	r19,r19,r23
     94c:	983fe11e 	bne	r19,zero,8d4 <__sfvwrite_r+0x28c>
     950:	800b883a 	mov	r5,r16
     954:	a809883a 	mov	r4,r21
     958:	00025700 	call	2570 <_fflush_r>
     95c:	103fbb1e 	bne	r2,zero,84c <__sfvwrite_r+0x204>
     960:	0011883a 	mov	r8,zero
     964:	003fdb06 	br	8d4 <__sfvwrite_r+0x28c>
     968:	94c0012e 	bgeu	r18,r19,970 <__sfvwrite_r+0x328>
     96c:	9027883a 	mov	r19,r18
     970:	980d883a 	mov	r6,r19
     974:	e00b883a 	mov	r5,fp
     978:	00016d00 	call	16d0 <memmove>
     97c:	80800217 	ldw	r2,8(r16)
     980:	80c00017 	ldw	r3,0(r16)
     984:	14c5c83a 	sub	r2,r2,r19
     988:	1cc7883a 	add	r3,r3,r19
     98c:	80800215 	stw	r2,8(r16)
     990:	80c00015 	stw	r3,0(r16)
     994:	10004326 	beq	r2,zero,aa4 <__sfvwrite_r+0x45c>
     998:	9805883a 	mov	r2,r19
     99c:	003f8306 	br	7ac <__sfvwrite_r+0x164>
     9a0:	b00d883a 	mov	r6,r22
     9a4:	e00b883a 	mov	r5,fp
     9a8:	da000115 	stw	r8,4(sp)
     9ac:	00016d00 	call	16d0 <memmove>
     9b0:	80800217 	ldw	r2,8(r16)
     9b4:	80c00017 	ldw	r3,0(r16)
     9b8:	da000117 	ldw	r8,4(sp)
     9bc:	1585c83a 	sub	r2,r2,r22
     9c0:	1dad883a 	add	r22,r3,r22
     9c4:	80800215 	stw	r2,8(r16)
     9c8:	85800015 	stw	r22,0(r16)
     9cc:	003fbf06 	br	8cc <__sfvwrite_r+0x284>
     9d0:	81000017 	ldw	r4,0(r16)
     9d4:	9027883a 	mov	r19,r18
     9d8:	902f883a 	mov	r23,r18
     9dc:	003f6906 	br	784 <__sfvwrite_r+0x13c>
     9e0:	900d883a 	mov	r6,r18
     9e4:	01400284 	movi	r5,10
     9e8:	e009883a 	mov	r4,fp
     9ec:	00014a40 	call	14a4 <memchr>
     9f0:	10003e26 	beq	r2,zero,aec <__sfvwrite_r+0x4a4>
     9f4:	10800044 	addi	r2,r2,1
     9f8:	1727c83a 	sub	r19,r2,fp
     9fc:	02000044 	movi	r8,1
     a00:	003f9d06 	br	878 <__sfvwrite_r+0x230>
     a04:	80800517 	ldw	r2,20(r16)
     a08:	81400417 	ldw	r5,16(r16)
     a0c:	81c00017 	ldw	r7,0(r16)
     a10:	10a7883a 	add	r19,r2,r2
     a14:	9885883a 	add	r2,r19,r2
     a18:	1026d7fa 	srli	r19,r2,31
     a1c:	396dc83a 	sub	r22,r7,r5
     a20:	b1000044 	addi	r4,r22,1
     a24:	9885883a 	add	r2,r19,r2
     a28:	1027d07a 	srai	r19,r2,1
     a2c:	2485883a 	add	r2,r4,r18
     a30:	980d883a 	mov	r6,r19
     a34:	9880022e 	bgeu	r19,r2,a40 <__sfvwrite_r+0x3f8>
     a38:	1027883a 	mov	r19,r2
     a3c:	100d883a 	mov	r6,r2
     a40:	18c1000c 	andi	r3,r3,1024
     a44:	18001c26 	beq	r3,zero,ab8 <__sfvwrite_r+0x470>
     a48:	300b883a 	mov	r5,r6
     a4c:	a809883a 	mov	r4,r21
     a50:	0000c980 	call	c98 <_malloc_r>
     a54:	102f883a 	mov	r23,r2
     a58:	10002926 	beq	r2,zero,b00 <__sfvwrite_r+0x4b8>
     a5c:	81400417 	ldw	r5,16(r16)
     a60:	b00d883a 	mov	r6,r22
     a64:	1009883a 	mov	r4,r2
     a68:	00015880 	call	1588 <memcpy>
     a6c:	8080030b 	ldhu	r2,12(r16)
     a70:	00fedfc4 	movi	r3,-1153
     a74:	10c4703a 	and	r2,r2,r3
     a78:	10802014 	ori	r2,r2,128
     a7c:	8080030d 	sth	r2,12(r16)
     a80:	bd89883a 	add	r4,r23,r22
     a84:	9d8fc83a 	sub	r7,r19,r22
     a88:	85c00415 	stw	r23,16(r16)
     a8c:	84c00515 	stw	r19,20(r16)
     a90:	81000015 	stw	r4,0(r16)
     a94:	9027883a 	mov	r19,r18
     a98:	81c00215 	stw	r7,8(r16)
     a9c:	902f883a 	mov	r23,r18
     aa0:	003f3806 	br	784 <__sfvwrite_r+0x13c>
     aa4:	800b883a 	mov	r5,r16
     aa8:	a809883a 	mov	r4,r21
     aac:	00025700 	call	2570 <_fflush_r>
     ab0:	103fb926 	beq	r2,zero,998 <__sfvwrite_r+0x350>
     ab4:	003f6506 	br	84c <__sfvwrite_r+0x204>
     ab8:	a809883a 	mov	r4,r21
     abc:	00019540 	call	1954 <_realloc_r>
     ac0:	102f883a 	mov	r23,r2
     ac4:	103fee1e 	bne	r2,zero,a80 <__sfvwrite_r+0x438>
     ac8:	81400417 	ldw	r5,16(r16)
     acc:	a809883a 	mov	r4,r21
     ad0:	00027200 	call	2720 <_free_r>
     ad4:	8080030b 	ldhu	r2,12(r16)
     ad8:	00ffdfc4 	movi	r3,-129
     adc:	1884703a 	and	r2,r3,r2
     ae0:	00c00304 	movi	r3,12
     ae4:	a8c00015 	stw	r3,0(r21)
     ae8:	003f5906 	br	850 <__sfvwrite_r+0x208>
     aec:	94c00044 	addi	r19,r18,1
     af0:	02000044 	movi	r8,1
     af4:	003f6006 	br	878 <__sfvwrite_r+0x230>
     af8:	00bfffc4 	movi	r2,-1
     afc:	003f0006 	br	700 <__sfvwrite_r+0xb8>
     b00:	00800304 	movi	r2,12
     b04:	a8800015 	stw	r2,0(r21)
     b08:	8080030b 	ldhu	r2,12(r16)
     b0c:	003f5006 	br	850 <__sfvwrite_r+0x208>

00000b10 <_fwalk>:
     b10:	defff704 	addi	sp,sp,-36
     b14:	dd000415 	stw	r20,16(sp)
     b18:	dfc00815 	stw	ra,32(sp)
     b1c:	ddc00715 	stw	r23,28(sp)
     b20:	dd800615 	stw	r22,24(sp)
     b24:	dd400515 	stw	r21,20(sp)
     b28:	dcc00315 	stw	r19,12(sp)
     b2c:	dc800215 	stw	r18,8(sp)
     b30:	dc400115 	stw	r17,4(sp)
     b34:	dc000015 	stw	r16,0(sp)
     b38:	2500b804 	addi	r20,r4,736
     b3c:	a0002326 	beq	r20,zero,bcc <_fwalk+0xbc>
     b40:	282b883a 	mov	r21,r5
     b44:	002f883a 	mov	r23,zero
     b48:	05800044 	movi	r22,1
     b4c:	04ffffc4 	movi	r19,-1
     b50:	a4400117 	ldw	r17,4(r20)
     b54:	a4800217 	ldw	r18,8(r20)
     b58:	8c7fffc4 	addi	r17,r17,-1
     b5c:	88000d16 	blt	r17,zero,b94 <_fwalk+0x84>
     b60:	94000304 	addi	r16,r18,12
     b64:	94800384 	addi	r18,r18,14
     b68:	8080000b 	ldhu	r2,0(r16)
     b6c:	8c7fffc4 	addi	r17,r17,-1
     b70:	813ffd04 	addi	r4,r16,-12
     b74:	b080042e 	bgeu	r22,r2,b88 <_fwalk+0x78>
     b78:	9080000f 	ldh	r2,0(r18)
     b7c:	14c00226 	beq	r2,r19,b88 <_fwalk+0x78>
     b80:	a83ee83a 	callr	r21
     b84:	b8aeb03a 	or	r23,r23,r2
     b88:	84001a04 	addi	r16,r16,104
     b8c:	94801a04 	addi	r18,r18,104
     b90:	8cfff51e 	bne	r17,r19,b68 <_fwalk+0x58>
     b94:	a5000017 	ldw	r20,0(r20)
     b98:	a03fed1e 	bne	r20,zero,b50 <_fwalk+0x40>
     b9c:	b805883a 	mov	r2,r23
     ba0:	dfc00817 	ldw	ra,32(sp)
     ba4:	ddc00717 	ldw	r23,28(sp)
     ba8:	dd800617 	ldw	r22,24(sp)
     bac:	dd400517 	ldw	r21,20(sp)
     bb0:	dd000417 	ldw	r20,16(sp)
     bb4:	dcc00317 	ldw	r19,12(sp)
     bb8:	dc800217 	ldw	r18,8(sp)
     bbc:	dc400117 	ldw	r17,4(sp)
     bc0:	dc000017 	ldw	r16,0(sp)
     bc4:	dec00904 	addi	sp,sp,36
     bc8:	f800283a 	ret
     bcc:	002f883a 	mov	r23,zero
     bd0:	003ff206 	br	b9c <_fwalk+0x8c>

00000bd4 <_fwalk_reent>:
     bd4:	defff704 	addi	sp,sp,-36
     bd8:	dd000415 	stw	r20,16(sp)
     bdc:	dfc00815 	stw	ra,32(sp)
     be0:	ddc00715 	stw	r23,28(sp)
     be4:	dd800615 	stw	r22,24(sp)
     be8:	dd400515 	stw	r21,20(sp)
     bec:	dcc00315 	stw	r19,12(sp)
     bf0:	dc800215 	stw	r18,8(sp)
     bf4:	dc400115 	stw	r17,4(sp)
     bf8:	dc000015 	stw	r16,0(sp)
     bfc:	2500b804 	addi	r20,r4,736
     c00:	a0002326 	beq	r20,zero,c90 <_fwalk_reent+0xbc>
     c04:	282b883a 	mov	r21,r5
     c08:	2027883a 	mov	r19,r4
     c0c:	002f883a 	mov	r23,zero
     c10:	05800044 	movi	r22,1
     c14:	04bfffc4 	movi	r18,-1
     c18:	a4400117 	ldw	r17,4(r20)
     c1c:	a4000217 	ldw	r16,8(r20)
     c20:	8c7fffc4 	addi	r17,r17,-1
     c24:	88000c16 	blt	r17,zero,c58 <_fwalk_reent+0x84>
     c28:	84000304 	addi	r16,r16,12
     c2c:	8080000b 	ldhu	r2,0(r16)
     c30:	8c7fffc4 	addi	r17,r17,-1
     c34:	817ffd04 	addi	r5,r16,-12
     c38:	b080052e 	bgeu	r22,r2,c50 <_fwalk_reent+0x7c>
     c3c:	8080008f 	ldh	r2,2(r16)
     c40:	9809883a 	mov	r4,r19
     c44:	14800226 	beq	r2,r18,c50 <_fwalk_reent+0x7c>
     c48:	a83ee83a 	callr	r21
     c4c:	b8aeb03a 	or	r23,r23,r2
     c50:	84001a04 	addi	r16,r16,104
     c54:	8cbff51e 	bne	r17,r18,c2c <_fwalk_reent+0x58>
     c58:	a5000017 	ldw	r20,0(r20)
     c5c:	a03fee1e 	bne	r20,zero,c18 <_fwalk_reent+0x44>
     c60:	b805883a 	mov	r2,r23
     c64:	dfc00817 	ldw	ra,32(sp)
     c68:	ddc00717 	ldw	r23,28(sp)
     c6c:	dd800617 	ldw	r22,24(sp)
     c70:	dd400517 	ldw	r21,20(sp)
     c74:	dd000417 	ldw	r20,16(sp)
     c78:	dcc00317 	ldw	r19,12(sp)
     c7c:	dc800217 	ldw	r18,8(sp)
     c80:	dc400117 	ldw	r17,4(sp)
     c84:	dc000017 	ldw	r16,0(sp)
     c88:	dec00904 	addi	sp,sp,36
     c8c:	f800283a 	ret
     c90:	002f883a 	mov	r23,zero
     c94:	003ff206 	br	c60 <_fwalk_reent+0x8c>

00000c98 <_malloc_r>:
     c98:	defff504 	addi	sp,sp,-44
     c9c:	dc800315 	stw	r18,12(sp)
     ca0:	dfc00a15 	stw	ra,40(sp)
     ca4:	df000915 	stw	fp,36(sp)
     ca8:	ddc00815 	stw	r23,32(sp)
     cac:	dd800715 	stw	r22,28(sp)
     cb0:	dd400615 	stw	r21,24(sp)
     cb4:	dd000515 	stw	r20,20(sp)
     cb8:	dcc00415 	stw	r19,16(sp)
     cbc:	dc400215 	stw	r17,8(sp)
     cc0:	dc000115 	stw	r16,4(sp)
     cc4:	288002c4 	addi	r2,r5,11
     cc8:	00c00584 	movi	r3,22
     ccc:	2025883a 	mov	r18,r4
     cd0:	18807f2e 	bgeu	r3,r2,ed0 <_malloc_r+0x238>
     cd4:	047ffe04 	movi	r17,-8
     cd8:	1462703a 	and	r17,r2,r17
     cdc:	8800a316 	blt	r17,zero,f6c <_malloc_r+0x2d4>
     ce0:	8940a236 	bltu	r17,r5,f6c <_malloc_r+0x2d4>
     ce4:	00034ac0 	call	34ac <__malloc_lock>
     ce8:	00807dc4 	movi	r2,503
     cec:	1441e92e 	bgeu	r2,r17,1494 <_malloc_r+0x7fc>
     cf0:	8804d27a 	srli	r2,r17,9
     cf4:	1000a126 	beq	r2,zero,f7c <_malloc_r+0x2e4>
     cf8:	00c00104 	movi	r3,4
     cfc:	18811e36 	bltu	r3,r2,1178 <_malloc_r+0x4e0>
     d00:	8804d1ba 	srli	r2,r17,6
     d04:	12000e44 	addi	r8,r2,57
     d08:	11c00e04 	addi	r7,r2,56
     d0c:	4209883a 	add	r4,r8,r8
     d10:	04c00074 	movhi	r19,1
     d14:	2109883a 	add	r4,r4,r4
     d18:	9cc11c04 	addi	r19,r19,1136
     d1c:	2109883a 	add	r4,r4,r4
     d20:	9909883a 	add	r4,r19,r4
     d24:	24000117 	ldw	r16,4(r4)
     d28:	213ffe04 	addi	r4,r4,-8
     d2c:	24009726 	beq	r4,r16,f8c <_malloc_r+0x2f4>
     d30:	80800117 	ldw	r2,4(r16)
     d34:	01bfff04 	movi	r6,-4
     d38:	014003c4 	movi	r5,15
     d3c:	1184703a 	and	r2,r2,r6
     d40:	1447c83a 	sub	r3,r2,r17
     d44:	28c00716 	blt	r5,r3,d64 <_malloc_r+0xcc>
     d48:	1800920e 	bge	r3,zero,f94 <_malloc_r+0x2fc>
     d4c:	84000317 	ldw	r16,12(r16)
     d50:	24008e26 	beq	r4,r16,f8c <_malloc_r+0x2f4>
     d54:	80800117 	ldw	r2,4(r16)
     d58:	1184703a 	and	r2,r2,r6
     d5c:	1447c83a 	sub	r3,r2,r17
     d60:	28fff90e 	bge	r5,r3,d48 <_malloc_r+0xb0>
     d64:	3809883a 	mov	r4,r7
     d68:	01800074 	movhi	r6,1
     d6c:	9c000417 	ldw	r16,16(r19)
     d70:	31811c04 	addi	r6,r6,1136
     d74:	32000204 	addi	r8,r6,8
     d78:	82013426 	beq	r16,r8,124c <_malloc_r+0x5b4>
     d7c:	80c00117 	ldw	r3,4(r16)
     d80:	00bfff04 	movi	r2,-4
     d84:	188e703a 	and	r7,r3,r2
     d88:	3c45c83a 	sub	r2,r7,r17
     d8c:	00c003c4 	movi	r3,15
     d90:	18811f16 	blt	r3,r2,1210 <_malloc_r+0x578>
     d94:	32000515 	stw	r8,20(r6)
     d98:	32000415 	stw	r8,16(r6)
     d9c:	10007f0e 	bge	r2,zero,f9c <_malloc_r+0x304>
     da0:	00807fc4 	movi	r2,511
     da4:	11c0fd36 	bltu	r2,r7,119c <_malloc_r+0x504>
     da8:	3806d0fa 	srli	r3,r7,3
     dac:	01c00044 	movi	r7,1
     db0:	30800117 	ldw	r2,4(r6)
     db4:	19400044 	addi	r5,r3,1
     db8:	294b883a 	add	r5,r5,r5
     dbc:	1807d0ba 	srai	r3,r3,2
     dc0:	294b883a 	add	r5,r5,r5
     dc4:	294b883a 	add	r5,r5,r5
     dc8:	298b883a 	add	r5,r5,r6
     dcc:	38c6983a 	sll	r3,r7,r3
     dd0:	29c00017 	ldw	r7,0(r5)
     dd4:	2a7ffe04 	addi	r9,r5,-8
     dd8:	1886b03a 	or	r3,r3,r2
     ddc:	82400315 	stw	r9,12(r16)
     de0:	81c00215 	stw	r7,8(r16)
     de4:	30c00115 	stw	r3,4(r6)
     de8:	2c000015 	stw	r16,0(r5)
     dec:	3c000315 	stw	r16,12(r7)
     df0:	2005d0ba 	srai	r2,r4,2
     df4:	01400044 	movi	r5,1
     df8:	288a983a 	sll	r5,r5,r2
     dfc:	19406f36 	bltu	r3,r5,fbc <_malloc_r+0x324>
     e00:	28c4703a 	and	r2,r5,r3
     e04:	10000a1e 	bne	r2,zero,e30 <_malloc_r+0x198>
     e08:	00bfff04 	movi	r2,-4
     e0c:	294b883a 	add	r5,r5,r5
     e10:	2088703a 	and	r4,r4,r2
     e14:	28c4703a 	and	r2,r5,r3
     e18:	21000104 	addi	r4,r4,4
     e1c:	1000041e 	bne	r2,zero,e30 <_malloc_r+0x198>
     e20:	294b883a 	add	r5,r5,r5
     e24:	28c4703a 	and	r2,r5,r3
     e28:	21000104 	addi	r4,r4,4
     e2c:	103ffc26 	beq	r2,zero,e20 <_malloc_r+0x188>
     e30:	02bfff04 	movi	r10,-4
     e34:	024003c4 	movi	r9,15
     e38:	21800044 	addi	r6,r4,1
     e3c:	318d883a 	add	r6,r6,r6
     e40:	318d883a 	add	r6,r6,r6
     e44:	318d883a 	add	r6,r6,r6
     e48:	998d883a 	add	r6,r19,r6
     e4c:	333ffe04 	addi	r12,r6,-8
     e50:	2017883a 	mov	r11,r4
     e54:	31800104 	addi	r6,r6,4
     e58:	34000017 	ldw	r16,0(r6)
     e5c:	31fffd04 	addi	r7,r6,-12
     e60:	81c0041e 	bne	r16,r7,e74 <_malloc_r+0x1dc>
     e64:	0000fb06 	br	1254 <_malloc_r+0x5bc>
     e68:	1801030e 	bge	r3,zero,1278 <_malloc_r+0x5e0>
     e6c:	84000317 	ldw	r16,12(r16)
     e70:	81c0f826 	beq	r16,r7,1254 <_malloc_r+0x5bc>
     e74:	80800117 	ldw	r2,4(r16)
     e78:	1284703a 	and	r2,r2,r10
     e7c:	1447c83a 	sub	r3,r2,r17
     e80:	48fff90e 	bge	r9,r3,e68 <_malloc_r+0x1d0>
     e84:	80800317 	ldw	r2,12(r16)
     e88:	81000217 	ldw	r4,8(r16)
     e8c:	89400054 	ori	r5,r17,1
     e90:	81400115 	stw	r5,4(r16)
     e94:	20800315 	stw	r2,12(r4)
     e98:	11000215 	stw	r4,8(r2)
     e9c:	8463883a 	add	r17,r16,r17
     ea0:	9c400515 	stw	r17,20(r19)
     ea4:	9c400415 	stw	r17,16(r19)
     ea8:	18800054 	ori	r2,r3,1
     eac:	88800115 	stw	r2,4(r17)
     eb0:	8a000315 	stw	r8,12(r17)
     eb4:	8a000215 	stw	r8,8(r17)
     eb8:	88e3883a 	add	r17,r17,r3
     ebc:	88c00015 	stw	r3,0(r17)
     ec0:	9009883a 	mov	r4,r18
     ec4:	00034d00 	call	34d0 <__malloc_unlock>
     ec8:	80800204 	addi	r2,r16,8
     ecc:	00001b06 	br	f3c <_malloc_r+0x2a4>
     ed0:	04400404 	movi	r17,16
     ed4:	89402536 	bltu	r17,r5,f6c <_malloc_r+0x2d4>
     ed8:	00034ac0 	call	34ac <__malloc_lock>
     edc:	00800184 	movi	r2,6
     ee0:	01000084 	movi	r4,2
     ee4:	04c00074 	movhi	r19,1
     ee8:	1085883a 	add	r2,r2,r2
     eec:	9cc11c04 	addi	r19,r19,1136
     ef0:	1085883a 	add	r2,r2,r2
     ef4:	9885883a 	add	r2,r19,r2
     ef8:	14000117 	ldw	r16,4(r2)
     efc:	10fffe04 	addi	r3,r2,-8
     f00:	80c0d926 	beq	r16,r3,1268 <_malloc_r+0x5d0>
     f04:	80c00117 	ldw	r3,4(r16)
     f08:	81000317 	ldw	r4,12(r16)
     f0c:	00bfff04 	movi	r2,-4
     f10:	1884703a 	and	r2,r3,r2
     f14:	81400217 	ldw	r5,8(r16)
     f18:	8085883a 	add	r2,r16,r2
     f1c:	10c00117 	ldw	r3,4(r2)
     f20:	29000315 	stw	r4,12(r5)
     f24:	21400215 	stw	r5,8(r4)
     f28:	18c00054 	ori	r3,r3,1
     f2c:	10c00115 	stw	r3,4(r2)
     f30:	9009883a 	mov	r4,r18
     f34:	00034d00 	call	34d0 <__malloc_unlock>
     f38:	80800204 	addi	r2,r16,8
     f3c:	dfc00a17 	ldw	ra,40(sp)
     f40:	df000917 	ldw	fp,36(sp)
     f44:	ddc00817 	ldw	r23,32(sp)
     f48:	dd800717 	ldw	r22,28(sp)
     f4c:	dd400617 	ldw	r21,24(sp)
     f50:	dd000517 	ldw	r20,20(sp)
     f54:	dcc00417 	ldw	r19,16(sp)
     f58:	dc800317 	ldw	r18,12(sp)
     f5c:	dc400217 	ldw	r17,8(sp)
     f60:	dc000117 	ldw	r16,4(sp)
     f64:	dec00b04 	addi	sp,sp,44
     f68:	f800283a 	ret
     f6c:	00800304 	movi	r2,12
     f70:	90800015 	stw	r2,0(r18)
     f74:	0005883a 	mov	r2,zero
     f78:	003ff006 	br	f3c <_malloc_r+0x2a4>
     f7c:	01002004 	movi	r4,128
     f80:	02001004 	movi	r8,64
     f84:	01c00fc4 	movi	r7,63
     f88:	003f6106 	br	d10 <_malloc_r+0x78>
     f8c:	4009883a 	mov	r4,r8
     f90:	003f7506 	br	d68 <_malloc_r+0xd0>
     f94:	81000317 	ldw	r4,12(r16)
     f98:	003fde06 	br	f14 <_malloc_r+0x27c>
     f9c:	81c5883a 	add	r2,r16,r7
     fa0:	11400117 	ldw	r5,4(r2)
     fa4:	9009883a 	mov	r4,r18
     fa8:	29400054 	ori	r5,r5,1
     fac:	11400115 	stw	r5,4(r2)
     fb0:	00034d00 	call	34d0 <__malloc_unlock>
     fb4:	80800204 	addi	r2,r16,8
     fb8:	003fe006 	br	f3c <_malloc_r+0x2a4>
     fbc:	9c000217 	ldw	r16,8(r19)
     fc0:	00bfff04 	movi	r2,-4
     fc4:	85800117 	ldw	r22,4(r16)
     fc8:	b0ac703a 	and	r22,r22,r2
     fcc:	b4400336 	bltu	r22,r17,fdc <_malloc_r+0x344>
     fd0:	b445c83a 	sub	r2,r22,r17
     fd4:	00c003c4 	movi	r3,15
     fd8:	18805d16 	blt	r3,r2,1150 <_malloc_r+0x4b8>
     fdc:	05c00074 	movhi	r23,1
     fe0:	00800074 	movhi	r2,1
     fe4:	1082a004 	addi	r2,r2,2688
     fe8:	bdc29504 	addi	r23,r23,2644
     fec:	15400017 	ldw	r21,0(r2)
     ff0:	b8c00017 	ldw	r3,0(r23)
     ff4:	00bfffc4 	movi	r2,-1
     ff8:	858d883a 	add	r6,r16,r22
     ffc:	8d6b883a 	add	r21,r17,r21
    1000:	1880ea26 	beq	r3,r2,13ac <_malloc_r+0x714>
    1004:	ad4403c4 	addi	r21,r21,4111
    1008:	00bc0004 	movi	r2,-4096
    100c:	a8aa703a 	and	r21,r21,r2
    1010:	a80b883a 	mov	r5,r21
    1014:	9009883a 	mov	r4,r18
    1018:	d9800015 	stw	r6,0(sp)
    101c:	0001eb80 	call	1eb8 <_sbrk_r>
    1020:	1029883a 	mov	r20,r2
    1024:	00bfffc4 	movi	r2,-1
    1028:	d9800017 	ldw	r6,0(sp)
    102c:	a080e826 	beq	r20,r2,13d0 <_malloc_r+0x738>
    1030:	a180a636 	bltu	r20,r6,12cc <_malloc_r+0x634>
    1034:	07000074 	movhi	fp,1
    1038:	e702a504 	addi	fp,fp,2708
    103c:	e0800017 	ldw	r2,0(fp)
    1040:	a887883a 	add	r3,r21,r2
    1044:	e0c00015 	stw	r3,0(fp)
    1048:	3500e626 	beq	r6,r20,13e4 <_malloc_r+0x74c>
    104c:	b9000017 	ldw	r4,0(r23)
    1050:	00bfffc4 	movi	r2,-1
    1054:	2080ee26 	beq	r4,r2,1410 <_malloc_r+0x778>
    1058:	a185c83a 	sub	r2,r20,r6
    105c:	10c5883a 	add	r2,r2,r3
    1060:	e0800015 	stw	r2,0(fp)
    1064:	a0c001cc 	andi	r3,r20,7
    1068:	1800bc26 	beq	r3,zero,135c <_malloc_r+0x6c4>
    106c:	a0e9c83a 	sub	r20,r20,r3
    1070:	00840204 	movi	r2,4104
    1074:	a5000204 	addi	r20,r20,8
    1078:	10c7c83a 	sub	r3,r2,r3
    107c:	a545883a 	add	r2,r20,r21
    1080:	1083ffcc 	andi	r2,r2,4095
    1084:	18abc83a 	sub	r21,r3,r2
    1088:	a80b883a 	mov	r5,r21
    108c:	9009883a 	mov	r4,r18
    1090:	0001eb80 	call	1eb8 <_sbrk_r>
    1094:	00ffffc4 	movi	r3,-1
    1098:	10c0e126 	beq	r2,r3,1420 <_malloc_r+0x788>
    109c:	1505c83a 	sub	r2,r2,r20
    10a0:	1545883a 	add	r2,r2,r21
    10a4:	10800054 	ori	r2,r2,1
    10a8:	e0c00017 	ldw	r3,0(fp)
    10ac:	9d000215 	stw	r20,8(r19)
    10b0:	a0800115 	stw	r2,4(r20)
    10b4:	a8c7883a 	add	r3,r21,r3
    10b8:	e0c00015 	stw	r3,0(fp)
    10bc:	84c00e26 	beq	r16,r19,10f8 <_malloc_r+0x460>
    10c0:	018003c4 	movi	r6,15
    10c4:	3580a72e 	bgeu	r6,r22,1364 <_malloc_r+0x6cc>
    10c8:	81400117 	ldw	r5,4(r16)
    10cc:	013ffe04 	movi	r4,-8
    10d0:	b0bffd04 	addi	r2,r22,-12
    10d4:	1104703a 	and	r2,r2,r4
    10d8:	2900004c 	andi	r4,r5,1
    10dc:	2088b03a 	or	r4,r4,r2
    10e0:	81000115 	stw	r4,4(r16)
    10e4:	01400144 	movi	r5,5
    10e8:	8089883a 	add	r4,r16,r2
    10ec:	21400115 	stw	r5,4(r4)
    10f0:	21400215 	stw	r5,8(r4)
    10f4:	3080cd36 	bltu	r6,r2,142c <_malloc_r+0x794>
    10f8:	00800074 	movhi	r2,1
    10fc:	10829f04 	addi	r2,r2,2684
    1100:	11000017 	ldw	r4,0(r2)
    1104:	20c0012e 	bgeu	r4,r3,110c <_malloc_r+0x474>
    1108:	10c00015 	stw	r3,0(r2)
    110c:	00800074 	movhi	r2,1
    1110:	10829e04 	addi	r2,r2,2680
    1114:	11000017 	ldw	r4,0(r2)
    1118:	9c000217 	ldw	r16,8(r19)
    111c:	20c0012e 	bgeu	r4,r3,1124 <_malloc_r+0x48c>
    1120:	10c00015 	stw	r3,0(r2)
    1124:	80c00117 	ldw	r3,4(r16)
    1128:	00bfff04 	movi	r2,-4
    112c:	1886703a 	and	r3,r3,r2
    1130:	1c45c83a 	sub	r2,r3,r17
    1134:	1c400236 	bltu	r3,r17,1140 <_malloc_r+0x4a8>
    1138:	00c003c4 	movi	r3,15
    113c:	18800416 	blt	r3,r2,1150 <_malloc_r+0x4b8>
    1140:	9009883a 	mov	r4,r18
    1144:	00034d00 	call	34d0 <__malloc_unlock>
    1148:	0005883a 	mov	r2,zero
    114c:	003f7b06 	br	f3c <_malloc_r+0x2a4>
    1150:	88c00054 	ori	r3,r17,1
    1154:	80c00115 	stw	r3,4(r16)
    1158:	8463883a 	add	r17,r16,r17
    115c:	10800054 	ori	r2,r2,1
    1160:	9c400215 	stw	r17,8(r19)
    1164:	88800115 	stw	r2,4(r17)
    1168:	9009883a 	mov	r4,r18
    116c:	00034d00 	call	34d0 <__malloc_unlock>
    1170:	80800204 	addi	r2,r16,8
    1174:	003f7106 	br	f3c <_malloc_r+0x2a4>
    1178:	00c00504 	movi	r3,20
    117c:	18804a2e 	bgeu	r3,r2,12a8 <_malloc_r+0x610>
    1180:	00c01504 	movi	r3,84
    1184:	18806e36 	bltu	r3,r2,1340 <_malloc_r+0x6a8>
    1188:	8804d33a 	srli	r2,r17,12
    118c:	12001bc4 	addi	r8,r2,111
    1190:	11c01b84 	addi	r7,r2,110
    1194:	4209883a 	add	r4,r8,r8
    1198:	003edd06 	br	d10 <_malloc_r+0x78>
    119c:	3804d27a 	srli	r2,r7,9
    11a0:	00c00104 	movi	r3,4
    11a4:	1880442e 	bgeu	r3,r2,12b8 <_malloc_r+0x620>
    11a8:	00c00504 	movi	r3,20
    11ac:	18808136 	bltu	r3,r2,13b4 <_malloc_r+0x71c>
    11b0:	11401704 	addi	r5,r2,92
    11b4:	10c016c4 	addi	r3,r2,91
    11b8:	294b883a 	add	r5,r5,r5
    11bc:	294b883a 	add	r5,r5,r5
    11c0:	294b883a 	add	r5,r5,r5
    11c4:	994b883a 	add	r5,r19,r5
    11c8:	28800017 	ldw	r2,0(r5)
    11cc:	01800074 	movhi	r6,1
    11d0:	297ffe04 	addi	r5,r5,-8
    11d4:	31811c04 	addi	r6,r6,1136
    11d8:	28806526 	beq	r5,r2,1370 <_malloc_r+0x6d8>
    11dc:	01bfff04 	movi	r6,-4
    11e0:	10c00117 	ldw	r3,4(r2)
    11e4:	1986703a 	and	r3,r3,r6
    11e8:	38c0022e 	bgeu	r7,r3,11f4 <_malloc_r+0x55c>
    11ec:	10800217 	ldw	r2,8(r2)
    11f0:	28bffb1e 	bne	r5,r2,11e0 <_malloc_r+0x548>
    11f4:	11400317 	ldw	r5,12(r2)
    11f8:	98c00117 	ldw	r3,4(r19)
    11fc:	81400315 	stw	r5,12(r16)
    1200:	80800215 	stw	r2,8(r16)
    1204:	2c000215 	stw	r16,8(r5)
    1208:	14000315 	stw	r16,12(r2)
    120c:	003ef806 	br	df0 <_malloc_r+0x158>
    1210:	88c00054 	ori	r3,r17,1
    1214:	80c00115 	stw	r3,4(r16)
    1218:	8463883a 	add	r17,r16,r17
    121c:	34400515 	stw	r17,20(r6)
    1220:	34400415 	stw	r17,16(r6)
    1224:	10c00054 	ori	r3,r2,1
    1228:	8a000315 	stw	r8,12(r17)
    122c:	8a000215 	stw	r8,8(r17)
    1230:	88c00115 	stw	r3,4(r17)
    1234:	88a3883a 	add	r17,r17,r2
    1238:	88800015 	stw	r2,0(r17)
    123c:	9009883a 	mov	r4,r18
    1240:	00034d00 	call	34d0 <__malloc_unlock>
    1244:	80800204 	addi	r2,r16,8
    1248:	003f3c06 	br	f3c <_malloc_r+0x2a4>
    124c:	30c00117 	ldw	r3,4(r6)
    1250:	003ee706 	br	df0 <_malloc_r+0x158>
    1254:	5ac00044 	addi	r11,r11,1
    1258:	588000cc 	andi	r2,r11,3
    125c:	31800204 	addi	r6,r6,8
    1260:	103efd1e 	bne	r2,zero,e58 <_malloc_r+0x1c0>
    1264:	00002406 	br	12f8 <_malloc_r+0x660>
    1268:	14000317 	ldw	r16,12(r2)
    126c:	143f251e 	bne	r2,r16,f04 <_malloc_r+0x26c>
    1270:	21000084 	addi	r4,r4,2
    1274:	003ebc06 	br	d68 <_malloc_r+0xd0>
    1278:	8085883a 	add	r2,r16,r2
    127c:	10c00117 	ldw	r3,4(r2)
    1280:	81000317 	ldw	r4,12(r16)
    1284:	81400217 	ldw	r5,8(r16)
    1288:	18c00054 	ori	r3,r3,1
    128c:	10c00115 	stw	r3,4(r2)
    1290:	29000315 	stw	r4,12(r5)
    1294:	21400215 	stw	r5,8(r4)
    1298:	9009883a 	mov	r4,r18
    129c:	00034d00 	call	34d0 <__malloc_unlock>
    12a0:	80800204 	addi	r2,r16,8
    12a4:	003f2506 	br	f3c <_malloc_r+0x2a4>
    12a8:	12001704 	addi	r8,r2,92
    12ac:	11c016c4 	addi	r7,r2,91
    12b0:	4209883a 	add	r4,r8,r8
    12b4:	003e9606 	br	d10 <_malloc_r+0x78>
    12b8:	3804d1ba 	srli	r2,r7,6
    12bc:	11400e44 	addi	r5,r2,57
    12c0:	10c00e04 	addi	r3,r2,56
    12c4:	294b883a 	add	r5,r5,r5
    12c8:	003fbc06 	br	11bc <_malloc_r+0x524>
    12cc:	84ff5926 	beq	r16,r19,1034 <_malloc_r+0x39c>
    12d0:	00800074 	movhi	r2,1
    12d4:	10811c04 	addi	r2,r2,1136
    12d8:	14000217 	ldw	r16,8(r2)
    12dc:	00bfff04 	movi	r2,-4
    12e0:	80c00117 	ldw	r3,4(r16)
    12e4:	1886703a 	and	r3,r3,r2
    12e8:	003f9106 	br	1130 <_malloc_r+0x498>
    12ec:	60800217 	ldw	r2,8(r12)
    12f0:	213fffc4 	addi	r4,r4,-1
    12f4:	1300651e 	bne	r2,r12,148c <_malloc_r+0x7f4>
    12f8:	208000cc 	andi	r2,r4,3
    12fc:	633ffe04 	addi	r12,r12,-8
    1300:	103ffa1e 	bne	r2,zero,12ec <_malloc_r+0x654>
    1304:	98800117 	ldw	r2,4(r19)
    1308:	0146303a 	nor	r3,zero,r5
    130c:	1884703a 	and	r2,r3,r2
    1310:	98800115 	stw	r2,4(r19)
    1314:	294b883a 	add	r5,r5,r5
    1318:	117f2836 	bltu	r2,r5,fbc <_malloc_r+0x324>
    131c:	283f2726 	beq	r5,zero,fbc <_malloc_r+0x324>
    1320:	2886703a 	and	r3,r5,r2
    1324:	5809883a 	mov	r4,r11
    1328:	183ec31e 	bne	r3,zero,e38 <_malloc_r+0x1a0>
    132c:	294b883a 	add	r5,r5,r5
    1330:	2886703a 	and	r3,r5,r2
    1334:	21000104 	addi	r4,r4,4
    1338:	183ffc26 	beq	r3,zero,132c <_malloc_r+0x694>
    133c:	003ebe06 	br	e38 <_malloc_r+0x1a0>
    1340:	00c05504 	movi	r3,340
    1344:	18801236 	bltu	r3,r2,1390 <_malloc_r+0x6f8>
    1348:	8804d3fa 	srli	r2,r17,15
    134c:	12001e04 	addi	r8,r2,120
    1350:	11c01dc4 	addi	r7,r2,119
    1354:	4209883a 	add	r4,r8,r8
    1358:	003e6d06 	br	d10 <_malloc_r+0x78>
    135c:	00c40004 	movi	r3,4096
    1360:	003f4606 	br	107c <_malloc_r+0x3e4>
    1364:	00800044 	movi	r2,1
    1368:	a0800115 	stw	r2,4(r20)
    136c:	003f7406 	br	1140 <_malloc_r+0x4a8>
    1370:	1805d0ba 	srai	r2,r3,2
    1374:	01c00044 	movi	r7,1
    1378:	30c00117 	ldw	r3,4(r6)
    137c:	388e983a 	sll	r7,r7,r2
    1380:	2805883a 	mov	r2,r5
    1384:	38c6b03a 	or	r3,r7,r3
    1388:	30c00115 	stw	r3,4(r6)
    138c:	003f9b06 	br	11fc <_malloc_r+0x564>
    1390:	00c15504 	movi	r3,1364
    1394:	18801a36 	bltu	r3,r2,1400 <_malloc_r+0x768>
    1398:	8804d4ba 	srli	r2,r17,18
    139c:	12001f44 	addi	r8,r2,125
    13a0:	11c01f04 	addi	r7,r2,124
    13a4:	4209883a 	add	r4,r8,r8
    13a8:	003e5906 	br	d10 <_malloc_r+0x78>
    13ac:	ad400404 	addi	r21,r21,16
    13b0:	003f1706 	br	1010 <_malloc_r+0x378>
    13b4:	00c01504 	movi	r3,84
    13b8:	18802336 	bltu	r3,r2,1448 <_malloc_r+0x7b0>
    13bc:	3804d33a 	srli	r2,r7,12
    13c0:	11401bc4 	addi	r5,r2,111
    13c4:	10c01b84 	addi	r3,r2,110
    13c8:	294b883a 	add	r5,r5,r5
    13cc:	003f7b06 	br	11bc <_malloc_r+0x524>
    13d0:	9c000217 	ldw	r16,8(r19)
    13d4:	00bfff04 	movi	r2,-4
    13d8:	80c00117 	ldw	r3,4(r16)
    13dc:	1886703a 	and	r3,r3,r2
    13e0:	003f5306 	br	1130 <_malloc_r+0x498>
    13e4:	3083ffcc 	andi	r2,r6,4095
    13e8:	103f181e 	bne	r2,zero,104c <_malloc_r+0x3b4>
    13ec:	99000217 	ldw	r4,8(r19)
    13f0:	b545883a 	add	r2,r22,r21
    13f4:	10800054 	ori	r2,r2,1
    13f8:	20800115 	stw	r2,4(r4)
    13fc:	003f3e06 	br	10f8 <_malloc_r+0x460>
    1400:	01003f84 	movi	r4,254
    1404:	02001fc4 	movi	r8,127
    1408:	01c01f84 	movi	r7,126
    140c:	003e4006 	br	d10 <_malloc_r+0x78>
    1410:	00800074 	movhi	r2,1
    1414:	10829504 	addi	r2,r2,2644
    1418:	15000015 	stw	r20,0(r2)
    141c:	003f1106 	br	1064 <_malloc_r+0x3cc>
    1420:	00800044 	movi	r2,1
    1424:	002b883a 	mov	r21,zero
    1428:	003f1f06 	br	10a8 <_malloc_r+0x410>
    142c:	81400204 	addi	r5,r16,8
    1430:	9009883a 	mov	r4,r18
    1434:	00027200 	call	2720 <_free_r>
    1438:	00800074 	movhi	r2,1
    143c:	1082a504 	addi	r2,r2,2708
    1440:	10c00017 	ldw	r3,0(r2)
    1444:	003f2c06 	br	10f8 <_malloc_r+0x460>
    1448:	00c05504 	movi	r3,340
    144c:	18800536 	bltu	r3,r2,1464 <_malloc_r+0x7cc>
    1450:	3804d3fa 	srli	r2,r7,15
    1454:	11401e04 	addi	r5,r2,120
    1458:	10c01dc4 	addi	r3,r2,119
    145c:	294b883a 	add	r5,r5,r5
    1460:	003f5606 	br	11bc <_malloc_r+0x524>
    1464:	00c15504 	movi	r3,1364
    1468:	18800536 	bltu	r3,r2,1480 <_malloc_r+0x7e8>
    146c:	3804d4ba 	srli	r2,r7,18
    1470:	11401f44 	addi	r5,r2,125
    1474:	10c01f04 	addi	r3,r2,124
    1478:	294b883a 	add	r5,r5,r5
    147c:	003f4f06 	br	11bc <_malloc_r+0x524>
    1480:	01403f84 	movi	r5,254
    1484:	00c01f84 	movi	r3,126
    1488:	003f4c06 	br	11bc <_malloc_r+0x524>
    148c:	98800117 	ldw	r2,4(r19)
    1490:	003fa006 	br	1314 <_malloc_r+0x67c>
    1494:	8808d0fa 	srli	r4,r17,3
    1498:	20800044 	addi	r2,r4,1
    149c:	1085883a 	add	r2,r2,r2
    14a0:	003e9006 	br	ee4 <_malloc_r+0x24c>

000014a4 <memchr>:
    14a4:	208000cc 	andi	r2,r4,3
    14a8:	280f883a 	mov	r7,r5
    14ac:	10003426 	beq	r2,zero,1580 <memchr+0xdc>
    14b0:	30bfffc4 	addi	r2,r6,-1
    14b4:	30001a26 	beq	r6,zero,1520 <memchr+0x7c>
    14b8:	20c00003 	ldbu	r3,0(r4)
    14bc:	29803fcc 	andi	r6,r5,255
    14c0:	30c0051e 	bne	r6,r3,14d8 <memchr+0x34>
    14c4:	00001806 	br	1528 <memchr+0x84>
    14c8:	10001526 	beq	r2,zero,1520 <memchr+0x7c>
    14cc:	20c00003 	ldbu	r3,0(r4)
    14d0:	10bfffc4 	addi	r2,r2,-1
    14d4:	30c01426 	beq	r6,r3,1528 <memchr+0x84>
    14d8:	21000044 	addi	r4,r4,1
    14dc:	20c000cc 	andi	r3,r4,3
    14e0:	183ff91e 	bne	r3,zero,14c8 <memchr+0x24>
    14e4:	020000c4 	movi	r8,3
    14e8:	40801136 	bltu	r8,r2,1530 <memchr+0x8c>
    14ec:	10000c26 	beq	r2,zero,1520 <memchr+0x7c>
    14f0:	20c00003 	ldbu	r3,0(r4)
    14f4:	29403fcc 	andi	r5,r5,255
    14f8:	28c00b26 	beq	r5,r3,1528 <memchr+0x84>
    14fc:	20c00044 	addi	r3,r4,1
    1500:	39803fcc 	andi	r6,r7,255
    1504:	2089883a 	add	r4,r4,r2
    1508:	00000306 	br	1518 <memchr+0x74>
    150c:	18c00044 	addi	r3,r3,1
    1510:	197fffc3 	ldbu	r5,-1(r3)
    1514:	31400526 	beq	r6,r5,152c <memchr+0x88>
    1518:	1805883a 	mov	r2,r3
    151c:	20fffb1e 	bne	r4,r3,150c <memchr+0x68>
    1520:	0005883a 	mov	r2,zero
    1524:	f800283a 	ret
    1528:	2005883a 	mov	r2,r4
    152c:	f800283a 	ret
    1530:	28c03fcc 	andi	r3,r5,255
    1534:	1812923a 	slli	r9,r3,8
    1538:	02ffbff4 	movhi	r11,65279
    153c:	02a02074 	movhi	r10,32897
    1540:	48d2b03a 	or	r9,r9,r3
    1544:	4806943a 	slli	r3,r9,16
    1548:	5affbfc4 	addi	r11,r11,-257
    154c:	52a02004 	addi	r10,r10,-32640
    1550:	48d2b03a 	or	r9,r9,r3
    1554:	20c00017 	ldw	r3,0(r4)
    1558:	48c6f03a 	xor	r3,r9,r3
    155c:	1acd883a 	add	r6,r3,r11
    1560:	00c6303a 	nor	r3,zero,r3
    1564:	30c6703a 	and	r3,r6,r3
    1568:	1a86703a 	and	r3,r3,r10
    156c:	183fe01e 	bne	r3,zero,14f0 <memchr+0x4c>
    1570:	10bfff04 	addi	r2,r2,-4
    1574:	21000104 	addi	r4,r4,4
    1578:	40bff636 	bltu	r8,r2,1554 <memchr+0xb0>
    157c:	003fdb06 	br	14ec <memchr+0x48>
    1580:	3005883a 	mov	r2,r6
    1584:	003fd706 	br	14e4 <memchr+0x40>

00001588 <memcpy>:
    1588:	defffd04 	addi	sp,sp,-12
    158c:	dfc00215 	stw	ra,8(sp)
    1590:	dc400115 	stw	r17,4(sp)
    1594:	dc000015 	stw	r16,0(sp)
    1598:	00c003c4 	movi	r3,15
    159c:	2005883a 	mov	r2,r4
    15a0:	1980452e 	bgeu	r3,r6,16b8 <memcpy+0x130>
    15a4:	2906b03a 	or	r3,r5,r4
    15a8:	18c000cc 	andi	r3,r3,3
    15ac:	1800441e 	bne	r3,zero,16c0 <memcpy+0x138>
    15b0:	347ffc04 	addi	r17,r6,-16
    15b4:	8822d13a 	srli	r17,r17,4
    15b8:	28c00104 	addi	r3,r5,4
    15bc:	23400104 	addi	r13,r4,4
    15c0:	8820913a 	slli	r16,r17,4
    15c4:	2b000204 	addi	r12,r5,8
    15c8:	22c00204 	addi	r11,r4,8
    15cc:	84000504 	addi	r16,r16,20
    15d0:	2a800304 	addi	r10,r5,12
    15d4:	22400304 	addi	r9,r4,12
    15d8:	2c21883a 	add	r16,r5,r16
    15dc:	2811883a 	mov	r8,r5
    15e0:	200f883a 	mov	r7,r4
    15e4:	41000017 	ldw	r4,0(r8)
    15e8:	1fc00017 	ldw	ra,0(r3)
    15ec:	63c00017 	ldw	r15,0(r12)
    15f0:	39000015 	stw	r4,0(r7)
    15f4:	53800017 	ldw	r14,0(r10)
    15f8:	6fc00015 	stw	ra,0(r13)
    15fc:	5bc00015 	stw	r15,0(r11)
    1600:	4b800015 	stw	r14,0(r9)
    1604:	18c00404 	addi	r3,r3,16
    1608:	39c00404 	addi	r7,r7,16
    160c:	42000404 	addi	r8,r8,16
    1610:	6b400404 	addi	r13,r13,16
    1614:	63000404 	addi	r12,r12,16
    1618:	5ac00404 	addi	r11,r11,16
    161c:	52800404 	addi	r10,r10,16
    1620:	4a400404 	addi	r9,r9,16
    1624:	1c3fef1e 	bne	r3,r16,15e4 <memcpy+0x5c>
    1628:	89c00044 	addi	r7,r17,1
    162c:	380e913a 	slli	r7,r7,4
    1630:	310003cc 	andi	r4,r6,15
    1634:	02c000c4 	movi	r11,3
    1638:	11c7883a 	add	r3,r2,r7
    163c:	29cb883a 	add	r5,r5,r7
    1640:	5900212e 	bgeu	r11,r4,16c8 <memcpy+0x140>
    1644:	1813883a 	mov	r9,r3
    1648:	2811883a 	mov	r8,r5
    164c:	200f883a 	mov	r7,r4
    1650:	42800017 	ldw	r10,0(r8)
    1654:	4a400104 	addi	r9,r9,4
    1658:	39ffff04 	addi	r7,r7,-4
    165c:	4abfff15 	stw	r10,-4(r9)
    1660:	42000104 	addi	r8,r8,4
    1664:	59fffa36 	bltu	r11,r7,1650 <memcpy+0xc8>
    1668:	213fff04 	addi	r4,r4,-4
    166c:	2008d0ba 	srli	r4,r4,2
    1670:	318000cc 	andi	r6,r6,3
    1674:	21000044 	addi	r4,r4,1
    1678:	2109883a 	add	r4,r4,r4
    167c:	2109883a 	add	r4,r4,r4
    1680:	1907883a 	add	r3,r3,r4
    1684:	290b883a 	add	r5,r5,r4
    1688:	30000626 	beq	r6,zero,16a4 <memcpy+0x11c>
    168c:	198d883a 	add	r6,r3,r6
    1690:	29c00003 	ldbu	r7,0(r5)
    1694:	18c00044 	addi	r3,r3,1
    1698:	29400044 	addi	r5,r5,1
    169c:	19ffffc5 	stb	r7,-1(r3)
    16a0:	19bffb1e 	bne	r3,r6,1690 <memcpy+0x108>
    16a4:	dfc00217 	ldw	ra,8(sp)
    16a8:	dc400117 	ldw	r17,4(sp)
    16ac:	dc000017 	ldw	r16,0(sp)
    16b0:	dec00304 	addi	sp,sp,12
    16b4:	f800283a 	ret
    16b8:	2007883a 	mov	r3,r4
    16bc:	003ff206 	br	1688 <memcpy+0x100>
    16c0:	2007883a 	mov	r3,r4
    16c4:	003ff106 	br	168c <memcpy+0x104>
    16c8:	200d883a 	mov	r6,r4
    16cc:	003fee06 	br	1688 <memcpy+0x100>

000016d0 <memmove>:
    16d0:	2005883a 	mov	r2,r4
    16d4:	29000b2e 	bgeu	r5,r4,1704 <memmove+0x34>
    16d8:	298f883a 	add	r7,r5,r6
    16dc:	21c0092e 	bgeu	r4,r7,1704 <memmove+0x34>
    16e0:	2187883a 	add	r3,r4,r6
    16e4:	198bc83a 	sub	r5,r3,r6
    16e8:	30004826 	beq	r6,zero,180c <memmove+0x13c>
    16ec:	39ffffc4 	addi	r7,r7,-1
    16f0:	39000003 	ldbu	r4,0(r7)
    16f4:	18ffffc4 	addi	r3,r3,-1
    16f8:	19000005 	stb	r4,0(r3)
    16fc:	28fffb1e 	bne	r5,r3,16ec <memmove+0x1c>
    1700:	f800283a 	ret
    1704:	00c003c4 	movi	r3,15
    1708:	1980412e 	bgeu	r3,r6,1810 <memmove+0x140>
    170c:	2886b03a 	or	r3,r5,r2
    1710:	18c000cc 	andi	r3,r3,3
    1714:	1800401e 	bne	r3,zero,1818 <memmove+0x148>
    1718:	33fffc04 	addi	r15,r6,-16
    171c:	781ed13a 	srli	r15,r15,4
    1720:	28c00104 	addi	r3,r5,4
    1724:	13400104 	addi	r13,r2,4
    1728:	781c913a 	slli	r14,r15,4
    172c:	2b000204 	addi	r12,r5,8
    1730:	12c00204 	addi	r11,r2,8
    1734:	73800504 	addi	r14,r14,20
    1738:	2a800304 	addi	r10,r5,12
    173c:	12400304 	addi	r9,r2,12
    1740:	2b9d883a 	add	r14,r5,r14
    1744:	2811883a 	mov	r8,r5
    1748:	100f883a 	mov	r7,r2
    174c:	41000017 	ldw	r4,0(r8)
    1750:	39c00404 	addi	r7,r7,16
    1754:	18c00404 	addi	r3,r3,16
    1758:	393ffc15 	stw	r4,-16(r7)
    175c:	193ffc17 	ldw	r4,-16(r3)
    1760:	6b400404 	addi	r13,r13,16
    1764:	5ac00404 	addi	r11,r11,16
    1768:	693ffc15 	stw	r4,-16(r13)
    176c:	61000017 	ldw	r4,0(r12)
    1770:	4a400404 	addi	r9,r9,16
    1774:	42000404 	addi	r8,r8,16
    1778:	593ffc15 	stw	r4,-16(r11)
    177c:	51000017 	ldw	r4,0(r10)
    1780:	63000404 	addi	r12,r12,16
    1784:	52800404 	addi	r10,r10,16
    1788:	493ffc15 	stw	r4,-16(r9)
    178c:	1bbfef1e 	bne	r3,r14,174c <memmove+0x7c>
    1790:	79000044 	addi	r4,r15,1
    1794:	2008913a 	slli	r4,r4,4
    1798:	328003cc 	andi	r10,r6,15
    179c:	02c000c4 	movi	r11,3
    17a0:	1107883a 	add	r3,r2,r4
    17a4:	290b883a 	add	r5,r5,r4
    17a8:	5a801e2e 	bgeu	r11,r10,1824 <memmove+0x154>
    17ac:	1813883a 	mov	r9,r3
    17b0:	2811883a 	mov	r8,r5
    17b4:	500f883a 	mov	r7,r10
    17b8:	41000017 	ldw	r4,0(r8)
    17bc:	4a400104 	addi	r9,r9,4
    17c0:	39ffff04 	addi	r7,r7,-4
    17c4:	493fff15 	stw	r4,-4(r9)
    17c8:	42000104 	addi	r8,r8,4
    17cc:	59fffa36 	bltu	r11,r7,17b8 <memmove+0xe8>
    17d0:	513fff04 	addi	r4,r10,-4
    17d4:	2008d0ba 	srli	r4,r4,2
    17d8:	318000cc 	andi	r6,r6,3
    17dc:	21000044 	addi	r4,r4,1
    17e0:	2109883a 	add	r4,r4,r4
    17e4:	2109883a 	add	r4,r4,r4
    17e8:	1907883a 	add	r3,r3,r4
    17ec:	290b883a 	add	r5,r5,r4
    17f0:	30000b26 	beq	r6,zero,1820 <memmove+0x150>
    17f4:	198d883a 	add	r6,r3,r6
    17f8:	29c00003 	ldbu	r7,0(r5)
    17fc:	18c00044 	addi	r3,r3,1
    1800:	29400044 	addi	r5,r5,1
    1804:	19ffffc5 	stb	r7,-1(r3)
    1808:	19bffb1e 	bne	r3,r6,17f8 <memmove+0x128>
    180c:	f800283a 	ret
    1810:	1007883a 	mov	r3,r2
    1814:	003ff606 	br	17f0 <memmove+0x120>
    1818:	1007883a 	mov	r3,r2
    181c:	003ff506 	br	17f4 <memmove+0x124>
    1820:	f800283a 	ret
    1824:	500d883a 	mov	r6,r10
    1828:	003ff106 	br	17f0 <memmove+0x120>

0000182c <memset>:
    182c:	20c000cc 	andi	r3,r4,3
    1830:	2005883a 	mov	r2,r4
    1834:	18004426 	beq	r3,zero,1948 <memset+0x11c>
    1838:	31ffffc4 	addi	r7,r6,-1
    183c:	30004026 	beq	r6,zero,1940 <memset+0x114>
    1840:	2813883a 	mov	r9,r5
    1844:	200d883a 	mov	r6,r4
    1848:	2007883a 	mov	r3,r4
    184c:	00000406 	br	1860 <memset+0x34>
    1850:	3a3fffc4 	addi	r8,r7,-1
    1854:	31800044 	addi	r6,r6,1
    1858:	38003926 	beq	r7,zero,1940 <memset+0x114>
    185c:	400f883a 	mov	r7,r8
    1860:	18c00044 	addi	r3,r3,1
    1864:	32400005 	stb	r9,0(r6)
    1868:	1a0000cc 	andi	r8,r3,3
    186c:	403ff81e 	bne	r8,zero,1850 <memset+0x24>
    1870:	010000c4 	movi	r4,3
    1874:	21c02d2e 	bgeu	r4,r7,192c <memset+0x100>
    1878:	29003fcc 	andi	r4,r5,255
    187c:	200c923a 	slli	r6,r4,8
    1880:	3108b03a 	or	r4,r6,r4
    1884:	200c943a 	slli	r6,r4,16
    1888:	218cb03a 	or	r6,r4,r6
    188c:	010003c4 	movi	r4,15
    1890:	21c0182e 	bgeu	r4,r7,18f4 <memset+0xc8>
    1894:	3b3ffc04 	addi	r12,r7,-16
    1898:	6018d13a 	srli	r12,r12,4
    189c:	1a000104 	addi	r8,r3,4
    18a0:	1ac00204 	addi	r11,r3,8
    18a4:	6008913a 	slli	r4,r12,4
    18a8:	1a800304 	addi	r10,r3,12
    18ac:	1813883a 	mov	r9,r3
    18b0:	21000504 	addi	r4,r4,20
    18b4:	1909883a 	add	r4,r3,r4
    18b8:	49800015 	stw	r6,0(r9)
    18bc:	41800015 	stw	r6,0(r8)
    18c0:	59800015 	stw	r6,0(r11)
    18c4:	51800015 	stw	r6,0(r10)
    18c8:	42000404 	addi	r8,r8,16
    18cc:	4a400404 	addi	r9,r9,16
    18d0:	5ac00404 	addi	r11,r11,16
    18d4:	52800404 	addi	r10,r10,16
    18d8:	413ff71e 	bne	r8,r4,18b8 <memset+0x8c>
    18dc:	63000044 	addi	r12,r12,1
    18e0:	6018913a 	slli	r12,r12,4
    18e4:	39c003cc 	andi	r7,r7,15
    18e8:	010000c4 	movi	r4,3
    18ec:	1b07883a 	add	r3,r3,r12
    18f0:	21c00e2e 	bgeu	r4,r7,192c <memset+0x100>
    18f4:	1813883a 	mov	r9,r3
    18f8:	3811883a 	mov	r8,r7
    18fc:	010000c4 	movi	r4,3
    1900:	49800015 	stw	r6,0(r9)
    1904:	423fff04 	addi	r8,r8,-4
    1908:	4a400104 	addi	r9,r9,4
    190c:	223ffc36 	bltu	r4,r8,1900 <memset+0xd4>
    1910:	393fff04 	addi	r4,r7,-4
    1914:	2008d0ba 	srli	r4,r4,2
    1918:	39c000cc 	andi	r7,r7,3
    191c:	21000044 	addi	r4,r4,1
    1920:	2109883a 	add	r4,r4,r4
    1924:	2109883a 	add	r4,r4,r4
    1928:	1907883a 	add	r3,r3,r4
    192c:	38000526 	beq	r7,zero,1944 <memset+0x118>
    1930:	19cf883a 	add	r7,r3,r7
    1934:	19400005 	stb	r5,0(r3)
    1938:	18c00044 	addi	r3,r3,1
    193c:	38fffd1e 	bne	r7,r3,1934 <memset+0x108>
    1940:	f800283a 	ret
    1944:	f800283a 	ret
    1948:	2007883a 	mov	r3,r4
    194c:	300f883a 	mov	r7,r6
    1950:	003fc706 	br	1870 <memset+0x44>

00001954 <_realloc_r>:
    1954:	defff604 	addi	sp,sp,-40
    1958:	dc800215 	stw	r18,8(sp)
    195c:	dfc00915 	stw	ra,36(sp)
    1960:	df000815 	stw	fp,32(sp)
    1964:	ddc00715 	stw	r23,28(sp)
    1968:	dd800615 	stw	r22,24(sp)
    196c:	dd400515 	stw	r21,20(sp)
    1970:	dd000415 	stw	r20,16(sp)
    1974:	dcc00315 	stw	r19,12(sp)
    1978:	dc400115 	stw	r17,4(sp)
    197c:	dc000015 	stw	r16,0(sp)
    1980:	3025883a 	mov	r18,r6
    1984:	2800b726 	beq	r5,zero,1c64 <_realloc_r+0x310>
    1988:	282b883a 	mov	r21,r5
    198c:	2029883a 	mov	r20,r4
    1990:	00034ac0 	call	34ac <__malloc_lock>
    1994:	a8bfff17 	ldw	r2,-4(r21)
    1998:	043fff04 	movi	r16,-4
    199c:	90c002c4 	addi	r3,r18,11
    19a0:	01000584 	movi	r4,22
    19a4:	acfffe04 	addi	r19,r21,-8
    19a8:	1420703a 	and	r16,r2,r16
    19ac:	20c0332e 	bgeu	r4,r3,1a7c <_realloc_r+0x128>
    19b0:	047ffe04 	movi	r17,-8
    19b4:	1c62703a 	and	r17,r3,r17
    19b8:	8807883a 	mov	r3,r17
    19bc:	88005816 	blt	r17,zero,1b20 <_realloc_r+0x1cc>
    19c0:	8c805736 	bltu	r17,r18,1b20 <_realloc_r+0x1cc>
    19c4:	80c0300e 	bge	r16,r3,1a88 <_realloc_r+0x134>
    19c8:	07000074 	movhi	fp,1
    19cc:	e7011c04 	addi	fp,fp,1136
    19d0:	e1c00217 	ldw	r7,8(fp)
    19d4:	9c09883a 	add	r4,r19,r16
    19d8:	22000117 	ldw	r8,4(r4)
    19dc:	21c06326 	beq	r4,r7,1b6c <_realloc_r+0x218>
    19e0:	017fff84 	movi	r5,-2
    19e4:	414a703a 	and	r5,r8,r5
    19e8:	214b883a 	add	r5,r4,r5
    19ec:	29800117 	ldw	r6,4(r5)
    19f0:	3180004c 	andi	r6,r6,1
    19f4:	30003f26 	beq	r6,zero,1af4 <_realloc_r+0x1a0>
    19f8:	1080004c 	andi	r2,r2,1
    19fc:	10008326 	beq	r2,zero,1c0c <_realloc_r+0x2b8>
    1a00:	900b883a 	mov	r5,r18
    1a04:	a009883a 	mov	r4,r20
    1a08:	0000c980 	call	c98 <_malloc_r>
    1a0c:	1025883a 	mov	r18,r2
    1a10:	10011e26 	beq	r2,zero,1e8c <_realloc_r+0x538>
    1a14:	a93fff17 	ldw	r4,-4(r21)
    1a18:	10fffe04 	addi	r3,r2,-8
    1a1c:	00bfff84 	movi	r2,-2
    1a20:	2084703a 	and	r2,r4,r2
    1a24:	9885883a 	add	r2,r19,r2
    1a28:	1880ee26 	beq	r3,r2,1de4 <_realloc_r+0x490>
    1a2c:	81bfff04 	addi	r6,r16,-4
    1a30:	00800904 	movi	r2,36
    1a34:	1180b836 	bltu	r2,r6,1d18 <_realloc_r+0x3c4>
    1a38:	00c004c4 	movi	r3,19
    1a3c:	19809636 	bltu	r3,r6,1c98 <_realloc_r+0x344>
    1a40:	9005883a 	mov	r2,r18
    1a44:	a807883a 	mov	r3,r21
    1a48:	19000017 	ldw	r4,0(r3)
    1a4c:	11000015 	stw	r4,0(r2)
    1a50:	19000117 	ldw	r4,4(r3)
    1a54:	11000115 	stw	r4,4(r2)
    1a58:	18c00217 	ldw	r3,8(r3)
    1a5c:	10c00215 	stw	r3,8(r2)
    1a60:	a80b883a 	mov	r5,r21
    1a64:	a009883a 	mov	r4,r20
    1a68:	00027200 	call	2720 <_free_r>
    1a6c:	a009883a 	mov	r4,r20
    1a70:	00034d00 	call	34d0 <__malloc_unlock>
    1a74:	9005883a 	mov	r2,r18
    1a78:	00001206 	br	1ac4 <_realloc_r+0x170>
    1a7c:	00c00404 	movi	r3,16
    1a80:	1823883a 	mov	r17,r3
    1a84:	003fce06 	br	19c0 <_realloc_r+0x6c>
    1a88:	a825883a 	mov	r18,r21
    1a8c:	8445c83a 	sub	r2,r16,r17
    1a90:	00c003c4 	movi	r3,15
    1a94:	18802636 	bltu	r3,r2,1b30 <_realloc_r+0x1dc>
    1a98:	99800117 	ldw	r6,4(r19)
    1a9c:	9c07883a 	add	r3,r19,r16
    1aa0:	3180004c 	andi	r6,r6,1
    1aa4:	3420b03a 	or	r16,r6,r16
    1aa8:	9c000115 	stw	r16,4(r19)
    1aac:	18800117 	ldw	r2,4(r3)
    1ab0:	10800054 	ori	r2,r2,1
    1ab4:	18800115 	stw	r2,4(r3)
    1ab8:	a009883a 	mov	r4,r20
    1abc:	00034d00 	call	34d0 <__malloc_unlock>
    1ac0:	9005883a 	mov	r2,r18
    1ac4:	dfc00917 	ldw	ra,36(sp)
    1ac8:	df000817 	ldw	fp,32(sp)
    1acc:	ddc00717 	ldw	r23,28(sp)
    1ad0:	dd800617 	ldw	r22,24(sp)
    1ad4:	dd400517 	ldw	r21,20(sp)
    1ad8:	dd000417 	ldw	r20,16(sp)
    1adc:	dcc00317 	ldw	r19,12(sp)
    1ae0:	dc800217 	ldw	r18,8(sp)
    1ae4:	dc400117 	ldw	r17,4(sp)
    1ae8:	dc000017 	ldw	r16,0(sp)
    1aec:	dec00a04 	addi	sp,sp,40
    1af0:	f800283a 	ret
    1af4:	017fff04 	movi	r5,-4
    1af8:	414a703a 	and	r5,r8,r5
    1afc:	814d883a 	add	r6,r16,r5
    1b00:	30c01f16 	blt	r6,r3,1b80 <_realloc_r+0x22c>
    1b04:	20800317 	ldw	r2,12(r4)
    1b08:	20c00217 	ldw	r3,8(r4)
    1b0c:	a825883a 	mov	r18,r21
    1b10:	3021883a 	mov	r16,r6
    1b14:	18800315 	stw	r2,12(r3)
    1b18:	10c00215 	stw	r3,8(r2)
    1b1c:	003fdb06 	br	1a8c <_realloc_r+0x138>
    1b20:	00800304 	movi	r2,12
    1b24:	a0800015 	stw	r2,0(r20)
    1b28:	0005883a 	mov	r2,zero
    1b2c:	003fe506 	br	1ac4 <_realloc_r+0x170>
    1b30:	98c00117 	ldw	r3,4(r19)
    1b34:	9c4b883a 	add	r5,r19,r17
    1b38:	11000054 	ori	r4,r2,1
    1b3c:	18c0004c 	andi	r3,r3,1
    1b40:	1c62b03a 	or	r17,r3,r17
    1b44:	9c400115 	stw	r17,4(r19)
    1b48:	29000115 	stw	r4,4(r5)
    1b4c:	2885883a 	add	r2,r5,r2
    1b50:	10c00117 	ldw	r3,4(r2)
    1b54:	29400204 	addi	r5,r5,8
    1b58:	a009883a 	mov	r4,r20
    1b5c:	18c00054 	ori	r3,r3,1
    1b60:	10c00115 	stw	r3,4(r2)
    1b64:	00027200 	call	2720 <_free_r>
    1b68:	003fd306 	br	1ab8 <_realloc_r+0x164>
    1b6c:	017fff04 	movi	r5,-4
    1b70:	414a703a 	and	r5,r8,r5
    1b74:	89800404 	addi	r6,r17,16
    1b78:	8151883a 	add	r8,r16,r5
    1b7c:	4180590e 	bge	r8,r6,1ce4 <_realloc_r+0x390>
    1b80:	1080004c 	andi	r2,r2,1
    1b84:	103f9e1e 	bne	r2,zero,1a00 <_realloc_r+0xac>
    1b88:	adbffe17 	ldw	r22,-8(r21)
    1b8c:	00bfff04 	movi	r2,-4
    1b90:	9dadc83a 	sub	r22,r19,r22
    1b94:	b1800117 	ldw	r6,4(r22)
    1b98:	3084703a 	and	r2,r6,r2
    1b9c:	20002026 	beq	r4,zero,1c20 <_realloc_r+0x2cc>
    1ba0:	80af883a 	add	r23,r16,r2
    1ba4:	b96f883a 	add	r23,r23,r5
    1ba8:	21c05f26 	beq	r4,r7,1d28 <_realloc_r+0x3d4>
    1bac:	b8c01c16 	blt	r23,r3,1c20 <_realloc_r+0x2cc>
    1bb0:	20800317 	ldw	r2,12(r4)
    1bb4:	20c00217 	ldw	r3,8(r4)
    1bb8:	81bfff04 	addi	r6,r16,-4
    1bbc:	01000904 	movi	r4,36
    1bc0:	18800315 	stw	r2,12(r3)
    1bc4:	10c00215 	stw	r3,8(r2)
    1bc8:	b0c00217 	ldw	r3,8(r22)
    1bcc:	b0800317 	ldw	r2,12(r22)
    1bd0:	b4800204 	addi	r18,r22,8
    1bd4:	18800315 	stw	r2,12(r3)
    1bd8:	10c00215 	stw	r3,8(r2)
    1bdc:	21801b36 	bltu	r4,r6,1c4c <_realloc_r+0x2f8>
    1be0:	008004c4 	movi	r2,19
    1be4:	1180352e 	bgeu	r2,r6,1cbc <_realloc_r+0x368>
    1be8:	a8800017 	ldw	r2,0(r21)
    1bec:	b0800215 	stw	r2,8(r22)
    1bf0:	a8800117 	ldw	r2,4(r21)
    1bf4:	b0800315 	stw	r2,12(r22)
    1bf8:	008006c4 	movi	r2,27
    1bfc:	11807f36 	bltu	r2,r6,1dfc <_realloc_r+0x4a8>
    1c00:	b0800404 	addi	r2,r22,16
    1c04:	ad400204 	addi	r21,r21,8
    1c08:	00002d06 	br	1cc0 <_realloc_r+0x36c>
    1c0c:	adbffe17 	ldw	r22,-8(r21)
    1c10:	00bfff04 	movi	r2,-4
    1c14:	9dadc83a 	sub	r22,r19,r22
    1c18:	b1000117 	ldw	r4,4(r22)
    1c1c:	2084703a 	and	r2,r4,r2
    1c20:	b03f7726 	beq	r22,zero,1a00 <_realloc_r+0xac>
    1c24:	80af883a 	add	r23,r16,r2
    1c28:	b8ff7516 	blt	r23,r3,1a00 <_realloc_r+0xac>
    1c2c:	b0800317 	ldw	r2,12(r22)
    1c30:	b0c00217 	ldw	r3,8(r22)
    1c34:	81bfff04 	addi	r6,r16,-4
    1c38:	01000904 	movi	r4,36
    1c3c:	18800315 	stw	r2,12(r3)
    1c40:	10c00215 	stw	r3,8(r2)
    1c44:	b4800204 	addi	r18,r22,8
    1c48:	21bfe52e 	bgeu	r4,r6,1be0 <_realloc_r+0x28c>
    1c4c:	a80b883a 	mov	r5,r21
    1c50:	9009883a 	mov	r4,r18
    1c54:	00016d00 	call	16d0 <memmove>
    1c58:	b821883a 	mov	r16,r23
    1c5c:	b027883a 	mov	r19,r22
    1c60:	003f8a06 	br	1a8c <_realloc_r+0x138>
    1c64:	300b883a 	mov	r5,r6
    1c68:	dfc00917 	ldw	ra,36(sp)
    1c6c:	df000817 	ldw	fp,32(sp)
    1c70:	ddc00717 	ldw	r23,28(sp)
    1c74:	dd800617 	ldw	r22,24(sp)
    1c78:	dd400517 	ldw	r21,20(sp)
    1c7c:	dd000417 	ldw	r20,16(sp)
    1c80:	dcc00317 	ldw	r19,12(sp)
    1c84:	dc800217 	ldw	r18,8(sp)
    1c88:	dc400117 	ldw	r17,4(sp)
    1c8c:	dc000017 	ldw	r16,0(sp)
    1c90:	dec00a04 	addi	sp,sp,40
    1c94:	0000c981 	jmpi	c98 <_malloc_r>
    1c98:	a8c00017 	ldw	r3,0(r21)
    1c9c:	90c00015 	stw	r3,0(r18)
    1ca0:	a8c00117 	ldw	r3,4(r21)
    1ca4:	90c00115 	stw	r3,4(r18)
    1ca8:	00c006c4 	movi	r3,27
    1cac:	19804536 	bltu	r3,r6,1dc4 <_realloc_r+0x470>
    1cb0:	90800204 	addi	r2,r18,8
    1cb4:	a8c00204 	addi	r3,r21,8
    1cb8:	003f6306 	br	1a48 <_realloc_r+0xf4>
    1cbc:	9005883a 	mov	r2,r18
    1cc0:	a8c00017 	ldw	r3,0(r21)
    1cc4:	b821883a 	mov	r16,r23
    1cc8:	b027883a 	mov	r19,r22
    1ccc:	10c00015 	stw	r3,0(r2)
    1cd0:	a8c00117 	ldw	r3,4(r21)
    1cd4:	10c00115 	stw	r3,4(r2)
    1cd8:	a8c00217 	ldw	r3,8(r21)
    1cdc:	10c00215 	stw	r3,8(r2)
    1ce0:	003f6a06 	br	1a8c <_realloc_r+0x138>
    1ce4:	9c67883a 	add	r19,r19,r17
    1ce8:	4445c83a 	sub	r2,r8,r17
    1cec:	e4c00215 	stw	r19,8(fp)
    1cf0:	10800054 	ori	r2,r2,1
    1cf4:	98800115 	stw	r2,4(r19)
    1cf8:	a8bfff17 	ldw	r2,-4(r21)
    1cfc:	a009883a 	mov	r4,r20
    1d00:	1080004c 	andi	r2,r2,1
    1d04:	1462b03a 	or	r17,r2,r17
    1d08:	ac7fff15 	stw	r17,-4(r21)
    1d0c:	00034d00 	call	34d0 <__malloc_unlock>
    1d10:	a805883a 	mov	r2,r21
    1d14:	003f6b06 	br	1ac4 <_realloc_r+0x170>
    1d18:	a80b883a 	mov	r5,r21
    1d1c:	9009883a 	mov	r4,r18
    1d20:	00016d00 	call	16d0 <memmove>
    1d24:	003f4e06 	br	1a60 <_realloc_r+0x10c>
    1d28:	89000404 	addi	r4,r17,16
    1d2c:	b93fbc16 	blt	r23,r4,1c20 <_realloc_r+0x2cc>
    1d30:	b0800317 	ldw	r2,12(r22)
    1d34:	b0c00217 	ldw	r3,8(r22)
    1d38:	81bfff04 	addi	r6,r16,-4
    1d3c:	01000904 	movi	r4,36
    1d40:	18800315 	stw	r2,12(r3)
    1d44:	10c00215 	stw	r3,8(r2)
    1d48:	b4800204 	addi	r18,r22,8
    1d4c:	21804336 	bltu	r4,r6,1e5c <_realloc_r+0x508>
    1d50:	008004c4 	movi	r2,19
    1d54:	11803f2e 	bgeu	r2,r6,1e54 <_realloc_r+0x500>
    1d58:	a8800017 	ldw	r2,0(r21)
    1d5c:	b0800215 	stw	r2,8(r22)
    1d60:	a8800117 	ldw	r2,4(r21)
    1d64:	b0800315 	stw	r2,12(r22)
    1d68:	008006c4 	movi	r2,27
    1d6c:	11803f36 	bltu	r2,r6,1e6c <_realloc_r+0x518>
    1d70:	b0800404 	addi	r2,r22,16
    1d74:	ad400204 	addi	r21,r21,8
    1d78:	a8c00017 	ldw	r3,0(r21)
    1d7c:	10c00015 	stw	r3,0(r2)
    1d80:	a8c00117 	ldw	r3,4(r21)
    1d84:	10c00115 	stw	r3,4(r2)
    1d88:	a8c00217 	ldw	r3,8(r21)
    1d8c:	10c00215 	stw	r3,8(r2)
    1d90:	b447883a 	add	r3,r22,r17
    1d94:	bc45c83a 	sub	r2,r23,r17
    1d98:	e0c00215 	stw	r3,8(fp)
    1d9c:	10800054 	ori	r2,r2,1
    1da0:	18800115 	stw	r2,4(r3)
    1da4:	b0800117 	ldw	r2,4(r22)
    1da8:	a009883a 	mov	r4,r20
    1dac:	1080004c 	andi	r2,r2,1
    1db0:	1462b03a 	or	r17,r2,r17
    1db4:	b4400115 	stw	r17,4(r22)
    1db8:	00034d00 	call	34d0 <__malloc_unlock>
    1dbc:	9005883a 	mov	r2,r18
    1dc0:	003f4006 	br	1ac4 <_realloc_r+0x170>
    1dc4:	a8c00217 	ldw	r3,8(r21)
    1dc8:	90c00215 	stw	r3,8(r18)
    1dcc:	a8c00317 	ldw	r3,12(r21)
    1dd0:	90c00315 	stw	r3,12(r18)
    1dd4:	30801126 	beq	r6,r2,1e1c <_realloc_r+0x4c8>
    1dd8:	90800404 	addi	r2,r18,16
    1ddc:	a8c00404 	addi	r3,r21,16
    1de0:	003f1906 	br	1a48 <_realloc_r+0xf4>
    1de4:	90ffff17 	ldw	r3,-4(r18)
    1de8:	00bfff04 	movi	r2,-4
    1dec:	a825883a 	mov	r18,r21
    1df0:	1884703a 	and	r2,r3,r2
    1df4:	80a1883a 	add	r16,r16,r2
    1df8:	003f2406 	br	1a8c <_realloc_r+0x138>
    1dfc:	a8800217 	ldw	r2,8(r21)
    1e00:	b0800415 	stw	r2,16(r22)
    1e04:	a8800317 	ldw	r2,12(r21)
    1e08:	b0800515 	stw	r2,20(r22)
    1e0c:	31000a26 	beq	r6,r4,1e38 <_realloc_r+0x4e4>
    1e10:	b0800604 	addi	r2,r22,24
    1e14:	ad400404 	addi	r21,r21,16
    1e18:	003fa906 	br	1cc0 <_realloc_r+0x36c>
    1e1c:	a9000417 	ldw	r4,16(r21)
    1e20:	90800604 	addi	r2,r18,24
    1e24:	a8c00604 	addi	r3,r21,24
    1e28:	91000415 	stw	r4,16(r18)
    1e2c:	a9000517 	ldw	r4,20(r21)
    1e30:	91000515 	stw	r4,20(r18)
    1e34:	003f0406 	br	1a48 <_realloc_r+0xf4>
    1e38:	a8c00417 	ldw	r3,16(r21)
    1e3c:	ad400604 	addi	r21,r21,24
    1e40:	b0800804 	addi	r2,r22,32
    1e44:	b0c00615 	stw	r3,24(r22)
    1e48:	a8ffff17 	ldw	r3,-4(r21)
    1e4c:	b0c00715 	stw	r3,28(r22)
    1e50:	003f9b06 	br	1cc0 <_realloc_r+0x36c>
    1e54:	9005883a 	mov	r2,r18
    1e58:	003fc706 	br	1d78 <_realloc_r+0x424>
    1e5c:	a80b883a 	mov	r5,r21
    1e60:	9009883a 	mov	r4,r18
    1e64:	00016d00 	call	16d0 <memmove>
    1e68:	003fc906 	br	1d90 <_realloc_r+0x43c>
    1e6c:	a8800217 	ldw	r2,8(r21)
    1e70:	b0800415 	stw	r2,16(r22)
    1e74:	a8800317 	ldw	r2,12(r21)
    1e78:	b0800515 	stw	r2,20(r22)
    1e7c:	31000726 	beq	r6,r4,1e9c <_realloc_r+0x548>
    1e80:	b0800604 	addi	r2,r22,24
    1e84:	ad400404 	addi	r21,r21,16
    1e88:	003fbb06 	br	1d78 <_realloc_r+0x424>
    1e8c:	a009883a 	mov	r4,r20
    1e90:	00034d00 	call	34d0 <__malloc_unlock>
    1e94:	0005883a 	mov	r2,zero
    1e98:	003f0a06 	br	1ac4 <_realloc_r+0x170>
    1e9c:	a8c00417 	ldw	r3,16(r21)
    1ea0:	ad400604 	addi	r21,r21,24
    1ea4:	b0800804 	addi	r2,r22,32
    1ea8:	b0c00615 	stw	r3,24(r22)
    1eac:	a8ffff17 	ldw	r3,-4(r21)
    1eb0:	b0c00715 	stw	r3,28(r22)
    1eb4:	003fb006 	br	1d78 <_realloc_r+0x424>

00001eb8 <_sbrk_r>:
    1eb8:	defffd04 	addi	sp,sp,-12
    1ebc:	dc000015 	stw	r16,0(sp)
    1ec0:	04000074 	movhi	r16,1
    1ec4:	dc400115 	stw	r17,4(sp)
    1ec8:	8402a104 	addi	r16,r16,2692
    1ecc:	2023883a 	mov	r17,r4
    1ed0:	2809883a 	mov	r4,r5
    1ed4:	dfc00215 	stw	ra,8(sp)
    1ed8:	80000015 	stw	zero,0(r16)
    1edc:	00036b80 	call	36b8 <sbrk>
    1ee0:	00ffffc4 	movi	r3,-1
    1ee4:	10c00526 	beq	r2,r3,1efc <_sbrk_r+0x44>
    1ee8:	dfc00217 	ldw	ra,8(sp)
    1eec:	dc400117 	ldw	r17,4(sp)
    1ef0:	dc000017 	ldw	r16,0(sp)
    1ef4:	dec00304 	addi	sp,sp,12
    1ef8:	f800283a 	ret
    1efc:	80c00017 	ldw	r3,0(r16)
    1f00:	183ff926 	beq	r3,zero,1ee8 <_sbrk_r+0x30>
    1f04:	88c00015 	stw	r3,0(r17)
    1f08:	003ff706 	br	1ee8 <_sbrk_r+0x30>

00001f0c <__sread>:
    1f0c:	defffe04 	addi	sp,sp,-8
    1f10:	dc000015 	stw	r16,0(sp)
    1f14:	2821883a 	mov	r16,r5
    1f18:	2940038f 	ldh	r5,14(r5)
    1f1c:	dfc00115 	stw	ra,4(sp)
    1f20:	0002c4c0 	call	2c4c <_read_r>
    1f24:	10000716 	blt	r2,zero,1f44 <__sread+0x38>
    1f28:	80c01417 	ldw	r3,80(r16)
    1f2c:	1887883a 	add	r3,r3,r2
    1f30:	80c01415 	stw	r3,80(r16)
    1f34:	dfc00117 	ldw	ra,4(sp)
    1f38:	dc000017 	ldw	r16,0(sp)
    1f3c:	dec00204 	addi	sp,sp,8
    1f40:	f800283a 	ret
    1f44:	80c0030b 	ldhu	r3,12(r16)
    1f48:	18fbffcc 	andi	r3,r3,61439
    1f4c:	80c0030d 	sth	r3,12(r16)
    1f50:	dfc00117 	ldw	ra,4(sp)
    1f54:	dc000017 	ldw	r16,0(sp)
    1f58:	dec00204 	addi	sp,sp,8
    1f5c:	f800283a 	ret

00001f60 <__seofread>:
    1f60:	0005883a 	mov	r2,zero
    1f64:	f800283a 	ret

00001f68 <__swrite>:
    1f68:	2880030b 	ldhu	r2,12(r5)
    1f6c:	defffb04 	addi	sp,sp,-20
    1f70:	dcc00315 	stw	r19,12(sp)
    1f74:	dc800215 	stw	r18,8(sp)
    1f78:	dc400115 	stw	r17,4(sp)
    1f7c:	dc000015 	stw	r16,0(sp)
    1f80:	dfc00415 	stw	ra,16(sp)
    1f84:	10c0400c 	andi	r3,r2,256
    1f88:	2821883a 	mov	r16,r5
    1f8c:	2023883a 	mov	r17,r4
    1f90:	3025883a 	mov	r18,r6
    1f94:	3827883a 	mov	r19,r7
    1f98:	18000526 	beq	r3,zero,1fb0 <__swrite+0x48>
    1f9c:	2940038f 	ldh	r5,14(r5)
    1fa0:	01c00084 	movi	r7,2
    1fa4:	000d883a 	mov	r6,zero
    1fa8:	0002a300 	call	2a30 <_lseek_r>
    1fac:	8080030b 	ldhu	r2,12(r16)
    1fb0:	8140038f 	ldh	r5,14(r16)
    1fb4:	10bbffcc 	andi	r2,r2,61439
    1fb8:	980f883a 	mov	r7,r19
    1fbc:	900d883a 	mov	r6,r18
    1fc0:	8809883a 	mov	r4,r17
    1fc4:	8080030d 	sth	r2,12(r16)
    1fc8:	dfc00417 	ldw	ra,16(sp)
    1fcc:	dcc00317 	ldw	r19,12(sp)
    1fd0:	dc800217 	ldw	r18,8(sp)
    1fd4:	dc400117 	ldw	r17,4(sp)
    1fd8:	dc000017 	ldw	r16,0(sp)
    1fdc:	dec00504 	addi	sp,sp,20
    1fe0:	00020481 	jmpi	2048 <_write_r>

00001fe4 <__sseek>:
    1fe4:	defffe04 	addi	sp,sp,-8
    1fe8:	dc000015 	stw	r16,0(sp)
    1fec:	2821883a 	mov	r16,r5
    1ff0:	2940038f 	ldh	r5,14(r5)
    1ff4:	dfc00115 	stw	ra,4(sp)
    1ff8:	0002a300 	call	2a30 <_lseek_r>
    1ffc:	00ffffc4 	movi	r3,-1
    2000:	10c00826 	beq	r2,r3,2024 <__sseek+0x40>
    2004:	80c0030b 	ldhu	r3,12(r16)
    2008:	80801415 	stw	r2,80(r16)
    200c:	18c40014 	ori	r3,r3,4096
    2010:	80c0030d 	sth	r3,12(r16)
    2014:	dfc00117 	ldw	ra,4(sp)
    2018:	dc000017 	ldw	r16,0(sp)
    201c:	dec00204 	addi	sp,sp,8
    2020:	f800283a 	ret
    2024:	80c0030b 	ldhu	r3,12(r16)
    2028:	18fbffcc 	andi	r3,r3,61439
    202c:	80c0030d 	sth	r3,12(r16)
    2030:	dfc00117 	ldw	ra,4(sp)
    2034:	dc000017 	ldw	r16,0(sp)
    2038:	dec00204 	addi	sp,sp,8
    203c:	f800283a 	ret

00002040 <__sclose>:
    2040:	2940038f 	ldh	r5,14(r5)
    2044:	00021fc1 	jmpi	21fc <_close_r>

00002048 <_write_r>:
    2048:	defffd04 	addi	sp,sp,-12
    204c:	2805883a 	mov	r2,r5
    2050:	dc000015 	stw	r16,0(sp)
    2054:	04000074 	movhi	r16,1
    2058:	dc400115 	stw	r17,4(sp)
    205c:	300b883a 	mov	r5,r6
    2060:	8402a104 	addi	r16,r16,2692
    2064:	2023883a 	mov	r17,r4
    2068:	380d883a 	mov	r6,r7
    206c:	1009883a 	mov	r4,r2
    2070:	dfc00215 	stw	ra,8(sp)
    2074:	80000015 	stw	zero,0(r16)
    2078:	00037d40 	call	37d4 <write>
    207c:	00ffffc4 	movi	r3,-1
    2080:	10c00526 	beq	r2,r3,2098 <_write_r+0x50>
    2084:	dfc00217 	ldw	ra,8(sp)
    2088:	dc400117 	ldw	r17,4(sp)
    208c:	dc000017 	ldw	r16,0(sp)
    2090:	dec00304 	addi	sp,sp,12
    2094:	f800283a 	ret
    2098:	80c00017 	ldw	r3,0(r16)
    209c:	183ff926 	beq	r3,zero,2084 <_write_r+0x3c>
    20a0:	88c00015 	stw	r3,0(r17)
    20a4:	003ff706 	br	2084 <_write_r+0x3c>

000020a8 <__swsetup_r>:
    20a8:	00800074 	movhi	r2,1
    20ac:	defffd04 	addi	sp,sp,-12
    20b0:	10829404 	addi	r2,r2,2640
    20b4:	dc400115 	stw	r17,4(sp)
    20b8:	2023883a 	mov	r17,r4
    20bc:	11000017 	ldw	r4,0(r2)
    20c0:	dc000015 	stw	r16,0(sp)
    20c4:	dfc00215 	stw	ra,8(sp)
    20c8:	2821883a 	mov	r16,r5
    20cc:	20000226 	beq	r4,zero,20d8 <__swsetup_r+0x30>
    20d0:	20800e17 	ldw	r2,56(r4)
    20d4:	10003126 	beq	r2,zero,219c <__swsetup_r+0xf4>
    20d8:	8080030b 	ldhu	r2,12(r16)
    20dc:	10c0020c 	andi	r3,r2,8
    20e0:	1009883a 	mov	r4,r2
    20e4:	18000f26 	beq	r3,zero,2124 <__swsetup_r+0x7c>
    20e8:	80c00417 	ldw	r3,16(r16)
    20ec:	18001526 	beq	r3,zero,2144 <__swsetup_r+0x9c>
    20f0:	1100004c 	andi	r4,r2,1
    20f4:	20001c1e 	bne	r4,zero,2168 <__swsetup_r+0xc0>
    20f8:	1080008c 	andi	r2,r2,2
    20fc:	1000291e 	bne	r2,zero,21a4 <__swsetup_r+0xfc>
    2100:	80800517 	ldw	r2,20(r16)
    2104:	80800215 	stw	r2,8(r16)
    2108:	18001c26 	beq	r3,zero,217c <__swsetup_r+0xd4>
    210c:	0005883a 	mov	r2,zero
    2110:	dfc00217 	ldw	ra,8(sp)
    2114:	dc400117 	ldw	r17,4(sp)
    2118:	dc000017 	ldw	r16,0(sp)
    211c:	dec00304 	addi	sp,sp,12
    2120:	f800283a 	ret
    2124:	2080040c 	andi	r2,r4,16
    2128:	10002e26 	beq	r2,zero,21e4 <__swsetup_r+0x13c>
    212c:	2080010c 	andi	r2,r4,4
    2130:	10001e1e 	bne	r2,zero,21ac <__swsetup_r+0x104>
    2134:	80c00417 	ldw	r3,16(r16)
    2138:	20800214 	ori	r2,r4,8
    213c:	8080030d 	sth	r2,12(r16)
    2140:	183feb1e 	bne	r3,zero,20f0 <__swsetup_r+0x48>
    2144:	1100a00c 	andi	r4,r2,640
    2148:	01408004 	movi	r5,512
    214c:	217fe826 	beq	r4,r5,20f0 <__swsetup_r+0x48>
    2150:	800b883a 	mov	r5,r16
    2154:	8809883a 	mov	r4,r17
    2158:	0002a900 	call	2a90 <__smakebuf_r>
    215c:	8080030b 	ldhu	r2,12(r16)
    2160:	80c00417 	ldw	r3,16(r16)
    2164:	003fe206 	br	20f0 <__swsetup_r+0x48>
    2168:	80800517 	ldw	r2,20(r16)
    216c:	80000215 	stw	zero,8(r16)
    2170:	0085c83a 	sub	r2,zero,r2
    2174:	80800615 	stw	r2,24(r16)
    2178:	183fe41e 	bne	r3,zero,210c <__swsetup_r+0x64>
    217c:	80c0030b 	ldhu	r3,12(r16)
    2180:	0005883a 	mov	r2,zero
    2184:	1900200c 	andi	r4,r3,128
    2188:	203fe126 	beq	r4,zero,2110 <__swsetup_r+0x68>
    218c:	18c01014 	ori	r3,r3,64
    2190:	80c0030d 	sth	r3,12(r16)
    2194:	00bfffc4 	movi	r2,-1
    2198:	003fdd06 	br	2110 <__swsetup_r+0x68>
    219c:	00005f80 	call	5f8 <__sinit>
    21a0:	003fcd06 	br	20d8 <__swsetup_r+0x30>
    21a4:	0005883a 	mov	r2,zero
    21a8:	003fd606 	br	2104 <__swsetup_r+0x5c>
    21ac:	81400c17 	ldw	r5,48(r16)
    21b0:	28000626 	beq	r5,zero,21cc <__swsetup_r+0x124>
    21b4:	80801004 	addi	r2,r16,64
    21b8:	28800326 	beq	r5,r2,21c8 <__swsetup_r+0x120>
    21bc:	8809883a 	mov	r4,r17
    21c0:	00027200 	call	2720 <_free_r>
    21c4:	8100030b 	ldhu	r4,12(r16)
    21c8:	80000c15 	stw	zero,48(r16)
    21cc:	80c00417 	ldw	r3,16(r16)
    21d0:	00bff6c4 	movi	r2,-37
    21d4:	1108703a 	and	r4,r2,r4
    21d8:	80000115 	stw	zero,4(r16)
    21dc:	80c00015 	stw	r3,0(r16)
    21e0:	003fd506 	br	2138 <__swsetup_r+0x90>
    21e4:	00800244 	movi	r2,9
    21e8:	88800015 	stw	r2,0(r17)
    21ec:	20801014 	ori	r2,r4,64
    21f0:	8080030d 	sth	r2,12(r16)
    21f4:	00bfffc4 	movi	r2,-1
    21f8:	003fc506 	br	2110 <__swsetup_r+0x68>

000021fc <_close_r>:
    21fc:	defffd04 	addi	sp,sp,-12
    2200:	dc000015 	stw	r16,0(sp)
    2204:	04000074 	movhi	r16,1
    2208:	dc400115 	stw	r17,4(sp)
    220c:	8402a104 	addi	r16,r16,2692
    2210:	2023883a 	mov	r17,r4
    2214:	2809883a 	mov	r4,r5
    2218:	dfc00215 	stw	ra,8(sp)
    221c:	80000015 	stw	zero,0(r16)
    2220:	0002f4c0 	call	2f4c <close>
    2224:	00ffffc4 	movi	r3,-1
    2228:	10c00526 	beq	r2,r3,2240 <_close_r+0x44>
    222c:	dfc00217 	ldw	ra,8(sp)
    2230:	dc400117 	ldw	r17,4(sp)
    2234:	dc000017 	ldw	r16,0(sp)
    2238:	dec00304 	addi	sp,sp,12
    223c:	f800283a 	ret
    2240:	80c00017 	ldw	r3,0(r16)
    2244:	183ff926 	beq	r3,zero,222c <_close_r+0x30>
    2248:	88c00015 	stw	r3,0(r17)
    224c:	003ff706 	br	222c <_close_r+0x30>

00002250 <_fclose_r>:
    2250:	28003926 	beq	r5,zero,2338 <_fclose_r+0xe8>
    2254:	defffc04 	addi	sp,sp,-16
    2258:	dc400115 	stw	r17,4(sp)
    225c:	dc000015 	stw	r16,0(sp)
    2260:	dfc00315 	stw	ra,12(sp)
    2264:	dc800215 	stw	r18,8(sp)
    2268:	2023883a 	mov	r17,r4
    226c:	2821883a 	mov	r16,r5
    2270:	20000226 	beq	r4,zero,227c <_fclose_r+0x2c>
    2274:	20800e17 	ldw	r2,56(r4)
    2278:	10002726 	beq	r2,zero,2318 <_fclose_r+0xc8>
    227c:	8080030f 	ldh	r2,12(r16)
    2280:	1000071e 	bne	r2,zero,22a0 <_fclose_r+0x50>
    2284:	0005883a 	mov	r2,zero
    2288:	dfc00317 	ldw	ra,12(sp)
    228c:	dc800217 	ldw	r18,8(sp)
    2290:	dc400117 	ldw	r17,4(sp)
    2294:	dc000017 	ldw	r16,0(sp)
    2298:	dec00404 	addi	sp,sp,16
    229c:	f800283a 	ret
    22a0:	800b883a 	mov	r5,r16
    22a4:	8809883a 	mov	r4,r17
    22a8:	00023540 	call	2354 <__sflush_r>
    22ac:	1025883a 	mov	r18,r2
    22b0:	80800b17 	ldw	r2,44(r16)
    22b4:	10000426 	beq	r2,zero,22c8 <_fclose_r+0x78>
    22b8:	81400717 	ldw	r5,28(r16)
    22bc:	8809883a 	mov	r4,r17
    22c0:	103ee83a 	callr	r2
    22c4:	10001616 	blt	r2,zero,2320 <_fclose_r+0xd0>
    22c8:	8080030b 	ldhu	r2,12(r16)
    22cc:	1080200c 	andi	r2,r2,128
    22d0:	1000151e 	bne	r2,zero,2328 <_fclose_r+0xd8>
    22d4:	81400c17 	ldw	r5,48(r16)
    22d8:	28000526 	beq	r5,zero,22f0 <_fclose_r+0xa0>
    22dc:	80801004 	addi	r2,r16,64
    22e0:	28800226 	beq	r5,r2,22ec <_fclose_r+0x9c>
    22e4:	8809883a 	mov	r4,r17
    22e8:	00027200 	call	2720 <_free_r>
    22ec:	80000c15 	stw	zero,48(r16)
    22f0:	81401117 	ldw	r5,68(r16)
    22f4:	28000326 	beq	r5,zero,2304 <_fclose_r+0xb4>
    22f8:	8809883a 	mov	r4,r17
    22fc:	00027200 	call	2720 <_free_r>
    2300:	80001115 	stw	zero,68(r16)
    2304:	00006080 	call	608 <__sfp_lock_acquire>
    2308:	8000030d 	sth	zero,12(r16)
    230c:	000060c0 	call	60c <__sfp_lock_release>
    2310:	9005883a 	mov	r2,r18
    2314:	003fdc06 	br	2288 <_fclose_r+0x38>
    2318:	00005f80 	call	5f8 <__sinit>
    231c:	003fd706 	br	227c <_fclose_r+0x2c>
    2320:	04bfffc4 	movi	r18,-1
    2324:	003fe806 	br	22c8 <_fclose_r+0x78>
    2328:	81400417 	ldw	r5,16(r16)
    232c:	8809883a 	mov	r4,r17
    2330:	00027200 	call	2720 <_free_r>
    2334:	003fe706 	br	22d4 <_fclose_r+0x84>
    2338:	0005883a 	mov	r2,zero
    233c:	f800283a 	ret

00002340 <fclose>:
    2340:	00800074 	movhi	r2,1
    2344:	10829404 	addi	r2,r2,2640
    2348:	200b883a 	mov	r5,r4
    234c:	11000017 	ldw	r4,0(r2)
    2350:	00022501 	jmpi	2250 <_fclose_r>

00002354 <__sflush_r>:
    2354:	2880030b 	ldhu	r2,12(r5)
    2358:	defffb04 	addi	sp,sp,-20
    235c:	dcc00315 	stw	r19,12(sp)
    2360:	dc400115 	stw	r17,4(sp)
    2364:	dfc00415 	stw	ra,16(sp)
    2368:	dc800215 	stw	r18,8(sp)
    236c:	dc000015 	stw	r16,0(sp)
    2370:	10c0020c 	andi	r3,r2,8
    2374:	2823883a 	mov	r17,r5
    2378:	2027883a 	mov	r19,r4
    237c:	1800311e 	bne	r3,zero,2444 <__sflush_r+0xf0>
    2380:	28c00117 	ldw	r3,4(r5)
    2384:	10820014 	ori	r2,r2,2048
    2388:	2880030d 	sth	r2,12(r5)
    238c:	00c04b0e 	bge	zero,r3,24bc <__sflush_r+0x168>
    2390:	8a000a17 	ldw	r8,40(r17)
    2394:	40002326 	beq	r8,zero,2424 <__sflush_r+0xd0>
    2398:	9c000017 	ldw	r16,0(r19)
    239c:	10c4000c 	andi	r3,r2,4096
    23a0:	98000015 	stw	zero,0(r19)
    23a4:	18004826 	beq	r3,zero,24c8 <__sflush_r+0x174>
    23a8:	89801417 	ldw	r6,80(r17)
    23ac:	10c0010c 	andi	r3,r2,4
    23b0:	18000626 	beq	r3,zero,23cc <__sflush_r+0x78>
    23b4:	88c00117 	ldw	r3,4(r17)
    23b8:	88800c17 	ldw	r2,48(r17)
    23bc:	30cdc83a 	sub	r6,r6,r3
    23c0:	10000226 	beq	r2,zero,23cc <__sflush_r+0x78>
    23c4:	88800f17 	ldw	r2,60(r17)
    23c8:	308dc83a 	sub	r6,r6,r2
    23cc:	89400717 	ldw	r5,28(r17)
    23d0:	000f883a 	mov	r7,zero
    23d4:	9809883a 	mov	r4,r19
    23d8:	403ee83a 	callr	r8
    23dc:	00ffffc4 	movi	r3,-1
    23e0:	10c04426 	beq	r2,r3,24f4 <__sflush_r+0x1a0>
    23e4:	88c0030b 	ldhu	r3,12(r17)
    23e8:	89000417 	ldw	r4,16(r17)
    23ec:	88000115 	stw	zero,4(r17)
    23f0:	197dffcc 	andi	r5,r3,63487
    23f4:	8940030d 	sth	r5,12(r17)
    23f8:	89000015 	stw	r4,0(r17)
    23fc:	18c4000c 	andi	r3,r3,4096
    2400:	18002c1e 	bne	r3,zero,24b4 <__sflush_r+0x160>
    2404:	89400c17 	ldw	r5,48(r17)
    2408:	9c000015 	stw	r16,0(r19)
    240c:	28000526 	beq	r5,zero,2424 <__sflush_r+0xd0>
    2410:	88801004 	addi	r2,r17,64
    2414:	28800226 	beq	r5,r2,2420 <__sflush_r+0xcc>
    2418:	9809883a 	mov	r4,r19
    241c:	00027200 	call	2720 <_free_r>
    2420:	88000c15 	stw	zero,48(r17)
    2424:	0005883a 	mov	r2,zero
    2428:	dfc00417 	ldw	ra,16(sp)
    242c:	dcc00317 	ldw	r19,12(sp)
    2430:	dc800217 	ldw	r18,8(sp)
    2434:	dc400117 	ldw	r17,4(sp)
    2438:	dc000017 	ldw	r16,0(sp)
    243c:	dec00504 	addi	sp,sp,20
    2440:	f800283a 	ret
    2444:	2c800417 	ldw	r18,16(r5)
    2448:	903ff626 	beq	r18,zero,2424 <__sflush_r+0xd0>
    244c:	2c000017 	ldw	r16,0(r5)
    2450:	108000cc 	andi	r2,r2,3
    2454:	2c800015 	stw	r18,0(r5)
    2458:	84a1c83a 	sub	r16,r16,r18
    245c:	1000131e 	bne	r2,zero,24ac <__sflush_r+0x158>
    2460:	28800517 	ldw	r2,20(r5)
    2464:	88800215 	stw	r2,8(r17)
    2468:	04000316 	blt	zero,r16,2478 <__sflush_r+0x124>
    246c:	003fed06 	br	2424 <__sflush_r+0xd0>
    2470:	90a5883a 	add	r18,r18,r2
    2474:	043feb0e 	bge	zero,r16,2424 <__sflush_r+0xd0>
    2478:	88800917 	ldw	r2,36(r17)
    247c:	89400717 	ldw	r5,28(r17)
    2480:	800f883a 	mov	r7,r16
    2484:	900d883a 	mov	r6,r18
    2488:	9809883a 	mov	r4,r19
    248c:	103ee83a 	callr	r2
    2490:	80a1c83a 	sub	r16,r16,r2
    2494:	00bff616 	blt	zero,r2,2470 <__sflush_r+0x11c>
    2498:	88c0030b 	ldhu	r3,12(r17)
    249c:	00bfffc4 	movi	r2,-1
    24a0:	18c01014 	ori	r3,r3,64
    24a4:	88c0030d 	sth	r3,12(r17)
    24a8:	003fdf06 	br	2428 <__sflush_r+0xd4>
    24ac:	0005883a 	mov	r2,zero
    24b0:	003fec06 	br	2464 <__sflush_r+0x110>
    24b4:	88801415 	stw	r2,80(r17)
    24b8:	003fd206 	br	2404 <__sflush_r+0xb0>
    24bc:	28c00f17 	ldw	r3,60(r5)
    24c0:	00ffb316 	blt	zero,r3,2390 <__sflush_r+0x3c>
    24c4:	003fd706 	br	2424 <__sflush_r+0xd0>
    24c8:	89400717 	ldw	r5,28(r17)
    24cc:	000d883a 	mov	r6,zero
    24d0:	01c00044 	movi	r7,1
    24d4:	9809883a 	mov	r4,r19
    24d8:	403ee83a 	callr	r8
    24dc:	100d883a 	mov	r6,r2
    24e0:	00bfffc4 	movi	r2,-1
    24e4:	30801426 	beq	r6,r2,2538 <__sflush_r+0x1e4>
    24e8:	8880030b 	ldhu	r2,12(r17)
    24ec:	8a000a17 	ldw	r8,40(r17)
    24f0:	003fae06 	br	23ac <__sflush_r+0x58>
    24f4:	98c00017 	ldw	r3,0(r19)
    24f8:	183fba26 	beq	r3,zero,23e4 <__sflush_r+0x90>
    24fc:	01000744 	movi	r4,29
    2500:	19000626 	beq	r3,r4,251c <__sflush_r+0x1c8>
    2504:	01000584 	movi	r4,22
    2508:	19000426 	beq	r3,r4,251c <__sflush_r+0x1c8>
    250c:	88c0030b 	ldhu	r3,12(r17)
    2510:	18c01014 	ori	r3,r3,64
    2514:	88c0030d 	sth	r3,12(r17)
    2518:	003fc306 	br	2428 <__sflush_r+0xd4>
    251c:	8880030b 	ldhu	r2,12(r17)
    2520:	88c00417 	ldw	r3,16(r17)
    2524:	88000115 	stw	zero,4(r17)
    2528:	10bdffcc 	andi	r2,r2,63487
    252c:	8880030d 	sth	r2,12(r17)
    2530:	88c00015 	stw	r3,0(r17)
    2534:	003fb306 	br	2404 <__sflush_r+0xb0>
    2538:	98800017 	ldw	r2,0(r19)
    253c:	103fea26 	beq	r2,zero,24e8 <__sflush_r+0x194>
    2540:	00c00744 	movi	r3,29
    2544:	10c00226 	beq	r2,r3,2550 <__sflush_r+0x1fc>
    2548:	00c00584 	movi	r3,22
    254c:	10c0031e 	bne	r2,r3,255c <__sflush_r+0x208>
    2550:	9c000015 	stw	r16,0(r19)
    2554:	0005883a 	mov	r2,zero
    2558:	003fb306 	br	2428 <__sflush_r+0xd4>
    255c:	88c0030b 	ldhu	r3,12(r17)
    2560:	3005883a 	mov	r2,r6
    2564:	18c01014 	ori	r3,r3,64
    2568:	88c0030d 	sth	r3,12(r17)
    256c:	003fae06 	br	2428 <__sflush_r+0xd4>

00002570 <_fflush_r>:
    2570:	defffd04 	addi	sp,sp,-12
    2574:	dc000115 	stw	r16,4(sp)
    2578:	dfc00215 	stw	ra,8(sp)
    257c:	2021883a 	mov	r16,r4
    2580:	20000226 	beq	r4,zero,258c <_fflush_r+0x1c>
    2584:	20800e17 	ldw	r2,56(r4)
    2588:	10000c26 	beq	r2,zero,25bc <_fflush_r+0x4c>
    258c:	2880030f 	ldh	r2,12(r5)
    2590:	1000051e 	bne	r2,zero,25a8 <_fflush_r+0x38>
    2594:	0005883a 	mov	r2,zero
    2598:	dfc00217 	ldw	ra,8(sp)
    259c:	dc000117 	ldw	r16,4(sp)
    25a0:	dec00304 	addi	sp,sp,12
    25a4:	f800283a 	ret
    25a8:	8009883a 	mov	r4,r16
    25ac:	dfc00217 	ldw	ra,8(sp)
    25b0:	dc000117 	ldw	r16,4(sp)
    25b4:	dec00304 	addi	sp,sp,12
    25b8:	00023541 	jmpi	2354 <__sflush_r>
    25bc:	d9400015 	stw	r5,0(sp)
    25c0:	00005f80 	call	5f8 <__sinit>
    25c4:	d9400017 	ldw	r5,0(sp)
    25c8:	003ff006 	br	258c <_fflush_r+0x1c>

000025cc <fflush>:
    25cc:	20000526 	beq	r4,zero,25e4 <fflush+0x18>
    25d0:	00800074 	movhi	r2,1
    25d4:	10829404 	addi	r2,r2,2640
    25d8:	200b883a 	mov	r5,r4
    25dc:	11000017 	ldw	r4,0(r2)
    25e0:	00025701 	jmpi	2570 <_fflush_r>
    25e4:	00800074 	movhi	r2,1
    25e8:	10829304 	addi	r2,r2,2636
    25ec:	11000017 	ldw	r4,0(r2)
    25f0:	01400034 	movhi	r5,0
    25f4:	29495c04 	addi	r5,r5,9584
    25f8:	0000bd41 	jmpi	bd4 <_fwalk_reent>

000025fc <_malloc_trim_r>:
    25fc:	defffb04 	addi	sp,sp,-20
    2600:	dcc00315 	stw	r19,12(sp)
    2604:	04c00074 	movhi	r19,1
    2608:	dc800215 	stw	r18,8(sp)
    260c:	dc400115 	stw	r17,4(sp)
    2610:	dc000015 	stw	r16,0(sp)
    2614:	dfc00415 	stw	ra,16(sp)
    2618:	2821883a 	mov	r16,r5
    261c:	9cc11c04 	addi	r19,r19,1136
    2620:	2025883a 	mov	r18,r4
    2624:	00034ac0 	call	34ac <__malloc_lock>
    2628:	98800217 	ldw	r2,8(r19)
    262c:	14400117 	ldw	r17,4(r2)
    2630:	00bfff04 	movi	r2,-4
    2634:	88a2703a 	and	r17,r17,r2
    2638:	8c21c83a 	sub	r16,r17,r16
    263c:	8403fbc4 	addi	r16,r16,4079
    2640:	8020d33a 	srli	r16,r16,12
    2644:	0083ffc4 	movi	r2,4095
    2648:	843fffc4 	addi	r16,r16,-1
    264c:	8020933a 	slli	r16,r16,12
    2650:	1400060e 	bge	r2,r16,266c <_malloc_trim_r+0x70>
    2654:	000b883a 	mov	r5,zero
    2658:	9009883a 	mov	r4,r18
    265c:	0001eb80 	call	1eb8 <_sbrk_r>
    2660:	98c00217 	ldw	r3,8(r19)
    2664:	1c47883a 	add	r3,r3,r17
    2668:	10c00a26 	beq	r2,r3,2694 <_malloc_trim_r+0x98>
    266c:	9009883a 	mov	r4,r18
    2670:	00034d00 	call	34d0 <__malloc_unlock>
    2674:	0005883a 	mov	r2,zero
    2678:	dfc00417 	ldw	ra,16(sp)
    267c:	dcc00317 	ldw	r19,12(sp)
    2680:	dc800217 	ldw	r18,8(sp)
    2684:	dc400117 	ldw	r17,4(sp)
    2688:	dc000017 	ldw	r16,0(sp)
    268c:	dec00504 	addi	sp,sp,20
    2690:	f800283a 	ret
    2694:	040bc83a 	sub	r5,zero,r16
    2698:	9009883a 	mov	r4,r18
    269c:	0001eb80 	call	1eb8 <_sbrk_r>
    26a0:	00ffffc4 	movi	r3,-1
    26a4:	10c00d26 	beq	r2,r3,26dc <_malloc_trim_r+0xe0>
    26a8:	00c00074 	movhi	r3,1
    26ac:	18c2a504 	addi	r3,r3,2708
    26b0:	18800017 	ldw	r2,0(r3)
    26b4:	99000217 	ldw	r4,8(r19)
    26b8:	8c23c83a 	sub	r17,r17,r16
    26bc:	8c400054 	ori	r17,r17,1
    26c0:	1421c83a 	sub	r16,r2,r16
    26c4:	24400115 	stw	r17,4(r4)
    26c8:	9009883a 	mov	r4,r18
    26cc:	1c000015 	stw	r16,0(r3)
    26d0:	00034d00 	call	34d0 <__malloc_unlock>
    26d4:	00800044 	movi	r2,1
    26d8:	003fe706 	br	2678 <_malloc_trim_r+0x7c>
    26dc:	000b883a 	mov	r5,zero
    26e0:	9009883a 	mov	r4,r18
    26e4:	0001eb80 	call	1eb8 <_sbrk_r>
    26e8:	99000217 	ldw	r4,8(r19)
    26ec:	014003c4 	movi	r5,15
    26f0:	1107c83a 	sub	r3,r2,r4
    26f4:	28ffdd0e 	bge	r5,r3,266c <_malloc_trim_r+0x70>
    26f8:	01400074 	movhi	r5,1
    26fc:	29429504 	addi	r5,r5,2644
    2700:	29400017 	ldw	r5,0(r5)
    2704:	18c00054 	ori	r3,r3,1
    2708:	20c00115 	stw	r3,4(r4)
    270c:	00c00074 	movhi	r3,1
    2710:	1145c83a 	sub	r2,r2,r5
    2714:	18c2a504 	addi	r3,r3,2708
    2718:	18800015 	stw	r2,0(r3)
    271c:	003fd306 	br	266c <_malloc_trim_r+0x70>

00002720 <_free_r>:
    2720:	28004126 	beq	r5,zero,2828 <_free_r+0x108>
    2724:	defffd04 	addi	sp,sp,-12
    2728:	dc400115 	stw	r17,4(sp)
    272c:	dc000015 	stw	r16,0(sp)
    2730:	2023883a 	mov	r17,r4
    2734:	2821883a 	mov	r16,r5
    2738:	dfc00215 	stw	ra,8(sp)
    273c:	00034ac0 	call	34ac <__malloc_lock>
    2740:	81ffff17 	ldw	r7,-4(r16)
    2744:	00bfff84 	movi	r2,-2
    2748:	01000074 	movhi	r4,1
    274c:	81bffe04 	addi	r6,r16,-8
    2750:	3884703a 	and	r2,r7,r2
    2754:	21011c04 	addi	r4,r4,1136
    2758:	308b883a 	add	r5,r6,r2
    275c:	2a400117 	ldw	r9,4(r5)
    2760:	22000217 	ldw	r8,8(r4)
    2764:	00ffff04 	movi	r3,-4
    2768:	48c6703a 	and	r3,r9,r3
    276c:	2a005726 	beq	r5,r8,28cc <_free_r+0x1ac>
    2770:	28c00115 	stw	r3,4(r5)
    2774:	39c0004c 	andi	r7,r7,1
    2778:	3800091e 	bne	r7,zero,27a0 <_free_r+0x80>
    277c:	823ffe17 	ldw	r8,-8(r16)
    2780:	22400204 	addi	r9,r4,8
    2784:	320dc83a 	sub	r6,r6,r8
    2788:	31c00217 	ldw	r7,8(r6)
    278c:	1205883a 	add	r2,r2,r8
    2790:	3a406526 	beq	r7,r9,2928 <_free_r+0x208>
    2794:	32000317 	ldw	r8,12(r6)
    2798:	3a000315 	stw	r8,12(r7)
    279c:	41c00215 	stw	r7,8(r8)
    27a0:	28cf883a 	add	r7,r5,r3
    27a4:	39c00117 	ldw	r7,4(r7)
    27a8:	39c0004c 	andi	r7,r7,1
    27ac:	38003a26 	beq	r7,zero,2898 <_free_r+0x178>
    27b0:	10c00054 	ori	r3,r2,1
    27b4:	30c00115 	stw	r3,4(r6)
    27b8:	3087883a 	add	r3,r6,r2
    27bc:	18800015 	stw	r2,0(r3)
    27c0:	00c07fc4 	movi	r3,511
    27c4:	18801936 	bltu	r3,r2,282c <_free_r+0x10c>
    27c8:	1004d0fa 	srli	r2,r2,3
    27cc:	01c00044 	movi	r7,1
    27d0:	21400117 	ldw	r5,4(r4)
    27d4:	10c00044 	addi	r3,r2,1
    27d8:	18c7883a 	add	r3,r3,r3
    27dc:	1005d0ba 	srai	r2,r2,2
    27e0:	18c7883a 	add	r3,r3,r3
    27e4:	18c7883a 	add	r3,r3,r3
    27e8:	1907883a 	add	r3,r3,r4
    27ec:	3884983a 	sll	r2,r7,r2
    27f0:	19c00017 	ldw	r7,0(r3)
    27f4:	1a3ffe04 	addi	r8,r3,-8
    27f8:	1144b03a 	or	r2,r2,r5
    27fc:	32000315 	stw	r8,12(r6)
    2800:	31c00215 	stw	r7,8(r6)
    2804:	20800115 	stw	r2,4(r4)
    2808:	19800015 	stw	r6,0(r3)
    280c:	39800315 	stw	r6,12(r7)
    2810:	8809883a 	mov	r4,r17
    2814:	dfc00217 	ldw	ra,8(sp)
    2818:	dc400117 	ldw	r17,4(sp)
    281c:	dc000017 	ldw	r16,0(sp)
    2820:	dec00304 	addi	sp,sp,12
    2824:	00034d01 	jmpi	34d0 <__malloc_unlock>
    2828:	f800283a 	ret
    282c:	100ad27a 	srli	r5,r2,9
    2830:	00c00104 	movi	r3,4
    2834:	19404a36 	bltu	r3,r5,2960 <_free_r+0x240>
    2838:	100ad1ba 	srli	r5,r2,6
    283c:	28c00e44 	addi	r3,r5,57
    2840:	18c7883a 	add	r3,r3,r3
    2844:	29400e04 	addi	r5,r5,56
    2848:	18c7883a 	add	r3,r3,r3
    284c:	18c7883a 	add	r3,r3,r3
    2850:	1909883a 	add	r4,r3,r4
    2854:	20c00017 	ldw	r3,0(r4)
    2858:	01c00074 	movhi	r7,1
    285c:	213ffe04 	addi	r4,r4,-8
    2860:	39c11c04 	addi	r7,r7,1136
    2864:	20c04426 	beq	r4,r3,2978 <_free_r+0x258>
    2868:	01ffff04 	movi	r7,-4
    286c:	19400117 	ldw	r5,4(r3)
    2870:	29ca703a 	and	r5,r5,r7
    2874:	1140022e 	bgeu	r2,r5,2880 <_free_r+0x160>
    2878:	18c00217 	ldw	r3,8(r3)
    287c:	20fffb1e 	bne	r4,r3,286c <_free_r+0x14c>
    2880:	19000317 	ldw	r4,12(r3)
    2884:	31000315 	stw	r4,12(r6)
    2888:	30c00215 	stw	r3,8(r6)
    288c:	21800215 	stw	r6,8(r4)
    2890:	19800315 	stw	r6,12(r3)
    2894:	003fde06 	br	2810 <_free_r+0xf0>
    2898:	29c00217 	ldw	r7,8(r5)
    289c:	10c5883a 	add	r2,r2,r3
    28a0:	00c00074 	movhi	r3,1
    28a4:	18c11e04 	addi	r3,r3,1144
    28a8:	38c03b26 	beq	r7,r3,2998 <_free_r+0x278>
    28ac:	2a000317 	ldw	r8,12(r5)
    28b0:	11400054 	ori	r5,r2,1
    28b4:	3087883a 	add	r3,r6,r2
    28b8:	3a000315 	stw	r8,12(r7)
    28bc:	41c00215 	stw	r7,8(r8)
    28c0:	31400115 	stw	r5,4(r6)
    28c4:	18800015 	stw	r2,0(r3)
    28c8:	003fbd06 	br	27c0 <_free_r+0xa0>
    28cc:	39c0004c 	andi	r7,r7,1
    28d0:	10c5883a 	add	r2,r2,r3
    28d4:	3800071e 	bne	r7,zero,28f4 <_free_r+0x1d4>
    28d8:	81fffe17 	ldw	r7,-8(r16)
    28dc:	31cdc83a 	sub	r6,r6,r7
    28e0:	30c00317 	ldw	r3,12(r6)
    28e4:	31400217 	ldw	r5,8(r6)
    28e8:	11c5883a 	add	r2,r2,r7
    28ec:	28c00315 	stw	r3,12(r5)
    28f0:	19400215 	stw	r5,8(r3)
    28f4:	10c00054 	ori	r3,r2,1
    28f8:	30c00115 	stw	r3,4(r6)
    28fc:	00c00074 	movhi	r3,1
    2900:	18c29604 	addi	r3,r3,2648
    2904:	18c00017 	ldw	r3,0(r3)
    2908:	21800215 	stw	r6,8(r4)
    290c:	10ffc036 	bltu	r2,r3,2810 <_free_r+0xf0>
    2910:	00800074 	movhi	r2,1
    2914:	1082a004 	addi	r2,r2,2688
    2918:	11400017 	ldw	r5,0(r2)
    291c:	8809883a 	mov	r4,r17
    2920:	00025fc0 	call	25fc <_malloc_trim_r>
    2924:	003fba06 	br	2810 <_free_r+0xf0>
    2928:	28c9883a 	add	r4,r5,r3
    292c:	21000117 	ldw	r4,4(r4)
    2930:	2100004c 	andi	r4,r4,1
    2934:	2000391e 	bne	r4,zero,2a1c <_free_r+0x2fc>
    2938:	29c00217 	ldw	r7,8(r5)
    293c:	29000317 	ldw	r4,12(r5)
    2940:	1885883a 	add	r2,r3,r2
    2944:	10c00054 	ori	r3,r2,1
    2948:	39000315 	stw	r4,12(r7)
    294c:	21c00215 	stw	r7,8(r4)
    2950:	30c00115 	stw	r3,4(r6)
    2954:	308d883a 	add	r6,r6,r2
    2958:	30800015 	stw	r2,0(r6)
    295c:	003fac06 	br	2810 <_free_r+0xf0>
    2960:	00c00504 	movi	r3,20
    2964:	19401536 	bltu	r3,r5,29bc <_free_r+0x29c>
    2968:	28c01704 	addi	r3,r5,92
    296c:	18c7883a 	add	r3,r3,r3
    2970:	294016c4 	addi	r5,r5,91
    2974:	003fb406 	br	2848 <_free_r+0x128>
    2978:	280bd0ba 	srai	r5,r5,2
    297c:	00c00044 	movi	r3,1
    2980:	38800117 	ldw	r2,4(r7)
    2984:	194a983a 	sll	r5,r3,r5
    2988:	2007883a 	mov	r3,r4
    298c:	2884b03a 	or	r2,r5,r2
    2990:	38800115 	stw	r2,4(r7)
    2994:	003fbb06 	br	2884 <_free_r+0x164>
    2998:	21800515 	stw	r6,20(r4)
    299c:	21800415 	stw	r6,16(r4)
    29a0:	10c00054 	ori	r3,r2,1
    29a4:	31c00315 	stw	r7,12(r6)
    29a8:	31c00215 	stw	r7,8(r6)
    29ac:	30c00115 	stw	r3,4(r6)
    29b0:	308d883a 	add	r6,r6,r2
    29b4:	30800015 	stw	r2,0(r6)
    29b8:	003f9506 	br	2810 <_free_r+0xf0>
    29bc:	00c01504 	movi	r3,84
    29c0:	19400536 	bltu	r3,r5,29d8 <_free_r+0x2b8>
    29c4:	100ad33a 	srli	r5,r2,12
    29c8:	28c01bc4 	addi	r3,r5,111
    29cc:	18c7883a 	add	r3,r3,r3
    29d0:	29401b84 	addi	r5,r5,110
    29d4:	003f9c06 	br	2848 <_free_r+0x128>
    29d8:	00c05504 	movi	r3,340
    29dc:	19400536 	bltu	r3,r5,29f4 <_free_r+0x2d4>
    29e0:	100ad3fa 	srli	r5,r2,15
    29e4:	28c01e04 	addi	r3,r5,120
    29e8:	18c7883a 	add	r3,r3,r3
    29ec:	29401dc4 	addi	r5,r5,119
    29f0:	003f9506 	br	2848 <_free_r+0x128>
    29f4:	00c15504 	movi	r3,1364
    29f8:	19400536 	bltu	r3,r5,2a10 <_free_r+0x2f0>
    29fc:	100ad4ba 	srli	r5,r2,18
    2a00:	28c01f44 	addi	r3,r5,125
    2a04:	18c7883a 	add	r3,r3,r3
    2a08:	29401f04 	addi	r5,r5,124
    2a0c:	003f8e06 	br	2848 <_free_r+0x128>
    2a10:	00c03f84 	movi	r3,254
    2a14:	01401f84 	movi	r5,126
    2a18:	003f8b06 	br	2848 <_free_r+0x128>
    2a1c:	10c00054 	ori	r3,r2,1
    2a20:	30c00115 	stw	r3,4(r6)
    2a24:	308d883a 	add	r6,r6,r2
    2a28:	30800015 	stw	r2,0(r6)
    2a2c:	003f7806 	br	2810 <_free_r+0xf0>

00002a30 <_lseek_r>:
    2a30:	defffd04 	addi	sp,sp,-12
    2a34:	2805883a 	mov	r2,r5
    2a38:	dc000015 	stw	r16,0(sp)
    2a3c:	04000074 	movhi	r16,1
    2a40:	dc400115 	stw	r17,4(sp)
    2a44:	300b883a 	mov	r5,r6
    2a48:	8402a104 	addi	r16,r16,2692
    2a4c:	2023883a 	mov	r17,r4
    2a50:	380d883a 	mov	r6,r7
    2a54:	1009883a 	mov	r4,r2
    2a58:	dfc00215 	stw	ra,8(sp)
    2a5c:	80000015 	stw	zero,0(r16)
    2a60:	00033540 	call	3354 <lseek>
    2a64:	00ffffc4 	movi	r3,-1
    2a68:	10c00526 	beq	r2,r3,2a80 <_lseek_r+0x50>
    2a6c:	dfc00217 	ldw	ra,8(sp)
    2a70:	dc400117 	ldw	r17,4(sp)
    2a74:	dc000017 	ldw	r16,0(sp)
    2a78:	dec00304 	addi	sp,sp,12
    2a7c:	f800283a 	ret
    2a80:	80c00017 	ldw	r3,0(r16)
    2a84:	183ff926 	beq	r3,zero,2a6c <_lseek_r+0x3c>
    2a88:	88c00015 	stw	r3,0(r17)
    2a8c:	003ff706 	br	2a6c <_lseek_r+0x3c>

00002a90 <__smakebuf_r>:
    2a90:	2880030b 	ldhu	r2,12(r5)
    2a94:	10c0008c 	andi	r3,r2,2
    2a98:	1800411e 	bne	r3,zero,2ba0 <__smakebuf_r+0x110>
    2a9c:	deffec04 	addi	sp,sp,-80
    2aa0:	dc000f15 	stw	r16,60(sp)
    2aa4:	2821883a 	mov	r16,r5
    2aa8:	2940038f 	ldh	r5,14(r5)
    2aac:	dc401015 	stw	r17,64(sp)
    2ab0:	dfc01315 	stw	ra,76(sp)
    2ab4:	dcc01215 	stw	r19,72(sp)
    2ab8:	dc801115 	stw	r18,68(sp)
    2abc:	2023883a 	mov	r17,r4
    2ac0:	28001c16 	blt	r5,zero,2b34 <__smakebuf_r+0xa4>
    2ac4:	d80d883a 	mov	r6,sp
    2ac8:	0002cac0 	call	2cac <_fstat_r>
    2acc:	10001816 	blt	r2,zero,2b30 <__smakebuf_r+0xa0>
    2ad0:	d8800117 	ldw	r2,4(sp)
    2ad4:	00e00014 	movui	r3,32768
    2ad8:	10bc000c 	andi	r2,r2,61440
    2adc:	14c80020 	cmpeqi	r19,r2,8192
    2ae0:	10c03726 	beq	r2,r3,2bc0 <__smakebuf_r+0x130>
    2ae4:	80c0030b 	ldhu	r3,12(r16)
    2ae8:	18c20014 	ori	r3,r3,2048
    2aec:	80c0030d 	sth	r3,12(r16)
    2af0:	00c80004 	movi	r3,8192
    2af4:	10c0521e 	bne	r2,r3,2c40 <__smakebuf_r+0x1b0>
    2af8:	8140038f 	ldh	r5,14(r16)
    2afc:	8809883a 	mov	r4,r17
    2b00:	0002d080 	call	2d08 <_isatty_r>
    2b04:	10004c26 	beq	r2,zero,2c38 <__smakebuf_r+0x1a8>
    2b08:	8080030b 	ldhu	r2,12(r16)
    2b0c:	80c010c4 	addi	r3,r16,67
    2b10:	80c00015 	stw	r3,0(r16)
    2b14:	10800054 	ori	r2,r2,1
    2b18:	8080030d 	sth	r2,12(r16)
    2b1c:	00800044 	movi	r2,1
    2b20:	80c00415 	stw	r3,16(r16)
    2b24:	80800515 	stw	r2,20(r16)
    2b28:	04810004 	movi	r18,1024
    2b2c:	00000706 	br	2b4c <__smakebuf_r+0xbc>
    2b30:	8080030b 	ldhu	r2,12(r16)
    2b34:	10c0200c 	andi	r3,r2,128
    2b38:	18001f1e 	bne	r3,zero,2bb8 <__smakebuf_r+0x128>
    2b3c:	04810004 	movi	r18,1024
    2b40:	10820014 	ori	r2,r2,2048
    2b44:	8080030d 	sth	r2,12(r16)
    2b48:	0027883a 	mov	r19,zero
    2b4c:	900b883a 	mov	r5,r18
    2b50:	8809883a 	mov	r4,r17
    2b54:	0000c980 	call	c98 <_malloc_r>
    2b58:	10002c26 	beq	r2,zero,2c0c <__smakebuf_r+0x17c>
    2b5c:	80c0030b 	ldhu	r3,12(r16)
    2b60:	01000034 	movhi	r4,0
    2b64:	2100a804 	addi	r4,r4,672
    2b68:	89000f15 	stw	r4,60(r17)
    2b6c:	18c02014 	ori	r3,r3,128
    2b70:	80c0030d 	sth	r3,12(r16)
    2b74:	80800015 	stw	r2,0(r16)
    2b78:	80800415 	stw	r2,16(r16)
    2b7c:	84800515 	stw	r18,20(r16)
    2b80:	98001a1e 	bne	r19,zero,2bec <__smakebuf_r+0x15c>
    2b84:	dfc01317 	ldw	ra,76(sp)
    2b88:	dcc01217 	ldw	r19,72(sp)
    2b8c:	dc801117 	ldw	r18,68(sp)
    2b90:	dc401017 	ldw	r17,64(sp)
    2b94:	dc000f17 	ldw	r16,60(sp)
    2b98:	dec01404 	addi	sp,sp,80
    2b9c:	f800283a 	ret
    2ba0:	288010c4 	addi	r2,r5,67
    2ba4:	28800015 	stw	r2,0(r5)
    2ba8:	28800415 	stw	r2,16(r5)
    2bac:	00800044 	movi	r2,1
    2bb0:	28800515 	stw	r2,20(r5)
    2bb4:	f800283a 	ret
    2bb8:	04801004 	movi	r18,64
    2bbc:	003fe006 	br	2b40 <__smakebuf_r+0xb0>
    2bc0:	81000a17 	ldw	r4,40(r16)
    2bc4:	00c00034 	movhi	r3,0
    2bc8:	18c7f904 	addi	r3,r3,8164
    2bcc:	20ffc51e 	bne	r4,r3,2ae4 <__smakebuf_r+0x54>
    2bd0:	8080030b 	ldhu	r2,12(r16)
    2bd4:	04810004 	movi	r18,1024
    2bd8:	84801315 	stw	r18,76(r16)
    2bdc:	1484b03a 	or	r2,r2,r18
    2be0:	8080030d 	sth	r2,12(r16)
    2be4:	0027883a 	mov	r19,zero
    2be8:	003fd806 	br	2b4c <__smakebuf_r+0xbc>
    2bec:	8140038f 	ldh	r5,14(r16)
    2bf0:	8809883a 	mov	r4,r17
    2bf4:	0002d080 	call	2d08 <_isatty_r>
    2bf8:	103fe226 	beq	r2,zero,2b84 <__smakebuf_r+0xf4>
    2bfc:	8080030b 	ldhu	r2,12(r16)
    2c00:	10800054 	ori	r2,r2,1
    2c04:	8080030d 	sth	r2,12(r16)
    2c08:	003fde06 	br	2b84 <__smakebuf_r+0xf4>
    2c0c:	8080030b 	ldhu	r2,12(r16)
    2c10:	10c0800c 	andi	r3,r2,512
    2c14:	183fdb1e 	bne	r3,zero,2b84 <__smakebuf_r+0xf4>
    2c18:	10800094 	ori	r2,r2,2
    2c1c:	80c010c4 	addi	r3,r16,67
    2c20:	8080030d 	sth	r2,12(r16)
    2c24:	00800044 	movi	r2,1
    2c28:	80c00015 	stw	r3,0(r16)
    2c2c:	80c00415 	stw	r3,16(r16)
    2c30:	80800515 	stw	r2,20(r16)
    2c34:	003fd306 	br	2b84 <__smakebuf_r+0xf4>
    2c38:	04810004 	movi	r18,1024
    2c3c:	003fc306 	br	2b4c <__smakebuf_r+0xbc>
    2c40:	0027883a 	mov	r19,zero
    2c44:	04810004 	movi	r18,1024
    2c48:	003fc006 	br	2b4c <__smakebuf_r+0xbc>

00002c4c <_read_r>:
    2c4c:	defffd04 	addi	sp,sp,-12
    2c50:	2805883a 	mov	r2,r5
    2c54:	dc000015 	stw	r16,0(sp)
    2c58:	04000074 	movhi	r16,1
    2c5c:	dc400115 	stw	r17,4(sp)
    2c60:	300b883a 	mov	r5,r6
    2c64:	8402a104 	addi	r16,r16,2692
    2c68:	2023883a 	mov	r17,r4
    2c6c:	380d883a 	mov	r6,r7
    2c70:	1009883a 	mov	r4,r2
    2c74:	dfc00215 	stw	ra,8(sp)
    2c78:	80000015 	stw	zero,0(r16)
    2c7c:	00035300 	call	3530 <read>
    2c80:	00ffffc4 	movi	r3,-1
    2c84:	10c00526 	beq	r2,r3,2c9c <_read_r+0x50>
    2c88:	dfc00217 	ldw	ra,8(sp)
    2c8c:	dc400117 	ldw	r17,4(sp)
    2c90:	dc000017 	ldw	r16,0(sp)
    2c94:	dec00304 	addi	sp,sp,12
    2c98:	f800283a 	ret
    2c9c:	80c00017 	ldw	r3,0(r16)
    2ca0:	183ff926 	beq	r3,zero,2c88 <_read_r+0x3c>
    2ca4:	88c00015 	stw	r3,0(r17)
    2ca8:	003ff706 	br	2c88 <_read_r+0x3c>

00002cac <_fstat_r>:
    2cac:	defffd04 	addi	sp,sp,-12
    2cb0:	2805883a 	mov	r2,r5
    2cb4:	dc000015 	stw	r16,0(sp)
    2cb8:	04000074 	movhi	r16,1
    2cbc:	dc400115 	stw	r17,4(sp)
    2cc0:	8402a104 	addi	r16,r16,2692
    2cc4:	2023883a 	mov	r17,r4
    2cc8:	300b883a 	mov	r5,r6
    2ccc:	1009883a 	mov	r4,r2
    2cd0:	dfc00215 	stw	ra,8(sp)
    2cd4:	80000015 	stw	zero,0(r16)
    2cd8:	000308c0 	call	308c <fstat>
    2cdc:	00ffffc4 	movi	r3,-1
    2ce0:	10c00526 	beq	r2,r3,2cf8 <_fstat_r+0x4c>
    2ce4:	dfc00217 	ldw	ra,8(sp)
    2ce8:	dc400117 	ldw	r17,4(sp)
    2cec:	dc000017 	ldw	r16,0(sp)
    2cf0:	dec00304 	addi	sp,sp,12
    2cf4:	f800283a 	ret
    2cf8:	80c00017 	ldw	r3,0(r16)
    2cfc:	183ff926 	beq	r3,zero,2ce4 <_fstat_r+0x38>
    2d00:	88c00015 	stw	r3,0(r17)
    2d04:	003ff706 	br	2ce4 <_fstat_r+0x38>

00002d08 <_isatty_r>:
    2d08:	defffd04 	addi	sp,sp,-12
    2d0c:	dc000015 	stw	r16,0(sp)
    2d10:	04000074 	movhi	r16,1
    2d14:	dc400115 	stw	r17,4(sp)
    2d18:	8402a104 	addi	r16,r16,2692
    2d1c:	2023883a 	mov	r17,r4
    2d20:	2809883a 	mov	r4,r5
    2d24:	dfc00215 	stw	ra,8(sp)
    2d28:	80000015 	stw	zero,0(r16)
    2d2c:	00031800 	call	3180 <isatty>
    2d30:	00ffffc4 	movi	r3,-1
    2d34:	10c00526 	beq	r2,r3,2d4c <_isatty_r+0x44>
    2d38:	dfc00217 	ldw	ra,8(sp)
    2d3c:	dc400117 	ldw	r17,4(sp)
    2d40:	dc000017 	ldw	r16,0(sp)
    2d44:	dec00304 	addi	sp,sp,12
    2d48:	f800283a 	ret
    2d4c:	80c00017 	ldw	r3,0(r16)
    2d50:	183ff926 	beq	r3,zero,2d38 <_isatty_r+0x30>
    2d54:	88c00015 	stw	r3,0(r17)
    2d58:	003ff706 	br	2d38 <_isatty_r+0x30>

00002d5c <__divsi3>:
    2d5c:	20001b16 	blt	r4,zero,2dcc <__divsi3+0x70>
    2d60:	000f883a 	mov	r7,zero
    2d64:	28001616 	blt	r5,zero,2dc0 <__divsi3+0x64>
    2d68:	200d883a 	mov	r6,r4
    2d6c:	29001a2e 	bgeu	r5,r4,2dd8 <__divsi3+0x7c>
    2d70:	00800804 	movi	r2,32
    2d74:	00c00044 	movi	r3,1
    2d78:	00000106 	br	2d80 <__divsi3+0x24>
    2d7c:	10000d26 	beq	r2,zero,2db4 <__divsi3+0x58>
    2d80:	294b883a 	add	r5,r5,r5
    2d84:	10bfffc4 	addi	r2,r2,-1
    2d88:	18c7883a 	add	r3,r3,r3
    2d8c:	293ffb36 	bltu	r5,r4,2d7c <__divsi3+0x20>
    2d90:	0005883a 	mov	r2,zero
    2d94:	18000726 	beq	r3,zero,2db4 <__divsi3+0x58>
    2d98:	0005883a 	mov	r2,zero
    2d9c:	31400236 	bltu	r6,r5,2da8 <__divsi3+0x4c>
    2da0:	314dc83a 	sub	r6,r6,r5
    2da4:	10c4b03a 	or	r2,r2,r3
    2da8:	1806d07a 	srli	r3,r3,1
    2dac:	280ad07a 	srli	r5,r5,1
    2db0:	183ffa1e 	bne	r3,zero,2d9c <__divsi3+0x40>
    2db4:	38000126 	beq	r7,zero,2dbc <__divsi3+0x60>
    2db8:	0085c83a 	sub	r2,zero,r2
    2dbc:	f800283a 	ret
    2dc0:	014bc83a 	sub	r5,zero,r5
    2dc4:	39c0005c 	xori	r7,r7,1
    2dc8:	003fe706 	br	2d68 <__divsi3+0xc>
    2dcc:	0109c83a 	sub	r4,zero,r4
    2dd0:	01c00044 	movi	r7,1
    2dd4:	003fe306 	br	2d64 <__divsi3+0x8>
    2dd8:	00c00044 	movi	r3,1
    2ddc:	003fee06 	br	2d98 <__divsi3+0x3c>

00002de0 <__modsi3>:
    2de0:	20001716 	blt	r4,zero,2e40 <__modsi3+0x60>
    2de4:	000f883a 	mov	r7,zero
    2de8:	2005883a 	mov	r2,r4
    2dec:	28001216 	blt	r5,zero,2e38 <__modsi3+0x58>
    2df0:	2900162e 	bgeu	r5,r4,2e4c <__modsi3+0x6c>
    2df4:	01800804 	movi	r6,32
    2df8:	00c00044 	movi	r3,1
    2dfc:	00000106 	br	2e04 <__modsi3+0x24>
    2e00:	30000a26 	beq	r6,zero,2e2c <__modsi3+0x4c>
    2e04:	294b883a 	add	r5,r5,r5
    2e08:	31bfffc4 	addi	r6,r6,-1
    2e0c:	18c7883a 	add	r3,r3,r3
    2e10:	293ffb36 	bltu	r5,r4,2e00 <__modsi3+0x20>
    2e14:	18000526 	beq	r3,zero,2e2c <__modsi3+0x4c>
    2e18:	1806d07a 	srli	r3,r3,1
    2e1c:	11400136 	bltu	r2,r5,2e24 <__modsi3+0x44>
    2e20:	1145c83a 	sub	r2,r2,r5
    2e24:	280ad07a 	srli	r5,r5,1
    2e28:	183ffb1e 	bne	r3,zero,2e18 <__modsi3+0x38>
    2e2c:	38000126 	beq	r7,zero,2e34 <__modsi3+0x54>
    2e30:	0085c83a 	sub	r2,zero,r2
    2e34:	f800283a 	ret
    2e38:	014bc83a 	sub	r5,zero,r5
    2e3c:	003fec06 	br	2df0 <__modsi3+0x10>
    2e40:	0109c83a 	sub	r4,zero,r4
    2e44:	01c00044 	movi	r7,1
    2e48:	003fe706 	br	2de8 <__modsi3+0x8>
    2e4c:	00c00044 	movi	r3,1
    2e50:	003ff106 	br	2e18 <__modsi3+0x38>

00002e54 <__udivsi3>:
    2e54:	200d883a 	mov	r6,r4
    2e58:	2900152e 	bgeu	r5,r4,2eb0 <__udivsi3+0x5c>
    2e5c:	28001416 	blt	r5,zero,2eb0 <__udivsi3+0x5c>
    2e60:	00800804 	movi	r2,32
    2e64:	00c00044 	movi	r3,1
    2e68:	00000206 	br	2e74 <__udivsi3+0x20>
    2e6c:	10000e26 	beq	r2,zero,2ea8 <__udivsi3+0x54>
    2e70:	28000516 	blt	r5,zero,2e88 <__udivsi3+0x34>
    2e74:	294b883a 	add	r5,r5,r5
    2e78:	10bfffc4 	addi	r2,r2,-1
    2e7c:	18c7883a 	add	r3,r3,r3
    2e80:	293ffa36 	bltu	r5,r4,2e6c <__udivsi3+0x18>
    2e84:	18000826 	beq	r3,zero,2ea8 <__udivsi3+0x54>
    2e88:	0005883a 	mov	r2,zero
    2e8c:	31400236 	bltu	r6,r5,2e98 <__udivsi3+0x44>
    2e90:	314dc83a 	sub	r6,r6,r5
    2e94:	10c4b03a 	or	r2,r2,r3
    2e98:	1806d07a 	srli	r3,r3,1
    2e9c:	280ad07a 	srli	r5,r5,1
    2ea0:	183ffa1e 	bne	r3,zero,2e8c <__udivsi3+0x38>
    2ea4:	f800283a 	ret
    2ea8:	0005883a 	mov	r2,zero
    2eac:	f800283a 	ret
    2eb0:	00c00044 	movi	r3,1
    2eb4:	003ff406 	br	2e88 <__udivsi3+0x34>

00002eb8 <__umodsi3>:
    2eb8:	2005883a 	mov	r2,r4
    2ebc:	2900122e 	bgeu	r5,r4,2f08 <__umodsi3+0x50>
    2ec0:	28001116 	blt	r5,zero,2f08 <__umodsi3+0x50>
    2ec4:	01800804 	movi	r6,32
    2ec8:	00c00044 	movi	r3,1
    2ecc:	00000206 	br	2ed8 <__umodsi3+0x20>
    2ed0:	30000c26 	beq	r6,zero,2f04 <__umodsi3+0x4c>
    2ed4:	28000516 	blt	r5,zero,2eec <__umodsi3+0x34>
    2ed8:	294b883a 	add	r5,r5,r5
    2edc:	31bfffc4 	addi	r6,r6,-1
    2ee0:	18c7883a 	add	r3,r3,r3
    2ee4:	293ffa36 	bltu	r5,r4,2ed0 <__umodsi3+0x18>
    2ee8:	18000626 	beq	r3,zero,2f04 <__umodsi3+0x4c>
    2eec:	1806d07a 	srli	r3,r3,1
    2ef0:	11400136 	bltu	r2,r5,2ef8 <__umodsi3+0x40>
    2ef4:	1145c83a 	sub	r2,r2,r5
    2ef8:	280ad07a 	srli	r5,r5,1
    2efc:	183ffb1e 	bne	r3,zero,2eec <__umodsi3+0x34>
    2f00:	f800283a 	ret
    2f04:	f800283a 	ret
    2f08:	00c00044 	movi	r3,1
    2f0c:	003ff706 	br	2eec <__umodsi3+0x34>

00002f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f10:	defffe04 	addi	sp,sp,-8
    2f14:	dfc00115 	stw	ra,4(sp)
    2f18:	df000015 	stw	fp,0(sp)
    2f1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2f20:	d0a00917 	ldw	r2,-32732(gp)
    2f24:	10000326 	beq	r2,zero,2f34 <alt_get_errno+0x24>
    2f28:	d0a00917 	ldw	r2,-32732(gp)
    2f2c:	103ee83a 	callr	r2
    2f30:	00000106 	br	2f38 <alt_get_errno+0x28>
    2f34:	d0a00e04 	addi	r2,gp,-32712
}
    2f38:	e037883a 	mov	sp,fp
    2f3c:	dfc00117 	ldw	ra,4(sp)
    2f40:	df000017 	ldw	fp,0(sp)
    2f44:	dec00204 	addi	sp,sp,8
    2f48:	f800283a 	ret

00002f4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2f4c:	defffb04 	addi	sp,sp,-20
    2f50:	dfc00415 	stw	ra,16(sp)
    2f54:	df000315 	stw	fp,12(sp)
    2f58:	df000304 	addi	fp,sp,12
    2f5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2f60:	e0bfff17 	ldw	r2,-4(fp)
    2f64:	10000816 	blt	r2,zero,2f88 <close+0x3c>
    2f68:	01400304 	movi	r5,12
    2f6c:	e13fff17 	ldw	r4,-4(fp)
    2f70:	00001040 	call	104 <__mulsi3>
    2f74:	1007883a 	mov	r3,r2
    2f78:	00800074 	movhi	r2,1
    2f7c:	10822804 	addi	r2,r2,2208
    2f80:	1885883a 	add	r2,r3,r2
    2f84:	00000106 	br	2f8c <close+0x40>
    2f88:	0005883a 	mov	r2,zero
    2f8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2f90:	e0bffd17 	ldw	r2,-12(fp)
    2f94:	10001926 	beq	r2,zero,2ffc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2f98:	e0bffd17 	ldw	r2,-12(fp)
    2f9c:	10800017 	ldw	r2,0(r2)
    2fa0:	10800417 	ldw	r2,16(r2)
    2fa4:	10000626 	beq	r2,zero,2fc0 <close+0x74>
    2fa8:	e0bffd17 	ldw	r2,-12(fp)
    2fac:	10800017 	ldw	r2,0(r2)
    2fb0:	10800417 	ldw	r2,16(r2)
    2fb4:	e13ffd17 	ldw	r4,-12(fp)
    2fb8:	103ee83a 	callr	r2
    2fbc:	00000106 	br	2fc4 <close+0x78>
    2fc0:	0005883a 	mov	r2,zero
    2fc4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2fc8:	e13fff17 	ldw	r4,-4(fp)
    2fcc:	00036340 	call	3634 <alt_release_fd>
    if (rval < 0)
    2fd0:	e0bffe17 	ldw	r2,-8(fp)
    2fd4:	1000070e 	bge	r2,zero,2ff4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    2fd8:	0002f100 	call	2f10 <alt_get_errno>
    2fdc:	1007883a 	mov	r3,r2
    2fe0:	e0bffe17 	ldw	r2,-8(fp)
    2fe4:	0085c83a 	sub	r2,zero,r2
    2fe8:	18800015 	stw	r2,0(r3)
      return -1;
    2fec:	00bfffc4 	movi	r2,-1
    2ff0:	00000706 	br	3010 <close+0xc4>
    }
    return 0;
    2ff4:	0005883a 	mov	r2,zero
    2ff8:	00000506 	br	3010 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2ffc:	0002f100 	call	2f10 <alt_get_errno>
    3000:	1007883a 	mov	r3,r2
    3004:	00801444 	movi	r2,81
    3008:	18800015 	stw	r2,0(r3)
    return -1;
    300c:	00bfffc4 	movi	r2,-1
  }
}
    3010:	e037883a 	mov	sp,fp
    3014:	dfc00117 	ldw	ra,4(sp)
    3018:	df000017 	ldw	fp,0(sp)
    301c:	dec00204 	addi	sp,sp,8
    3020:	f800283a 	ret

00003024 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    3024:	defffc04 	addi	sp,sp,-16
    3028:	df000315 	stw	fp,12(sp)
    302c:	df000304 	addi	fp,sp,12
    3030:	e13ffd15 	stw	r4,-12(fp)
    3034:	e17ffe15 	stw	r5,-8(fp)
    3038:	e1bfff15 	stw	r6,-4(fp)
  return len;
    303c:	e0bfff17 	ldw	r2,-4(fp)
}
    3040:	e037883a 	mov	sp,fp
    3044:	df000017 	ldw	fp,0(sp)
    3048:	dec00104 	addi	sp,sp,4
    304c:	f800283a 	ret

00003050 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3050:	defffe04 	addi	sp,sp,-8
    3054:	dfc00115 	stw	ra,4(sp)
    3058:	df000015 	stw	fp,0(sp)
    305c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3060:	d0a00917 	ldw	r2,-32732(gp)
    3064:	10000326 	beq	r2,zero,3074 <alt_get_errno+0x24>
    3068:	d0a00917 	ldw	r2,-32732(gp)
    306c:	103ee83a 	callr	r2
    3070:	00000106 	br	3078 <alt_get_errno+0x28>
    3074:	d0a00e04 	addi	r2,gp,-32712
}
    3078:	e037883a 	mov	sp,fp
    307c:	dfc00117 	ldw	ra,4(sp)
    3080:	df000017 	ldw	fp,0(sp)
    3084:	dec00204 	addi	sp,sp,8
    3088:	f800283a 	ret

0000308c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    308c:	defffb04 	addi	sp,sp,-20
    3090:	dfc00415 	stw	ra,16(sp)
    3094:	df000315 	stw	fp,12(sp)
    3098:	df000304 	addi	fp,sp,12
    309c:	e13ffe15 	stw	r4,-8(fp)
    30a0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    30a4:	e0bffe17 	ldw	r2,-8(fp)
    30a8:	10000816 	blt	r2,zero,30cc <fstat+0x40>
    30ac:	01400304 	movi	r5,12
    30b0:	e13ffe17 	ldw	r4,-8(fp)
    30b4:	00001040 	call	104 <__mulsi3>
    30b8:	1007883a 	mov	r3,r2
    30bc:	00800074 	movhi	r2,1
    30c0:	10822804 	addi	r2,r2,2208
    30c4:	1885883a 	add	r2,r3,r2
    30c8:	00000106 	br	30d0 <fstat+0x44>
    30cc:	0005883a 	mov	r2,zero
    30d0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    30d4:	e0bffd17 	ldw	r2,-12(fp)
    30d8:	10001026 	beq	r2,zero,311c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    30dc:	e0bffd17 	ldw	r2,-12(fp)
    30e0:	10800017 	ldw	r2,0(r2)
    30e4:	10800817 	ldw	r2,32(r2)
    30e8:	10000726 	beq	r2,zero,3108 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    30ec:	e0bffd17 	ldw	r2,-12(fp)
    30f0:	10800017 	ldw	r2,0(r2)
    30f4:	10800817 	ldw	r2,32(r2)
    30f8:	e17fff17 	ldw	r5,-4(fp)
    30fc:	e13ffd17 	ldw	r4,-12(fp)
    3100:	103ee83a 	callr	r2
    3104:	00000a06 	br	3130 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    3108:	e0bfff17 	ldw	r2,-4(fp)
    310c:	00c80004 	movi	r3,8192
    3110:	10c00115 	stw	r3,4(r2)
      return 0;
    3114:	0005883a 	mov	r2,zero
    3118:	00000506 	br	3130 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    311c:	00030500 	call	3050 <alt_get_errno>
    3120:	1007883a 	mov	r3,r2
    3124:	00801444 	movi	r2,81
    3128:	18800015 	stw	r2,0(r3)
    return -1;
    312c:	00bfffc4 	movi	r2,-1
  }
}
    3130:	e037883a 	mov	sp,fp
    3134:	dfc00117 	ldw	ra,4(sp)
    3138:	df000017 	ldw	fp,0(sp)
    313c:	dec00204 	addi	sp,sp,8
    3140:	f800283a 	ret

00003144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3144:	defffe04 	addi	sp,sp,-8
    3148:	dfc00115 	stw	ra,4(sp)
    314c:	df000015 	stw	fp,0(sp)
    3150:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3154:	d0a00917 	ldw	r2,-32732(gp)
    3158:	10000326 	beq	r2,zero,3168 <alt_get_errno+0x24>
    315c:	d0a00917 	ldw	r2,-32732(gp)
    3160:	103ee83a 	callr	r2
    3164:	00000106 	br	316c <alt_get_errno+0x28>
    3168:	d0a00e04 	addi	r2,gp,-32712
}
    316c:	e037883a 	mov	sp,fp
    3170:	dfc00117 	ldw	ra,4(sp)
    3174:	df000017 	ldw	fp,0(sp)
    3178:	dec00204 	addi	sp,sp,8
    317c:	f800283a 	ret

00003180 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    3180:	deffed04 	addi	sp,sp,-76
    3184:	dfc01215 	stw	ra,72(sp)
    3188:	df001115 	stw	fp,68(sp)
    318c:	df001104 	addi	fp,sp,68
    3190:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3194:	e0bfff17 	ldw	r2,-4(fp)
    3198:	10000816 	blt	r2,zero,31bc <isatty+0x3c>
    319c:	01400304 	movi	r5,12
    31a0:	e13fff17 	ldw	r4,-4(fp)
    31a4:	00001040 	call	104 <__mulsi3>
    31a8:	1007883a 	mov	r3,r2
    31ac:	00800074 	movhi	r2,1
    31b0:	10822804 	addi	r2,r2,2208
    31b4:	1885883a 	add	r2,r3,r2
    31b8:	00000106 	br	31c0 <isatty+0x40>
    31bc:	0005883a 	mov	r2,zero
    31c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    31c4:	e0bfef17 	ldw	r2,-68(fp)
    31c8:	10000e26 	beq	r2,zero,3204 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    31cc:	e0bfef17 	ldw	r2,-68(fp)
    31d0:	10800017 	ldw	r2,0(r2)
    31d4:	10800817 	ldw	r2,32(r2)
    31d8:	1000021e 	bne	r2,zero,31e4 <isatty+0x64>
    {
      return 1;
    31dc:	00800044 	movi	r2,1
    31e0:	00000d06 	br	3218 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    31e4:	e0bff004 	addi	r2,fp,-64
    31e8:	100b883a 	mov	r5,r2
    31ec:	e13fff17 	ldw	r4,-4(fp)
    31f0:	000308c0 	call	308c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    31f4:	e0bff117 	ldw	r2,-60(fp)
    31f8:	10880020 	cmpeqi	r2,r2,8192
    31fc:	10803fcc 	andi	r2,r2,255
    3200:	00000506 	br	3218 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    3204:	00031440 	call	3144 <alt_get_errno>
    3208:	1007883a 	mov	r3,r2
    320c:	00801444 	movi	r2,81
    3210:	18800015 	stw	r2,0(r3)
    return 0;
    3214:	0005883a 	mov	r2,zero
  }
}
    3218:	e037883a 	mov	sp,fp
    321c:	dfc00117 	ldw	ra,4(sp)
    3220:	df000017 	ldw	fp,0(sp)
    3224:	dec00204 	addi	sp,sp,8
    3228:	f800283a 	ret

0000322c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    322c:	defffc04 	addi	sp,sp,-16
    3230:	df000315 	stw	fp,12(sp)
    3234:	df000304 	addi	fp,sp,12
    3238:	e13ffd15 	stw	r4,-12(fp)
    323c:	e17ffe15 	stw	r5,-8(fp)
    3240:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3244:	e0fffe17 	ldw	r3,-8(fp)
    3248:	e0bffd17 	ldw	r2,-12(fp)
    324c:	18800c26 	beq	r3,r2,3280 <alt_load_section+0x54>
  {
    while( to != end )
    3250:	00000806 	br	3274 <alt_load_section+0x48>
    {
      *to++ = *from++;
    3254:	e0bffe17 	ldw	r2,-8(fp)
    3258:	10c00104 	addi	r3,r2,4
    325c:	e0fffe15 	stw	r3,-8(fp)
    3260:	e0fffd17 	ldw	r3,-12(fp)
    3264:	19000104 	addi	r4,r3,4
    3268:	e13ffd15 	stw	r4,-12(fp)
    326c:	18c00017 	ldw	r3,0(r3)
    3270:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3274:	e0fffe17 	ldw	r3,-8(fp)
    3278:	e0bfff17 	ldw	r2,-4(fp)
    327c:	18bff51e 	bne	r3,r2,3254 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3280:	0001883a 	nop
    3284:	e037883a 	mov	sp,fp
    3288:	df000017 	ldw	fp,0(sp)
    328c:	dec00104 	addi	sp,sp,4
    3290:	f800283a 	ret

00003294 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    3294:	defffe04 	addi	sp,sp,-8
    3298:	dfc00115 	stw	ra,4(sp)
    329c:	df000015 	stw	fp,0(sp)
    32a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    32a4:	01800074 	movhi	r6,1
    32a8:	31829e04 	addi	r6,r6,2680
    32ac:	01400074 	movhi	r5,1
    32b0:	29401304 	addi	r5,r5,76
    32b4:	01000034 	movhi	r4,0
    32b8:	21123904 	addi	r4,r4,18660
    32bc:	000322c0 	call	322c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    32c0:	01800034 	movhi	r6,0
    32c4:	31800804 	addi	r6,r6,32
    32c8:	01400034 	movhi	r5,0
    32cc:	29400804 	addi	r5,r5,32
    32d0:	01000034 	movhi	r4,0
    32d4:	21000804 	addi	r4,r4,32
    32d8:	000322c0 	call	322c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    32dc:	01800074 	movhi	r6,1
    32e0:	31801304 	addi	r6,r6,76
    32e4:	01400074 	movhi	r5,1
    32e8:	29400004 	addi	r5,r5,0
    32ec:	01000074 	movhi	r4,1
    32f0:	21000004 	addi	r4,r4,0
    32f4:	000322c0 	call	322c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    32f8:	0003d0c0 	call	3d0c <alt_dcache_flush_all>
  alt_icache_flush_all();
    32fc:	0003ecc0 	call	3ecc <alt_icache_flush_all>
}
    3300:	0001883a 	nop
    3304:	e037883a 	mov	sp,fp
    3308:	dfc00117 	ldw	ra,4(sp)
    330c:	df000017 	ldw	fp,0(sp)
    3310:	dec00204 	addi	sp,sp,8
    3314:	f800283a 	ret

00003318 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3318:	defffe04 	addi	sp,sp,-8
    331c:	dfc00115 	stw	ra,4(sp)
    3320:	df000015 	stw	fp,0(sp)
    3324:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3328:	d0a00917 	ldw	r2,-32732(gp)
    332c:	10000326 	beq	r2,zero,333c <alt_get_errno+0x24>
    3330:	d0a00917 	ldw	r2,-32732(gp)
    3334:	103ee83a 	callr	r2
    3338:	00000106 	br	3340 <alt_get_errno+0x28>
    333c:	d0a00e04 	addi	r2,gp,-32712
}
    3340:	e037883a 	mov	sp,fp
    3344:	dfc00117 	ldw	ra,4(sp)
    3348:	df000017 	ldw	fp,0(sp)
    334c:	dec00204 	addi	sp,sp,8
    3350:	f800283a 	ret

00003354 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3354:	defff904 	addi	sp,sp,-28
    3358:	dfc00615 	stw	ra,24(sp)
    335c:	df000515 	stw	fp,20(sp)
    3360:	df000504 	addi	fp,sp,20
    3364:	e13ffd15 	stw	r4,-12(fp)
    3368:	e17ffe15 	stw	r5,-8(fp)
    336c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3370:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3374:	e0bffd17 	ldw	r2,-12(fp)
    3378:	10000816 	blt	r2,zero,339c <lseek+0x48>
    337c:	01400304 	movi	r5,12
    3380:	e13ffd17 	ldw	r4,-12(fp)
    3384:	00001040 	call	104 <__mulsi3>
    3388:	1007883a 	mov	r3,r2
    338c:	00800074 	movhi	r2,1
    3390:	10822804 	addi	r2,r2,2208
    3394:	1885883a 	add	r2,r3,r2
    3398:	00000106 	br	33a0 <lseek+0x4c>
    339c:	0005883a 	mov	r2,zero
    33a0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    33a4:	e0bffc17 	ldw	r2,-16(fp)
    33a8:	10001026 	beq	r2,zero,33ec <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    33ac:	e0bffc17 	ldw	r2,-16(fp)
    33b0:	10800017 	ldw	r2,0(r2)
    33b4:	10800717 	ldw	r2,28(r2)
    33b8:	10000926 	beq	r2,zero,33e0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    33bc:	e0bffc17 	ldw	r2,-16(fp)
    33c0:	10800017 	ldw	r2,0(r2)
    33c4:	10800717 	ldw	r2,28(r2)
    33c8:	e1bfff17 	ldw	r6,-4(fp)
    33cc:	e17ffe17 	ldw	r5,-8(fp)
    33d0:	e13ffc17 	ldw	r4,-16(fp)
    33d4:	103ee83a 	callr	r2
    33d8:	e0bffb15 	stw	r2,-20(fp)
    33dc:	00000506 	br	33f4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    33e0:	00bfde84 	movi	r2,-134
    33e4:	e0bffb15 	stw	r2,-20(fp)
    33e8:	00000206 	br	33f4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    33ec:	00bfebc4 	movi	r2,-81
    33f0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    33f4:	e0bffb17 	ldw	r2,-20(fp)
    33f8:	1000070e 	bge	r2,zero,3418 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    33fc:	00033180 	call	3318 <alt_get_errno>
    3400:	1007883a 	mov	r3,r2
    3404:	e0bffb17 	ldw	r2,-20(fp)
    3408:	0085c83a 	sub	r2,zero,r2
    340c:	18800015 	stw	r2,0(r3)
    rc = -1;
    3410:	00bfffc4 	movi	r2,-1
    3414:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    3418:	e0bffb17 	ldw	r2,-20(fp)
}
    341c:	e037883a 	mov	sp,fp
    3420:	dfc00117 	ldw	ra,4(sp)
    3424:	df000017 	ldw	fp,0(sp)
    3428:	dec00204 	addi	sp,sp,8
    342c:	f800283a 	ret

00003430 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    3430:	defffd04 	addi	sp,sp,-12
    3434:	dfc00215 	stw	ra,8(sp)
    3438:	df000115 	stw	fp,4(sp)
    343c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    3440:	0009883a 	mov	r4,zero
    3444:	00039080 	call	3908 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    3448:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    344c:	00039400 	call	3940 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    3450:	01800074 	movhi	r6,1
    3454:	31800904 	addi	r6,r6,36
    3458:	01400074 	movhi	r5,1
    345c:	29400904 	addi	r5,r5,36
    3460:	01000074 	movhi	r4,1
    3464:	21000904 	addi	r4,r4,36
    3468:	0003fd00 	call	3fd0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    346c:	0003e0c0 	call	3e0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3470:	01000034 	movhi	r4,0
    3474:	210f9b04 	addi	r4,r4,15980
    3478:	00045500 	call	4550 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    347c:	d0a00f17 	ldw	r2,-32708(gp)
    3480:	d0e01017 	ldw	r3,-32704(gp)
    3484:	d1201117 	ldw	r4,-32700(gp)
    3488:	200d883a 	mov	r6,r4
    348c:	180b883a 	mov	r5,r3
    3490:	1009883a 	mov	r4,r2
    3494:	000005c0 	call	5c <main>
    3498:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    349c:	01000044 	movi	r4,1
    34a0:	0002f4c0 	call	2f4c <close>
  exit (result);
    34a4:	e13fff17 	ldw	r4,-4(fp)
    34a8:	00045640 	call	4564 <exit>

000034ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    34ac:	defffe04 	addi	sp,sp,-8
    34b0:	df000115 	stw	fp,4(sp)
    34b4:	df000104 	addi	fp,sp,4
    34b8:	e13fff15 	stw	r4,-4(fp)
}
    34bc:	0001883a 	nop
    34c0:	e037883a 	mov	sp,fp
    34c4:	df000017 	ldw	fp,0(sp)
    34c8:	dec00104 	addi	sp,sp,4
    34cc:	f800283a 	ret

000034d0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    34d0:	defffe04 	addi	sp,sp,-8
    34d4:	df000115 	stw	fp,4(sp)
    34d8:	df000104 	addi	fp,sp,4
    34dc:	e13fff15 	stw	r4,-4(fp)
}
    34e0:	0001883a 	nop
    34e4:	e037883a 	mov	sp,fp
    34e8:	df000017 	ldw	fp,0(sp)
    34ec:	dec00104 	addi	sp,sp,4
    34f0:	f800283a 	ret

000034f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    34f4:	defffe04 	addi	sp,sp,-8
    34f8:	dfc00115 	stw	ra,4(sp)
    34fc:	df000015 	stw	fp,0(sp)
    3500:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3504:	d0a00917 	ldw	r2,-32732(gp)
    3508:	10000326 	beq	r2,zero,3518 <alt_get_errno+0x24>
    350c:	d0a00917 	ldw	r2,-32732(gp)
    3510:	103ee83a 	callr	r2
    3514:	00000106 	br	351c <alt_get_errno+0x28>
    3518:	d0a00e04 	addi	r2,gp,-32712
}
    351c:	e037883a 	mov	sp,fp
    3520:	dfc00117 	ldw	ra,4(sp)
    3524:	df000017 	ldw	fp,0(sp)
    3528:	dec00204 	addi	sp,sp,8
    352c:	f800283a 	ret

00003530 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3530:	defff904 	addi	sp,sp,-28
    3534:	dfc00615 	stw	ra,24(sp)
    3538:	df000515 	stw	fp,20(sp)
    353c:	df000504 	addi	fp,sp,20
    3540:	e13ffd15 	stw	r4,-12(fp)
    3544:	e17ffe15 	stw	r5,-8(fp)
    3548:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    354c:	e0bffd17 	ldw	r2,-12(fp)
    3550:	10000816 	blt	r2,zero,3574 <read+0x44>
    3554:	01400304 	movi	r5,12
    3558:	e13ffd17 	ldw	r4,-12(fp)
    355c:	00001040 	call	104 <__mulsi3>
    3560:	1007883a 	mov	r3,r2
    3564:	00800074 	movhi	r2,1
    3568:	10822804 	addi	r2,r2,2208
    356c:	1885883a 	add	r2,r3,r2
    3570:	00000106 	br	3578 <read+0x48>
    3574:	0005883a 	mov	r2,zero
    3578:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    357c:	e0bffb17 	ldw	r2,-20(fp)
    3580:	10002226 	beq	r2,zero,360c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    3584:	e0bffb17 	ldw	r2,-20(fp)
    3588:	10800217 	ldw	r2,8(r2)
    358c:	108000cc 	andi	r2,r2,3
    3590:	10800060 	cmpeqi	r2,r2,1
    3594:	1000181e 	bne	r2,zero,35f8 <read+0xc8>
        (fd->dev->read))
    3598:	e0bffb17 	ldw	r2,-20(fp)
    359c:	10800017 	ldw	r2,0(r2)
    35a0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    35a4:	10001426 	beq	r2,zero,35f8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    35a8:	e0bffb17 	ldw	r2,-20(fp)
    35ac:	10800017 	ldw	r2,0(r2)
    35b0:	10800517 	ldw	r2,20(r2)
    35b4:	e0ffff17 	ldw	r3,-4(fp)
    35b8:	180d883a 	mov	r6,r3
    35bc:	e17ffe17 	ldw	r5,-8(fp)
    35c0:	e13ffb17 	ldw	r4,-20(fp)
    35c4:	103ee83a 	callr	r2
    35c8:	e0bffc15 	stw	r2,-16(fp)
    35cc:	e0bffc17 	ldw	r2,-16(fp)
    35d0:	1000070e 	bge	r2,zero,35f0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    35d4:	00034f40 	call	34f4 <alt_get_errno>
    35d8:	1007883a 	mov	r3,r2
    35dc:	e0bffc17 	ldw	r2,-16(fp)
    35e0:	0085c83a 	sub	r2,zero,r2
    35e4:	18800015 	stw	r2,0(r3)
          return -1;
    35e8:	00bfffc4 	movi	r2,-1
    35ec:	00000c06 	br	3620 <read+0xf0>
        }
        return rval;
    35f0:	e0bffc17 	ldw	r2,-16(fp)
    35f4:	00000a06 	br	3620 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    35f8:	00034f40 	call	34f4 <alt_get_errno>
    35fc:	1007883a 	mov	r3,r2
    3600:	00800344 	movi	r2,13
    3604:	18800015 	stw	r2,0(r3)
    3608:	00000406 	br	361c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    360c:	00034f40 	call	34f4 <alt_get_errno>
    3610:	1007883a 	mov	r3,r2
    3614:	00801444 	movi	r2,81
    3618:	18800015 	stw	r2,0(r3)
  }
  return -1;
    361c:	00bfffc4 	movi	r2,-1
}
    3620:	e037883a 	mov	sp,fp
    3624:	dfc00117 	ldw	ra,4(sp)
    3628:	df000017 	ldw	fp,0(sp)
    362c:	dec00204 	addi	sp,sp,8
    3630:	f800283a 	ret

00003634 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    3634:	defffc04 	addi	sp,sp,-16
    3638:	dfc00315 	stw	ra,12(sp)
    363c:	df000215 	stw	fp,8(sp)
    3640:	dc000115 	stw	r16,4(sp)
    3644:	df000204 	addi	fp,sp,8
    3648:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    364c:	e0bffe17 	ldw	r2,-8(fp)
    3650:	108000d0 	cmplti	r2,r2,3
    3654:	1000111e 	bne	r2,zero,369c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    3658:	04000074 	movhi	r16,1
    365c:	84022804 	addi	r16,r16,2208
    3660:	e0bffe17 	ldw	r2,-8(fp)
    3664:	01400304 	movi	r5,12
    3668:	1009883a 	mov	r4,r2
    366c:	00001040 	call	104 <__mulsi3>
    3670:	8085883a 	add	r2,r16,r2
    3674:	10800204 	addi	r2,r2,8
    3678:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    367c:	04000074 	movhi	r16,1
    3680:	84022804 	addi	r16,r16,2208
    3684:	e0bffe17 	ldw	r2,-8(fp)
    3688:	01400304 	movi	r5,12
    368c:	1009883a 	mov	r4,r2
    3690:	00001040 	call	104 <__mulsi3>
    3694:	8085883a 	add	r2,r16,r2
    3698:	10000015 	stw	zero,0(r2)
  }
}
    369c:	0001883a 	nop
    36a0:	e6ffff04 	addi	sp,fp,-4
    36a4:	dfc00217 	ldw	ra,8(sp)
    36a8:	df000117 	ldw	fp,4(sp)
    36ac:	dc000017 	ldw	r16,0(sp)
    36b0:	dec00304 	addi	sp,sp,12
    36b4:	f800283a 	ret

000036b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    36b8:	defff904 	addi	sp,sp,-28
    36bc:	df000615 	stw	fp,24(sp)
    36c0:	df000604 	addi	fp,sp,24
    36c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    36c8:	0005303a 	rdctl	r2,status
    36cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    36d0:	e0fffe17 	ldw	r3,-8(fp)
    36d4:	00bfff84 	movi	r2,-2
    36d8:	1884703a 	and	r2,r3,r2
    36dc:	1001703a 	wrctl	status,r2
  
  return context;
    36e0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    36e4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    36e8:	d0a00a17 	ldw	r2,-32728(gp)
    36ec:	10c000c4 	addi	r3,r2,3
    36f0:	00bfff04 	movi	r2,-4
    36f4:	1884703a 	and	r2,r3,r2
    36f8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    36fc:	d0e00a17 	ldw	r3,-32728(gp)
    3700:	e0bfff17 	ldw	r2,-4(fp)
    3704:	1887883a 	add	r3,r3,r2
    3708:	008000b4 	movhi	r2,2
    370c:	10a00004 	addi	r2,r2,-32768
    3710:	10c0062e 	bgeu	r2,r3,372c <sbrk+0x74>
    3714:	e0bffb17 	ldw	r2,-20(fp)
    3718:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    371c:	e0bffa17 	ldw	r2,-24(fp)
    3720:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    3724:	00bfffc4 	movi	r2,-1
    3728:	00000b06 	br	3758 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    372c:	d0a00a17 	ldw	r2,-32728(gp)
    3730:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    3734:	d0e00a17 	ldw	r3,-32728(gp)
    3738:	e0bfff17 	ldw	r2,-4(fp)
    373c:	1885883a 	add	r2,r3,r2
    3740:	d0a00a15 	stw	r2,-32728(gp)
    3744:	e0bffb17 	ldw	r2,-20(fp)
    3748:	e0bffc15 	stw	r2,-16(fp)
    374c:	e0bffc17 	ldw	r2,-16(fp)
    3750:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3754:	e0bffd17 	ldw	r2,-12(fp)
} 
    3758:	e037883a 	mov	sp,fp
    375c:	df000017 	ldw	fp,0(sp)
    3760:	dec00104 	addi	sp,sp,4
    3764:	f800283a 	ret

00003768 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    3768:	defffd04 	addi	sp,sp,-12
    376c:	dfc00215 	stw	ra,8(sp)
    3770:	df000115 	stw	fp,4(sp)
    3774:	df000104 	addi	fp,sp,4
    3778:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    377c:	e13fff17 	ldw	r4,-4(fp)
    3780:	0003bb40 	call	3bb4 <alt_busy_sleep>
}
    3784:	e037883a 	mov	sp,fp
    3788:	dfc00117 	ldw	ra,4(sp)
    378c:	df000017 	ldw	fp,0(sp)
    3790:	dec00204 	addi	sp,sp,8
    3794:	f800283a 	ret

00003798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3798:	defffe04 	addi	sp,sp,-8
    379c:	dfc00115 	stw	ra,4(sp)
    37a0:	df000015 	stw	fp,0(sp)
    37a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    37a8:	d0a00917 	ldw	r2,-32732(gp)
    37ac:	10000326 	beq	r2,zero,37bc <alt_get_errno+0x24>
    37b0:	d0a00917 	ldw	r2,-32732(gp)
    37b4:	103ee83a 	callr	r2
    37b8:	00000106 	br	37c0 <alt_get_errno+0x28>
    37bc:	d0a00e04 	addi	r2,gp,-32712
}
    37c0:	e037883a 	mov	sp,fp
    37c4:	dfc00117 	ldw	ra,4(sp)
    37c8:	df000017 	ldw	fp,0(sp)
    37cc:	dec00204 	addi	sp,sp,8
    37d0:	f800283a 	ret

000037d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    37d4:	defff904 	addi	sp,sp,-28
    37d8:	dfc00615 	stw	ra,24(sp)
    37dc:	df000515 	stw	fp,20(sp)
    37e0:	df000504 	addi	fp,sp,20
    37e4:	e13ffd15 	stw	r4,-12(fp)
    37e8:	e17ffe15 	stw	r5,-8(fp)
    37ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    37f0:	e0bffd17 	ldw	r2,-12(fp)
    37f4:	10000816 	blt	r2,zero,3818 <write+0x44>
    37f8:	01400304 	movi	r5,12
    37fc:	e13ffd17 	ldw	r4,-12(fp)
    3800:	00001040 	call	104 <__mulsi3>
    3804:	1007883a 	mov	r3,r2
    3808:	00800074 	movhi	r2,1
    380c:	10822804 	addi	r2,r2,2208
    3810:	1885883a 	add	r2,r3,r2
    3814:	00000106 	br	381c <write+0x48>
    3818:	0005883a 	mov	r2,zero
    381c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    3820:	e0bffb17 	ldw	r2,-20(fp)
    3824:	10002126 	beq	r2,zero,38ac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3828:	e0bffb17 	ldw	r2,-20(fp)
    382c:	10800217 	ldw	r2,8(r2)
    3830:	108000cc 	andi	r2,r2,3
    3834:	10001826 	beq	r2,zero,3898 <write+0xc4>
    3838:	e0bffb17 	ldw	r2,-20(fp)
    383c:	10800017 	ldw	r2,0(r2)
    3840:	10800617 	ldw	r2,24(r2)
    3844:	10001426 	beq	r2,zero,3898 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    3848:	e0bffb17 	ldw	r2,-20(fp)
    384c:	10800017 	ldw	r2,0(r2)
    3850:	10800617 	ldw	r2,24(r2)
    3854:	e0ffff17 	ldw	r3,-4(fp)
    3858:	180d883a 	mov	r6,r3
    385c:	e17ffe17 	ldw	r5,-8(fp)
    3860:	e13ffb17 	ldw	r4,-20(fp)
    3864:	103ee83a 	callr	r2
    3868:	e0bffc15 	stw	r2,-16(fp)
    386c:	e0bffc17 	ldw	r2,-16(fp)
    3870:	1000070e 	bge	r2,zero,3890 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    3874:	00037980 	call	3798 <alt_get_errno>
    3878:	1007883a 	mov	r3,r2
    387c:	e0bffc17 	ldw	r2,-16(fp)
    3880:	0085c83a 	sub	r2,zero,r2
    3884:	18800015 	stw	r2,0(r3)
        return -1;
    3888:	00bfffc4 	movi	r2,-1
    388c:	00000c06 	br	38c0 <write+0xec>
      }
      return rval;
    3890:	e0bffc17 	ldw	r2,-16(fp)
    3894:	00000a06 	br	38c0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    3898:	00037980 	call	3798 <alt_get_errno>
    389c:	1007883a 	mov	r3,r2
    38a0:	00800344 	movi	r2,13
    38a4:	18800015 	stw	r2,0(r3)
    38a8:	00000406 	br	38bc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    38ac:	00037980 	call	3798 <alt_get_errno>
    38b0:	1007883a 	mov	r3,r2
    38b4:	00801444 	movi	r2,81
    38b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    38bc:	00bfffc4 	movi	r2,-1
}
    38c0:	e037883a 	mov	sp,fp
    38c4:	dfc00117 	ldw	ra,4(sp)
    38c8:	df000017 	ldw	fp,0(sp)
    38cc:	dec00204 	addi	sp,sp,8
    38d0:	f800283a 	ret

000038d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    38d4:	defffd04 	addi	sp,sp,-12
    38d8:	dfc00215 	stw	ra,8(sp)
    38dc:	df000115 	stw	fp,4(sp)
    38e0:	df000104 	addi	fp,sp,4
    38e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    38e8:	d1600604 	addi	r5,gp,-32744
    38ec:	e13fff17 	ldw	r4,-4(fp)
    38f0:	0003d680 	call	3d68 <alt_dev_llist_insert>
}
    38f4:	e037883a 	mov	sp,fp
    38f8:	dfc00117 	ldw	ra,4(sp)
    38fc:	df000017 	ldw	fp,0(sp)
    3900:	dec00204 	addi	sp,sp,8
    3904:	f800283a 	ret

00003908 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    3908:	defffd04 	addi	sp,sp,-12
    390c:	dfc00215 	stw	ra,8(sp)
    3910:	df000115 	stw	fp,4(sp)
    3914:	df000104 	addi	fp,sp,4
    3918:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    391c:	00042d00 	call	42d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    3920:	00800044 	movi	r2,1
    3924:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    3928:	0001883a 	nop
    392c:	e037883a 	mov	sp,fp
    3930:	dfc00117 	ldw	ra,4(sp)
    3934:	df000017 	ldw	fp,0(sp)
    3938:	dec00204 	addi	sp,sp,8
    393c:	f800283a 	ret

00003940 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    3940:	defffe04 	addi	sp,sp,-8
    3944:	dfc00115 	stw	ra,4(sp)
    3948:	df000015 	stw	fp,0(sp)
    394c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    3950:	01000074 	movhi	r4,1
    3954:	21028804 	addi	r4,r4,2592
    3958:	00038d40 	call	38d4 <alt_dev_reg>
}
    395c:	0001883a 	nop
    3960:	e037883a 	mov	sp,fp
    3964:	dfc00117 	ldw	ra,4(sp)
    3968:	df000017 	ldw	fp,0(sp)
    396c:	dec00204 	addi	sp,sp,8
    3970:	f800283a 	ret

00003974 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3974:	defffa04 	addi	sp,sp,-24
    3978:	dfc00515 	stw	ra,20(sp)
    397c:	df000415 	stw	fp,16(sp)
    3980:	df000404 	addi	fp,sp,16
    3984:	e13ffd15 	stw	r4,-12(fp)
    3988:	e17ffe15 	stw	r5,-8(fp)
    398c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    3990:	e0bffd17 	ldw	r2,-12(fp)
    3994:	10800017 	ldw	r2,0(r2)
    3998:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    399c:	e0bffc17 	ldw	r2,-16(fp)
    39a0:	10c00a04 	addi	r3,r2,40
    39a4:	e0bffd17 	ldw	r2,-12(fp)
    39a8:	10800217 	ldw	r2,8(r2)
    39ac:	100f883a 	mov	r7,r2
    39b0:	e1bfff17 	ldw	r6,-4(fp)
    39b4:	e17ffe17 	ldw	r5,-8(fp)
    39b8:	1809883a 	mov	r4,r3
    39bc:	0003a340 	call	3a34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    39c0:	e037883a 	mov	sp,fp
    39c4:	dfc00117 	ldw	ra,4(sp)
    39c8:	df000017 	ldw	fp,0(sp)
    39cc:	dec00204 	addi	sp,sp,8
    39d0:	f800283a 	ret

000039d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    39d4:	defffa04 	addi	sp,sp,-24
    39d8:	dfc00515 	stw	ra,20(sp)
    39dc:	df000415 	stw	fp,16(sp)
    39e0:	df000404 	addi	fp,sp,16
    39e4:	e13ffd15 	stw	r4,-12(fp)
    39e8:	e17ffe15 	stw	r5,-8(fp)
    39ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    39f0:	e0bffd17 	ldw	r2,-12(fp)
    39f4:	10800017 	ldw	r2,0(r2)
    39f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    39fc:	e0bffc17 	ldw	r2,-16(fp)
    3a00:	10c00a04 	addi	r3,r2,40
    3a04:	e0bffd17 	ldw	r2,-12(fp)
    3a08:	10800217 	ldw	r2,8(r2)
    3a0c:	100f883a 	mov	r7,r2
    3a10:	e1bfff17 	ldw	r6,-4(fp)
    3a14:	e17ffe17 	ldw	r5,-8(fp)
    3a18:	1809883a 	mov	r4,r3
    3a1c:	0003b200 	call	3b20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3a20:	e037883a 	mov	sp,fp
    3a24:	dfc00117 	ldw	ra,4(sp)
    3a28:	df000017 	ldw	fp,0(sp)
    3a2c:	dec00204 	addi	sp,sp,8
    3a30:	f800283a 	ret

00003a34 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    3a34:	defff704 	addi	sp,sp,-36
    3a38:	df000815 	stw	fp,32(sp)
    3a3c:	df000804 	addi	fp,sp,32
    3a40:	e13ffc15 	stw	r4,-16(fp)
    3a44:	e17ffd15 	stw	r5,-12(fp)
    3a48:	e1bffe15 	stw	r6,-8(fp)
    3a4c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    3a50:	e0bffc17 	ldw	r2,-16(fp)
    3a54:	10800017 	ldw	r2,0(r2)
    3a58:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    3a5c:	e0bffd17 	ldw	r2,-12(fp)
    3a60:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    3a64:	e0bffe17 	ldw	r2,-8(fp)
    3a68:	e0fffd17 	ldw	r3,-12(fp)
    3a6c:	1885883a 	add	r2,r3,r2
    3a70:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    3a74:	00001206 	br	3ac0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3a78:	e0bff917 	ldw	r2,-28(fp)
    3a7c:	10800037 	ldwio	r2,0(r2)
    3a80:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    3a84:	e0bffb17 	ldw	r2,-20(fp)
    3a88:	10a0000c 	andi	r2,r2,32768
    3a8c:	10000626 	beq	r2,zero,3aa8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3a90:	e0bff817 	ldw	r2,-32(fp)
    3a94:	10c00044 	addi	r3,r2,1
    3a98:	e0fff815 	stw	r3,-32(fp)
    3a9c:	e0fffb17 	ldw	r3,-20(fp)
    3aa0:	10c00005 	stb	r3,0(r2)
    3aa4:	00000606 	br	3ac0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    3aa8:	e0fff817 	ldw	r3,-32(fp)
    3aac:	e0bffd17 	ldw	r2,-12(fp)
    3ab0:	1880071e 	bne	r3,r2,3ad0 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    3ab4:	e0bfff17 	ldw	r2,-4(fp)
    3ab8:	1090000c 	andi	r2,r2,16384
    3abc:	1000061e 	bne	r2,zero,3ad8 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    3ac0:	e0fff817 	ldw	r3,-32(fp)
    3ac4:	e0bffa17 	ldw	r2,-24(fp)
    3ac8:	18bfeb36 	bltu	r3,r2,3a78 <altera_avalon_jtag_uart_read+0x44>
    3acc:	00000306 	br	3adc <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    3ad0:	0001883a 	nop
    3ad4:	00000106 	br	3adc <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    3ad8:	0001883a 	nop
    
  }

  if (ptr != buffer)
    3adc:	e0fff817 	ldw	r3,-32(fp)
    3ae0:	e0bffd17 	ldw	r2,-12(fp)
    3ae4:	18800426 	beq	r3,r2,3af8 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    3ae8:	e0fff817 	ldw	r3,-32(fp)
    3aec:	e0bffd17 	ldw	r2,-12(fp)
    3af0:	1885c83a 	sub	r2,r3,r2
    3af4:	00000606 	br	3b10 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    3af8:	e0bfff17 	ldw	r2,-4(fp)
    3afc:	1090000c 	andi	r2,r2,16384
    3b00:	10000226 	beq	r2,zero,3b0c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    3b04:	00bffd44 	movi	r2,-11
    3b08:	00000106 	br	3b10 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    3b0c:	00bffec4 	movi	r2,-5
}
    3b10:	e037883a 	mov	sp,fp
    3b14:	df000017 	ldw	fp,0(sp)
    3b18:	dec00104 	addi	sp,sp,4
    3b1c:	f800283a 	ret

00003b20 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    3b20:	defff904 	addi	sp,sp,-28
    3b24:	df000615 	stw	fp,24(sp)
    3b28:	df000604 	addi	fp,sp,24
    3b2c:	e13ffc15 	stw	r4,-16(fp)
    3b30:	e17ffd15 	stw	r5,-12(fp)
    3b34:	e1bffe15 	stw	r6,-8(fp)
    3b38:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    3b3c:	e0bffc17 	ldw	r2,-16(fp)
    3b40:	10800017 	ldw	r2,0(r2)
    3b44:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    3b48:	e0bffe17 	ldw	r2,-8(fp)
    3b4c:	e0fffd17 	ldw	r3,-12(fp)
    3b50:	1885883a 	add	r2,r3,r2
    3b54:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    3b58:	00000e06 	br	3b94 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    3b5c:	e0bffa17 	ldw	r2,-24(fp)
    3b60:	10800104 	addi	r2,r2,4
    3b64:	10800037 	ldwio	r2,0(r2)
    3b68:	10bfffec 	andhi	r2,r2,65535
    3b6c:	10000926 	beq	r2,zero,3b94 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    3b70:	e0fffa17 	ldw	r3,-24(fp)
    3b74:	e0bffd17 	ldw	r2,-12(fp)
    3b78:	11000044 	addi	r4,r2,1
    3b7c:	e13ffd15 	stw	r4,-12(fp)
    3b80:	10800003 	ldbu	r2,0(r2)
    3b84:	10803fcc 	andi	r2,r2,255
    3b88:	1080201c 	xori	r2,r2,128
    3b8c:	10bfe004 	addi	r2,r2,-128
    3b90:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    3b94:	e0fffd17 	ldw	r3,-12(fp)
    3b98:	e0bffb17 	ldw	r2,-20(fp)
    3b9c:	18bfef36 	bltu	r3,r2,3b5c <altera_avalon_jtag_uart_write+0x3c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    3ba0:	e0bffe17 	ldw	r2,-8(fp)
}
    3ba4:	e037883a 	mov	sp,fp
    3ba8:	df000017 	ldw	fp,0(sp)
    3bac:	dec00104 	addi	sp,sp,4
    3bb0:	f800283a 	ret

00003bb4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    3bb4:	defffa04 	addi	sp,sp,-24
    3bb8:	dfc00515 	stw	ra,20(sp)
    3bbc:	df000415 	stw	fp,16(sp)
    3bc0:	df000404 	addi	fp,sp,16
    3bc4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    3bc8:	00800244 	movi	r2,9
    3bcc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    3bd0:	014003f4 	movhi	r5,15
    3bd4:	29509004 	addi	r5,r5,16960
    3bd8:	e13ffd17 	ldw	r4,-12(fp)
    3bdc:	00001040 	call	104 <__mulsi3>
    3be0:	100b883a 	mov	r5,r2
    3be4:	0100bef4 	movhi	r4,763
    3be8:	213c2004 	addi	r4,r4,-3968
    3bec:	0002e540 	call	2e54 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    3bf0:	100b883a 	mov	r5,r2
    3bf4:	01200034 	movhi	r4,32768
    3bf8:	213fffc4 	addi	r4,r4,-1
    3bfc:	0002e540 	call	2e54 <__udivsi3>
    3c00:	100b883a 	mov	r5,r2
    3c04:	e13fff17 	ldw	r4,-4(fp)
    3c08:	0002e540 	call	2e54 <__udivsi3>
    3c0c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    3c10:	e0bffe17 	ldw	r2,-8(fp)
    3c14:	10002a26 	beq	r2,zero,3cc0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    3c18:	e03ffc15 	stw	zero,-16(fp)
    3c1c:	00001706 	br	3c7c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    3c20:	00a00034 	movhi	r2,32768
    3c24:	10bfffc4 	addi	r2,r2,-1
    3c28:	10bfffc4 	addi	r2,r2,-1
    3c2c:	103ffe1e 	bne	r2,zero,3c28 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    3c30:	014003f4 	movhi	r5,15
    3c34:	29509004 	addi	r5,r5,16960
    3c38:	e13ffd17 	ldw	r4,-12(fp)
    3c3c:	00001040 	call	104 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    3c40:	100b883a 	mov	r5,r2
    3c44:	0100bef4 	movhi	r4,763
    3c48:	213c2004 	addi	r4,r4,-3968
    3c4c:	0002e540 	call	2e54 <__udivsi3>
    3c50:	100b883a 	mov	r5,r2
    3c54:	01200034 	movhi	r4,32768
    3c58:	213fffc4 	addi	r4,r4,-1
    3c5c:	0002e540 	call	2e54 <__udivsi3>
    3c60:	1007883a 	mov	r3,r2
    3c64:	e0bfff17 	ldw	r2,-4(fp)
    3c68:	10c5c83a 	sub	r2,r2,r3
    3c6c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    3c70:	e0bffc17 	ldw	r2,-16(fp)
    3c74:	10800044 	addi	r2,r2,1
    3c78:	e0bffc15 	stw	r2,-16(fp)
    3c7c:	e0fffc17 	ldw	r3,-16(fp)
    3c80:	e0bffe17 	ldw	r2,-8(fp)
    3c84:	18bfe616 	blt	r3,r2,3c20 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3c88:	014003f4 	movhi	r5,15
    3c8c:	29509004 	addi	r5,r5,16960
    3c90:	e13ffd17 	ldw	r4,-12(fp)
    3c94:	00001040 	call	104 <__mulsi3>
    3c98:	100b883a 	mov	r5,r2
    3c9c:	0100bef4 	movhi	r4,763
    3ca0:	213c2004 	addi	r4,r4,-3968
    3ca4:	0002e540 	call	2e54 <__udivsi3>
    3ca8:	e17fff17 	ldw	r5,-4(fp)
    3cac:	1009883a 	mov	r4,r2
    3cb0:	00001040 	call	104 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3cb4:	10bfffc4 	addi	r2,r2,-1
    3cb8:	103ffe1e 	bne	r2,zero,3cb4 <alt_busy_sleep+0x100>
    3cbc:	00000d06 	br	3cf4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    3cc0:	014003f4 	movhi	r5,15
    3cc4:	29509004 	addi	r5,r5,16960
    3cc8:	e13ffd17 	ldw	r4,-12(fp)
    3ccc:	00001040 	call	104 <__mulsi3>
    3cd0:	100b883a 	mov	r5,r2
    3cd4:	0100bef4 	movhi	r4,763
    3cd8:	213c2004 	addi	r4,r4,-3968
    3cdc:	0002e540 	call	2e54 <__udivsi3>
    3ce0:	e17fff17 	ldw	r5,-4(fp)
    3ce4:	1009883a 	mov	r4,r2
    3ce8:	00001040 	call	104 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    3cec:	10bfffc4 	addi	r2,r2,-1
    3cf0:	00bffe16 	blt	zero,r2,3cec <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    3cf4:	0005883a 	mov	r2,zero
}
    3cf8:	e037883a 	mov	sp,fp
    3cfc:	dfc00117 	ldw	ra,4(sp)
    3d00:	df000017 	ldw	fp,0(sp)
    3d04:	dec00204 	addi	sp,sp,8
    3d08:	f800283a 	ret

00003d0c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    3d0c:	deffff04 	addi	sp,sp,-4
    3d10:	df000015 	stw	fp,0(sp)
    3d14:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    3d18:	0001883a 	nop
    3d1c:	e037883a 	mov	sp,fp
    3d20:	df000017 	ldw	fp,0(sp)
    3d24:	dec00104 	addi	sp,sp,4
    3d28:	f800283a 	ret

00003d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3d2c:	defffe04 	addi	sp,sp,-8
    3d30:	dfc00115 	stw	ra,4(sp)
    3d34:	df000015 	stw	fp,0(sp)
    3d38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    3d3c:	d0a00917 	ldw	r2,-32732(gp)
    3d40:	10000326 	beq	r2,zero,3d50 <alt_get_errno+0x24>
    3d44:	d0a00917 	ldw	r2,-32732(gp)
    3d48:	103ee83a 	callr	r2
    3d4c:	00000106 	br	3d54 <alt_get_errno+0x28>
    3d50:	d0a00e04 	addi	r2,gp,-32712
}
    3d54:	e037883a 	mov	sp,fp
    3d58:	dfc00117 	ldw	ra,4(sp)
    3d5c:	df000017 	ldw	fp,0(sp)
    3d60:	dec00204 	addi	sp,sp,8
    3d64:	f800283a 	ret

00003d68 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    3d68:	defffa04 	addi	sp,sp,-24
    3d6c:	dfc00515 	stw	ra,20(sp)
    3d70:	df000415 	stw	fp,16(sp)
    3d74:	df000404 	addi	fp,sp,16
    3d78:	e13ffe15 	stw	r4,-8(fp)
    3d7c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    3d80:	e0bffe17 	ldw	r2,-8(fp)
    3d84:	10000326 	beq	r2,zero,3d94 <alt_dev_llist_insert+0x2c>
    3d88:	e0bffe17 	ldw	r2,-8(fp)
    3d8c:	10800217 	ldw	r2,8(r2)
    3d90:	1000061e 	bne	r2,zero,3dac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    3d94:	0003d2c0 	call	3d2c <alt_get_errno>
    3d98:	1007883a 	mov	r3,r2
    3d9c:	00800584 	movi	r2,22
    3da0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    3da4:	00bffa84 	movi	r2,-22
    3da8:	00001306 	br	3df8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    3dac:	e0bffe17 	ldw	r2,-8(fp)
    3db0:	e0ffff17 	ldw	r3,-4(fp)
    3db4:	e0fffc15 	stw	r3,-16(fp)
    3db8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    3dbc:	e0bffd17 	ldw	r2,-12(fp)
    3dc0:	e0fffc17 	ldw	r3,-16(fp)
    3dc4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    3dc8:	e0bffc17 	ldw	r2,-16(fp)
    3dcc:	10c00017 	ldw	r3,0(r2)
    3dd0:	e0bffd17 	ldw	r2,-12(fp)
    3dd4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    3dd8:	e0bffc17 	ldw	r2,-16(fp)
    3ddc:	10800017 	ldw	r2,0(r2)
    3de0:	e0fffd17 	ldw	r3,-12(fp)
    3de4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    3de8:	e0bffc17 	ldw	r2,-16(fp)
    3dec:	e0fffd17 	ldw	r3,-12(fp)
    3df0:	10c00015 	stw	r3,0(r2)

  return 0;  
    3df4:	0005883a 	mov	r2,zero
}
    3df8:	e037883a 	mov	sp,fp
    3dfc:	dfc00117 	ldw	ra,4(sp)
    3e00:	df000017 	ldw	fp,0(sp)
    3e04:	dec00204 	addi	sp,sp,8
    3e08:	f800283a 	ret

00003e0c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    3e0c:	defffd04 	addi	sp,sp,-12
    3e10:	dfc00215 	stw	ra,8(sp)
    3e14:	df000115 	stw	fp,4(sp)
    3e18:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3e1c:	00800034 	movhi	r2,0
    3e20:	10923804 	addi	r2,r2,18656
    3e24:	e0bfff15 	stw	r2,-4(fp)
    3e28:	00000606 	br	3e44 <_do_ctors+0x38>
        (*ctor) (); 
    3e2c:	e0bfff17 	ldw	r2,-4(fp)
    3e30:	10800017 	ldw	r2,0(r2)
    3e34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    3e38:	e0bfff17 	ldw	r2,-4(fp)
    3e3c:	10bfff04 	addi	r2,r2,-4
    3e40:	e0bfff15 	stw	r2,-4(fp)
    3e44:	e0ffff17 	ldw	r3,-4(fp)
    3e48:	00800034 	movhi	r2,0
    3e4c:	10923904 	addi	r2,r2,18660
    3e50:	18bff62e 	bgeu	r3,r2,3e2c <_do_ctors+0x20>
        (*ctor) (); 
}
    3e54:	0001883a 	nop
    3e58:	e037883a 	mov	sp,fp
    3e5c:	dfc00117 	ldw	ra,4(sp)
    3e60:	df000017 	ldw	fp,0(sp)
    3e64:	dec00204 	addi	sp,sp,8
    3e68:	f800283a 	ret

00003e6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    3e6c:	defffd04 	addi	sp,sp,-12
    3e70:	dfc00215 	stw	ra,8(sp)
    3e74:	df000115 	stw	fp,4(sp)
    3e78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3e7c:	00800034 	movhi	r2,0
    3e80:	10923804 	addi	r2,r2,18656
    3e84:	e0bfff15 	stw	r2,-4(fp)
    3e88:	00000606 	br	3ea4 <_do_dtors+0x38>
        (*dtor) (); 
    3e8c:	e0bfff17 	ldw	r2,-4(fp)
    3e90:	10800017 	ldw	r2,0(r2)
    3e94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    3e98:	e0bfff17 	ldw	r2,-4(fp)
    3e9c:	10bfff04 	addi	r2,r2,-4
    3ea0:	e0bfff15 	stw	r2,-4(fp)
    3ea4:	e0ffff17 	ldw	r3,-4(fp)
    3ea8:	00800034 	movhi	r2,0
    3eac:	10923904 	addi	r2,r2,18660
    3eb0:	18bff62e 	bgeu	r3,r2,3e8c <_do_dtors+0x20>
        (*dtor) (); 
}
    3eb4:	0001883a 	nop
    3eb8:	e037883a 	mov	sp,fp
    3ebc:	dfc00117 	ldw	ra,4(sp)
    3ec0:	df000017 	ldw	fp,0(sp)
    3ec4:	dec00204 	addi	sp,sp,8
    3ec8:	f800283a 	ret

00003ecc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    3ecc:	deffff04 	addi	sp,sp,-4
    3ed0:	df000015 	stw	fp,0(sp)
    3ed4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    3ed8:	0001883a 	nop
    3edc:	e037883a 	mov	sp,fp
    3ee0:	df000017 	ldw	fp,0(sp)
    3ee4:	dec00104 	addi	sp,sp,4
    3ee8:	f800283a 	ret

00003eec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    3eec:	defff804 	addi	sp,sp,-32
    3ef0:	dfc00715 	stw	ra,28(sp)
    3ef4:	df000615 	stw	fp,24(sp)
    3ef8:	dc000515 	stw	r16,20(sp)
    3efc:	df000604 	addi	fp,sp,24
    3f00:	e13ffb15 	stw	r4,-20(fp)
    3f04:	e17ffc15 	stw	r5,-16(fp)
    3f08:	e1bffd15 	stw	r6,-12(fp)
    3f0c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    3f10:	e1bffe17 	ldw	r6,-8(fp)
    3f14:	e17ffd17 	ldw	r5,-12(fp)
    3f18:	e13ffc17 	ldw	r4,-16(fp)
    3f1c:	00041740 	call	4174 <open>
    3f20:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    3f24:	e0bffa17 	ldw	r2,-24(fp)
    3f28:	10002216 	blt	r2,zero,3fb4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    3f2c:	04000074 	movhi	r16,1
    3f30:	84022804 	addi	r16,r16,2208
    3f34:	e0bffa17 	ldw	r2,-24(fp)
    3f38:	01400304 	movi	r5,12
    3f3c:	1009883a 	mov	r4,r2
    3f40:	00001040 	call	104 <__mulsi3>
    3f44:	8085883a 	add	r2,r16,r2
    3f48:	10c00017 	ldw	r3,0(r2)
    3f4c:	e0bffb17 	ldw	r2,-20(fp)
    3f50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    3f54:	04000074 	movhi	r16,1
    3f58:	84022804 	addi	r16,r16,2208
    3f5c:	e0bffa17 	ldw	r2,-24(fp)
    3f60:	01400304 	movi	r5,12
    3f64:	1009883a 	mov	r4,r2
    3f68:	00001040 	call	104 <__mulsi3>
    3f6c:	8085883a 	add	r2,r16,r2
    3f70:	10800104 	addi	r2,r2,4
    3f74:	10c00017 	ldw	r3,0(r2)
    3f78:	e0bffb17 	ldw	r2,-20(fp)
    3f7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    3f80:	04000074 	movhi	r16,1
    3f84:	84022804 	addi	r16,r16,2208
    3f88:	e0bffa17 	ldw	r2,-24(fp)
    3f8c:	01400304 	movi	r5,12
    3f90:	1009883a 	mov	r4,r2
    3f94:	00001040 	call	104 <__mulsi3>
    3f98:	8085883a 	add	r2,r16,r2
    3f9c:	10800204 	addi	r2,r2,8
    3fa0:	10c00017 	ldw	r3,0(r2)
    3fa4:	e0bffb17 	ldw	r2,-20(fp)
    3fa8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    3fac:	e13ffa17 	ldw	r4,-24(fp)
    3fb0:	00036340 	call	3634 <alt_release_fd>
  }
} 
    3fb4:	0001883a 	nop
    3fb8:	e6ffff04 	addi	sp,fp,-4
    3fbc:	dfc00217 	ldw	ra,8(sp)
    3fc0:	df000117 	ldw	fp,4(sp)
    3fc4:	dc000017 	ldw	r16,0(sp)
    3fc8:	dec00304 	addi	sp,sp,12
    3fcc:	f800283a 	ret

00003fd0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    3fd0:	defffb04 	addi	sp,sp,-20
    3fd4:	dfc00415 	stw	ra,16(sp)
    3fd8:	df000315 	stw	fp,12(sp)
    3fdc:	df000304 	addi	fp,sp,12
    3fe0:	e13ffd15 	stw	r4,-12(fp)
    3fe4:	e17ffe15 	stw	r5,-8(fp)
    3fe8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    3fec:	01c07fc4 	movi	r7,511
    3ff0:	01800044 	movi	r6,1
    3ff4:	e17ffd17 	ldw	r5,-12(fp)
    3ff8:	01000074 	movhi	r4,1
    3ffc:	21022b04 	addi	r4,r4,2220
    4000:	0003eec0 	call	3eec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4004:	01c07fc4 	movi	r7,511
    4008:	000d883a 	mov	r6,zero
    400c:	e17ffe17 	ldw	r5,-8(fp)
    4010:	01000074 	movhi	r4,1
    4014:	21022804 	addi	r4,r4,2208
    4018:	0003eec0 	call	3eec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    401c:	01c07fc4 	movi	r7,511
    4020:	01800044 	movi	r6,1
    4024:	e17fff17 	ldw	r5,-4(fp)
    4028:	01000074 	movhi	r4,1
    402c:	21022e04 	addi	r4,r4,2232
    4030:	0003eec0 	call	3eec <alt_open_fd>
}  
    4034:	0001883a 	nop
    4038:	e037883a 	mov	sp,fp
    403c:	dfc00117 	ldw	ra,4(sp)
    4040:	df000017 	ldw	fp,0(sp)
    4044:	dec00204 	addi	sp,sp,8
    4048:	f800283a 	ret

0000404c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    404c:	defffe04 	addi	sp,sp,-8
    4050:	dfc00115 	stw	ra,4(sp)
    4054:	df000015 	stw	fp,0(sp)
    4058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    405c:	d0a00917 	ldw	r2,-32732(gp)
    4060:	10000326 	beq	r2,zero,4070 <alt_get_errno+0x24>
    4064:	d0a00917 	ldw	r2,-32732(gp)
    4068:	103ee83a 	callr	r2
    406c:	00000106 	br	4074 <alt_get_errno+0x28>
    4070:	d0a00e04 	addi	r2,gp,-32712
}
    4074:	e037883a 	mov	sp,fp
    4078:	dfc00117 	ldw	ra,4(sp)
    407c:	df000017 	ldw	fp,0(sp)
    4080:	dec00204 	addi	sp,sp,8
    4084:	f800283a 	ret

00004088 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4088:	defffb04 	addi	sp,sp,-20
    408c:	dfc00415 	stw	ra,16(sp)
    4090:	df000315 	stw	fp,12(sp)
    4094:	dc000215 	stw	r16,8(sp)
    4098:	df000304 	addi	fp,sp,12
    409c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    40a0:	e0bffe17 	ldw	r2,-8(fp)
    40a4:	10800217 	ldw	r2,8(r2)
    40a8:	10d00034 	orhi	r3,r2,16384
    40ac:	e0bffe17 	ldw	r2,-8(fp)
    40b0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    40b4:	e03ffd15 	stw	zero,-12(fp)
    40b8:	00002306 	br	4148 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    40bc:	04000074 	movhi	r16,1
    40c0:	84022804 	addi	r16,r16,2208
    40c4:	e0bffd17 	ldw	r2,-12(fp)
    40c8:	01400304 	movi	r5,12
    40cc:	1009883a 	mov	r4,r2
    40d0:	00001040 	call	104 <__mulsi3>
    40d4:	8085883a 	add	r2,r16,r2
    40d8:	10c00017 	ldw	r3,0(r2)
    40dc:	e0bffe17 	ldw	r2,-8(fp)
    40e0:	10800017 	ldw	r2,0(r2)
    40e4:	1880151e 	bne	r3,r2,413c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    40e8:	04000074 	movhi	r16,1
    40ec:	84022804 	addi	r16,r16,2208
    40f0:	e0bffd17 	ldw	r2,-12(fp)
    40f4:	01400304 	movi	r5,12
    40f8:	1009883a 	mov	r4,r2
    40fc:	00001040 	call	104 <__mulsi3>
    4100:	8085883a 	add	r2,r16,r2
    4104:	10800204 	addi	r2,r2,8
    4108:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    410c:	10000b0e 	bge	r2,zero,413c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    4110:	01400304 	movi	r5,12
    4114:	e13ffd17 	ldw	r4,-12(fp)
    4118:	00001040 	call	104 <__mulsi3>
    411c:	1007883a 	mov	r3,r2
    4120:	00800074 	movhi	r2,1
    4124:	10822804 	addi	r2,r2,2208
    4128:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    412c:	e0bffe17 	ldw	r2,-8(fp)
    4130:	18800226 	beq	r3,r2,413c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4134:	00bffcc4 	movi	r2,-13
    4138:	00000806 	br	415c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    413c:	e0bffd17 	ldw	r2,-12(fp)
    4140:	10800044 	addi	r2,r2,1
    4144:	e0bffd15 	stw	r2,-12(fp)
    4148:	d0a00817 	ldw	r2,-32736(gp)
    414c:	1007883a 	mov	r3,r2
    4150:	e0bffd17 	ldw	r2,-12(fp)
    4154:	18bfd92e 	bgeu	r3,r2,40bc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4158:	0005883a 	mov	r2,zero
}
    415c:	e6ffff04 	addi	sp,fp,-4
    4160:	dfc00217 	ldw	ra,8(sp)
    4164:	df000117 	ldw	fp,4(sp)
    4168:	dc000017 	ldw	r16,0(sp)
    416c:	dec00304 	addi	sp,sp,12
    4170:	f800283a 	ret

00004174 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4174:	defff604 	addi	sp,sp,-40
    4178:	dfc00915 	stw	ra,36(sp)
    417c:	df000815 	stw	fp,32(sp)
    4180:	df000804 	addi	fp,sp,32
    4184:	e13ffd15 	stw	r4,-12(fp)
    4188:	e17ffe15 	stw	r5,-8(fp)
    418c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4190:	00bfffc4 	movi	r2,-1
    4194:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    4198:	00bffb44 	movi	r2,-19
    419c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    41a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    41a4:	d1600604 	addi	r5,gp,-32744
    41a8:	e13ffd17 	ldw	r4,-12(fp)
    41ac:	00042f40 	call	42f4 <alt_find_dev>
    41b0:	e0bff815 	stw	r2,-32(fp)
    41b4:	e0bff817 	ldw	r2,-32(fp)
    41b8:	1000051e 	bne	r2,zero,41d0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    41bc:	e13ffd17 	ldw	r4,-12(fp)
    41c0:	00043840 	call	4384 <alt_find_file>
    41c4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    41c8:	00800044 	movi	r2,1
    41cc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    41d0:	e0bff817 	ldw	r2,-32(fp)
    41d4:	10002b26 	beq	r2,zero,4284 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    41d8:	e13ff817 	ldw	r4,-32(fp)
    41dc:	000448c0 	call	448c <alt_get_fd>
    41e0:	e0bff915 	stw	r2,-28(fp)
    41e4:	e0bff917 	ldw	r2,-28(fp)
    41e8:	1000030e 	bge	r2,zero,41f8 <open+0x84>
    {
      status = index;
    41ec:	e0bff917 	ldw	r2,-28(fp)
    41f0:	e0bffa15 	stw	r2,-24(fp)
    41f4:	00002506 	br	428c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    41f8:	01400304 	movi	r5,12
    41fc:	e13ff917 	ldw	r4,-28(fp)
    4200:	00001040 	call	104 <__mulsi3>
    4204:	1007883a 	mov	r3,r2
    4208:	00800074 	movhi	r2,1
    420c:	10822804 	addi	r2,r2,2208
    4210:	1885883a 	add	r2,r3,r2
    4214:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4218:	e0fffe17 	ldw	r3,-8(fp)
    421c:	00900034 	movhi	r2,16384
    4220:	10bfffc4 	addi	r2,r2,-1
    4224:	1886703a 	and	r3,r3,r2
    4228:	e0bffc17 	ldw	r2,-16(fp)
    422c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4230:	e0bffb17 	ldw	r2,-20(fp)
    4234:	1000051e 	bne	r2,zero,424c <open+0xd8>
    4238:	e13ffc17 	ldw	r4,-16(fp)
    423c:	00040880 	call	4088 <alt_file_locked>
    4240:	e0bffa15 	stw	r2,-24(fp)
    4244:	e0bffa17 	ldw	r2,-24(fp)
    4248:	10001016 	blt	r2,zero,428c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    424c:	e0bff817 	ldw	r2,-32(fp)
    4250:	10800317 	ldw	r2,12(r2)
    4254:	10000826 	beq	r2,zero,4278 <open+0x104>
    4258:	e0bff817 	ldw	r2,-32(fp)
    425c:	10800317 	ldw	r2,12(r2)
    4260:	e1ffff17 	ldw	r7,-4(fp)
    4264:	e1bffe17 	ldw	r6,-8(fp)
    4268:	e17ffd17 	ldw	r5,-12(fp)
    426c:	e13ffc17 	ldw	r4,-16(fp)
    4270:	103ee83a 	callr	r2
    4274:	00000106 	br	427c <open+0x108>
    4278:	0005883a 	mov	r2,zero
    427c:	e0bffa15 	stw	r2,-24(fp)
    4280:	00000206 	br	428c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4284:	00bffb44 	movi	r2,-19
    4288:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    428c:	e0bffa17 	ldw	r2,-24(fp)
    4290:	1000090e 	bge	r2,zero,42b8 <open+0x144>
  {
    alt_release_fd (index);  
    4294:	e13ff917 	ldw	r4,-28(fp)
    4298:	00036340 	call	3634 <alt_release_fd>
    ALT_ERRNO = -status;
    429c:	000404c0 	call	404c <alt_get_errno>
    42a0:	1007883a 	mov	r3,r2
    42a4:	e0bffa17 	ldw	r2,-24(fp)
    42a8:	0085c83a 	sub	r2,zero,r2
    42ac:	18800015 	stw	r2,0(r3)
    return -1;
    42b0:	00bfffc4 	movi	r2,-1
    42b4:	00000106 	br	42bc <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    42b8:	e0bff917 	ldw	r2,-28(fp)
}
    42bc:	e037883a 	mov	sp,fp
    42c0:	dfc00117 	ldw	ra,4(sp)
    42c4:	df000017 	ldw	fp,0(sp)
    42c8:	dec00204 	addi	sp,sp,8
    42cc:	f800283a 	ret

000042d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    42d0:	deffff04 	addi	sp,sp,-4
    42d4:	df000015 	stw	fp,0(sp)
    42d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    42dc:	000170fa 	wrctl	ienable,zero
}
    42e0:	0001883a 	nop
    42e4:	e037883a 	mov	sp,fp
    42e8:	df000017 	ldw	fp,0(sp)
    42ec:	dec00104 	addi	sp,sp,4
    42f0:	f800283a 	ret

000042f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    42f4:	defffa04 	addi	sp,sp,-24
    42f8:	dfc00515 	stw	ra,20(sp)
    42fc:	df000415 	stw	fp,16(sp)
    4300:	df000404 	addi	fp,sp,16
    4304:	e13ffe15 	stw	r4,-8(fp)
    4308:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    430c:	e0bfff17 	ldw	r2,-4(fp)
    4310:	10800017 	ldw	r2,0(r2)
    4314:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4318:	e13ffe17 	ldw	r4,-8(fp)
    431c:	00002000 	call	200 <strlen>
    4320:	10800044 	addi	r2,r2,1
    4324:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4328:	00000d06 	br	4360 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    432c:	e0bffc17 	ldw	r2,-16(fp)
    4330:	10800217 	ldw	r2,8(r2)
    4334:	e0fffd17 	ldw	r3,-12(fp)
    4338:	180d883a 	mov	r6,r3
    433c:	e17ffe17 	ldw	r5,-8(fp)
    4340:	1009883a 	mov	r4,r2
    4344:	000459c0 	call	459c <memcmp>
    4348:	1000021e 	bne	r2,zero,4354 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    434c:	e0bffc17 	ldw	r2,-16(fp)
    4350:	00000706 	br	4370 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4354:	e0bffc17 	ldw	r2,-16(fp)
    4358:	10800017 	ldw	r2,0(r2)
    435c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4360:	e0fffc17 	ldw	r3,-16(fp)
    4364:	e0bfff17 	ldw	r2,-4(fp)
    4368:	18bff01e 	bne	r3,r2,432c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    436c:	0005883a 	mov	r2,zero
}
    4370:	e037883a 	mov	sp,fp
    4374:	dfc00117 	ldw	ra,4(sp)
    4378:	df000017 	ldw	fp,0(sp)
    437c:	dec00204 	addi	sp,sp,8
    4380:	f800283a 	ret

00004384 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4384:	defffb04 	addi	sp,sp,-20
    4388:	dfc00415 	stw	ra,16(sp)
    438c:	df000315 	stw	fp,12(sp)
    4390:	df000304 	addi	fp,sp,12
    4394:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    4398:	d0a00417 	ldw	r2,-32752(gp)
    439c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    43a0:	00003106 	br	4468 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    43a4:	e0bffd17 	ldw	r2,-12(fp)
    43a8:	10800217 	ldw	r2,8(r2)
    43ac:	1009883a 	mov	r4,r2
    43b0:	00002000 	call	200 <strlen>
    43b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    43b8:	e0bffd17 	ldw	r2,-12(fp)
    43bc:	10c00217 	ldw	r3,8(r2)
    43c0:	e0bffe17 	ldw	r2,-8(fp)
    43c4:	10bfffc4 	addi	r2,r2,-1
    43c8:	1885883a 	add	r2,r3,r2
    43cc:	10800003 	ldbu	r2,0(r2)
    43d0:	10803fcc 	andi	r2,r2,255
    43d4:	1080201c 	xori	r2,r2,128
    43d8:	10bfe004 	addi	r2,r2,-128
    43dc:	10800bd8 	cmpnei	r2,r2,47
    43e0:	1000031e 	bne	r2,zero,43f0 <alt_find_file+0x6c>
    {
      len -= 1;
    43e4:	e0bffe17 	ldw	r2,-8(fp)
    43e8:	10bfffc4 	addi	r2,r2,-1
    43ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    43f0:	e0bffe17 	ldw	r2,-8(fp)
    43f4:	e0ffff17 	ldw	r3,-4(fp)
    43f8:	1885883a 	add	r2,r3,r2
    43fc:	10800003 	ldbu	r2,0(r2)
    4400:	10803fcc 	andi	r2,r2,255
    4404:	1080201c 	xori	r2,r2,128
    4408:	10bfe004 	addi	r2,r2,-128
    440c:	10800be0 	cmpeqi	r2,r2,47
    4410:	1000081e 	bne	r2,zero,4434 <alt_find_file+0xb0>
    4414:	e0bffe17 	ldw	r2,-8(fp)
    4418:	e0ffff17 	ldw	r3,-4(fp)
    441c:	1885883a 	add	r2,r3,r2
    4420:	10800003 	ldbu	r2,0(r2)
    4424:	10803fcc 	andi	r2,r2,255
    4428:	1080201c 	xori	r2,r2,128
    442c:	10bfe004 	addi	r2,r2,-128
    4430:	10000a1e 	bne	r2,zero,445c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    4434:	e0bffd17 	ldw	r2,-12(fp)
    4438:	10800217 	ldw	r2,8(r2)
    443c:	e0fffe17 	ldw	r3,-8(fp)
    4440:	180d883a 	mov	r6,r3
    4444:	e17fff17 	ldw	r5,-4(fp)
    4448:	1009883a 	mov	r4,r2
    444c:	000459c0 	call	459c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    4450:	1000021e 	bne	r2,zero,445c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    4454:	e0bffd17 	ldw	r2,-12(fp)
    4458:	00000706 	br	4478 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    445c:	e0bffd17 	ldw	r2,-12(fp)
    4460:	10800017 	ldw	r2,0(r2)
    4464:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    4468:	e0fffd17 	ldw	r3,-12(fp)
    446c:	d0a00404 	addi	r2,gp,-32752
    4470:	18bfcc1e 	bne	r3,r2,43a4 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    4474:	0005883a 	mov	r2,zero
}
    4478:	e037883a 	mov	sp,fp
    447c:	dfc00117 	ldw	ra,4(sp)
    4480:	df000017 	ldw	fp,0(sp)
    4484:	dec00204 	addi	sp,sp,8
    4488:	f800283a 	ret

0000448c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    448c:	defffa04 	addi	sp,sp,-24
    4490:	dfc00515 	stw	ra,20(sp)
    4494:	df000415 	stw	fp,16(sp)
    4498:	dc000315 	stw	r16,12(sp)
    449c:	df000404 	addi	fp,sp,16
    44a0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    44a4:	00bffa04 	movi	r2,-24
    44a8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    44ac:	e03ffc15 	stw	zero,-16(fp)
    44b0:	00001d06 	br	4528 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    44b4:	04000074 	movhi	r16,1
    44b8:	84022804 	addi	r16,r16,2208
    44bc:	e0bffc17 	ldw	r2,-16(fp)
    44c0:	01400304 	movi	r5,12
    44c4:	1009883a 	mov	r4,r2
    44c8:	00001040 	call	104 <__mulsi3>
    44cc:	8085883a 	add	r2,r16,r2
    44d0:	10800017 	ldw	r2,0(r2)
    44d4:	1000111e 	bne	r2,zero,451c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    44d8:	04000074 	movhi	r16,1
    44dc:	84022804 	addi	r16,r16,2208
    44e0:	e0bffc17 	ldw	r2,-16(fp)
    44e4:	01400304 	movi	r5,12
    44e8:	1009883a 	mov	r4,r2
    44ec:	00001040 	call	104 <__mulsi3>
    44f0:	8085883a 	add	r2,r16,r2
    44f4:	e0fffe17 	ldw	r3,-8(fp)
    44f8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    44fc:	d0e00817 	ldw	r3,-32736(gp)
    4500:	e0bffc17 	ldw	r2,-16(fp)
    4504:	1880020e 	bge	r3,r2,4510 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    4508:	e0bffc17 	ldw	r2,-16(fp)
    450c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    4510:	e0bffc17 	ldw	r2,-16(fp)
    4514:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    4518:	00000606 	br	4534 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    451c:	e0bffc17 	ldw	r2,-16(fp)
    4520:	10800044 	addi	r2,r2,1
    4524:	e0bffc15 	stw	r2,-16(fp)
    4528:	e0bffc17 	ldw	r2,-16(fp)
    452c:	10800810 	cmplti	r2,r2,32
    4530:	103fe01e 	bne	r2,zero,44b4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    4534:	e0bffd17 	ldw	r2,-12(fp)
}
    4538:	e6ffff04 	addi	sp,fp,-4
    453c:	dfc00217 	ldw	ra,8(sp)
    4540:	df000117 	ldw	fp,4(sp)
    4544:	dc000017 	ldw	r16,0(sp)
    4548:	dec00304 	addi	sp,sp,12
    454c:	f800283a 	ret

00004550 <atexit>:
    4550:	200b883a 	mov	r5,r4
    4554:	000f883a 	mov	r7,zero
    4558:	000d883a 	mov	r6,zero
    455c:	0009883a 	mov	r4,zero
    4560:	00046181 	jmpi	4618 <__register_exitproc>

00004564 <exit>:
    4564:	defffe04 	addi	sp,sp,-8
    4568:	000b883a 	mov	r5,zero
    456c:	dc000015 	stw	r16,0(sp)
    4570:	dfc00115 	stw	ra,4(sp)
    4574:	2021883a 	mov	r16,r4
    4578:	00047300 	call	4730 <__call_exitprocs>
    457c:	00800074 	movhi	r2,1
    4580:	10829304 	addi	r2,r2,2636
    4584:	11000017 	ldw	r4,0(r2)
    4588:	20800f17 	ldw	r2,60(r4)
    458c:	10000126 	beq	r2,zero,4594 <exit+0x30>
    4590:	103ee83a 	callr	r2
    4594:	8009883a 	mov	r4,r16
    4598:	00048b00 	call	48b0 <_exit>

0000459c <memcmp>:
    459c:	01c000c4 	movi	r7,3
    45a0:	3980192e 	bgeu	r7,r6,4608 <memcmp+0x6c>
    45a4:	2144b03a 	or	r2,r4,r5
    45a8:	11c4703a 	and	r2,r2,r7
    45ac:	10000f26 	beq	r2,zero,45ec <memcmp+0x50>
    45b0:	20800003 	ldbu	r2,0(r4)
    45b4:	28c00003 	ldbu	r3,0(r5)
    45b8:	10c0151e 	bne	r2,r3,4610 <memcmp+0x74>
    45bc:	31bfff84 	addi	r6,r6,-2
    45c0:	01ffffc4 	movi	r7,-1
    45c4:	00000406 	br	45d8 <memcmp+0x3c>
    45c8:	20800003 	ldbu	r2,0(r4)
    45cc:	28c00003 	ldbu	r3,0(r5)
    45d0:	31bfffc4 	addi	r6,r6,-1
    45d4:	10c00e1e 	bne	r2,r3,4610 <memcmp+0x74>
    45d8:	21000044 	addi	r4,r4,1
    45dc:	29400044 	addi	r5,r5,1
    45e0:	31fff91e 	bne	r6,r7,45c8 <memcmp+0x2c>
    45e4:	0005883a 	mov	r2,zero
    45e8:	f800283a 	ret
    45ec:	20c00017 	ldw	r3,0(r4)
    45f0:	28800017 	ldw	r2,0(r5)
    45f4:	18bfee1e 	bne	r3,r2,45b0 <memcmp+0x14>
    45f8:	31bfff04 	addi	r6,r6,-4
    45fc:	21000104 	addi	r4,r4,4
    4600:	29400104 	addi	r5,r5,4
    4604:	39bff936 	bltu	r7,r6,45ec <memcmp+0x50>
    4608:	303fe91e 	bne	r6,zero,45b0 <memcmp+0x14>
    460c:	003ff506 	br	45e4 <memcmp+0x48>
    4610:	10c5c83a 	sub	r2,r2,r3
    4614:	f800283a 	ret

00004618 <__register_exitproc>:
    4618:	defffa04 	addi	sp,sp,-24
    461c:	dc000315 	stw	r16,12(sp)
    4620:	04000074 	movhi	r16,1
    4624:	84029304 	addi	r16,r16,2636
    4628:	80c00017 	ldw	r3,0(r16)
    462c:	dc400415 	stw	r17,16(sp)
    4630:	dfc00515 	stw	ra,20(sp)
    4634:	18805217 	ldw	r2,328(r3)
    4638:	2023883a 	mov	r17,r4
    463c:	10003726 	beq	r2,zero,471c <__register_exitproc+0x104>
    4640:	10c00117 	ldw	r3,4(r2)
    4644:	010007c4 	movi	r4,31
    4648:	20c00e16 	blt	r4,r3,4684 <__register_exitproc+0x6c>
    464c:	1a000044 	addi	r8,r3,1
    4650:	8800221e 	bne	r17,zero,46dc <__register_exitproc+0xc4>
    4654:	18c00084 	addi	r3,r3,2
    4658:	18c7883a 	add	r3,r3,r3
    465c:	18c7883a 	add	r3,r3,r3
    4660:	12000115 	stw	r8,4(r2)
    4664:	10c7883a 	add	r3,r2,r3
    4668:	19400015 	stw	r5,0(r3)
    466c:	0005883a 	mov	r2,zero
    4670:	dfc00517 	ldw	ra,20(sp)
    4674:	dc400417 	ldw	r17,16(sp)
    4678:	dc000317 	ldw	r16,12(sp)
    467c:	dec00604 	addi	sp,sp,24
    4680:	f800283a 	ret
    4684:	00800034 	movhi	r2,0
    4688:	10800004 	addi	r2,r2,0
    468c:	10002626 	beq	r2,zero,4728 <__register_exitproc+0x110>
    4690:	01006404 	movi	r4,400
    4694:	d9400015 	stw	r5,0(sp)
    4698:	d9800115 	stw	r6,4(sp)
    469c:	d9c00215 	stw	r7,8(sp)
    46a0:	00000000 	call	0 <__alt_mem_onchip_memory2_1>
    46a4:	d9400017 	ldw	r5,0(sp)
    46a8:	d9800117 	ldw	r6,4(sp)
    46ac:	d9c00217 	ldw	r7,8(sp)
    46b0:	10001d26 	beq	r2,zero,4728 <__register_exitproc+0x110>
    46b4:	81000017 	ldw	r4,0(r16)
    46b8:	10000115 	stw	zero,4(r2)
    46bc:	02000044 	movi	r8,1
    46c0:	22405217 	ldw	r9,328(r4)
    46c4:	0007883a 	mov	r3,zero
    46c8:	12400015 	stw	r9,0(r2)
    46cc:	20805215 	stw	r2,328(r4)
    46d0:	10006215 	stw	zero,392(r2)
    46d4:	10006315 	stw	zero,396(r2)
    46d8:	883fde26 	beq	r17,zero,4654 <__register_exitproc+0x3c>
    46dc:	18c9883a 	add	r4,r3,r3
    46e0:	2109883a 	add	r4,r4,r4
    46e4:	1109883a 	add	r4,r2,r4
    46e8:	21802215 	stw	r6,136(r4)
    46ec:	01800044 	movi	r6,1
    46f0:	12406217 	ldw	r9,392(r2)
    46f4:	30cc983a 	sll	r6,r6,r3
    46f8:	4992b03a 	or	r9,r9,r6
    46fc:	12406215 	stw	r9,392(r2)
    4700:	21c04215 	stw	r7,264(r4)
    4704:	01000084 	movi	r4,2
    4708:	893fd21e 	bne	r17,r4,4654 <__register_exitproc+0x3c>
    470c:	11006317 	ldw	r4,396(r2)
    4710:	218cb03a 	or	r6,r4,r6
    4714:	11806315 	stw	r6,396(r2)
    4718:	003fce06 	br	4654 <__register_exitproc+0x3c>
    471c:	18805304 	addi	r2,r3,332
    4720:	18805215 	stw	r2,328(r3)
    4724:	003fc606 	br	4640 <__register_exitproc+0x28>
    4728:	00bfffc4 	movi	r2,-1
    472c:	003fd006 	br	4670 <__register_exitproc+0x58>

00004730 <__call_exitprocs>:
    4730:	defff504 	addi	sp,sp,-44
    4734:	df000915 	stw	fp,36(sp)
    4738:	dd400615 	stw	r21,24(sp)
    473c:	dc800315 	stw	r18,12(sp)
    4740:	dfc00a15 	stw	ra,40(sp)
    4744:	ddc00815 	stw	r23,32(sp)
    4748:	dd800715 	stw	r22,28(sp)
    474c:	dd000515 	stw	r20,20(sp)
    4750:	dcc00415 	stw	r19,16(sp)
    4754:	dc400215 	stw	r17,8(sp)
    4758:	dc000115 	stw	r16,4(sp)
    475c:	d9000015 	stw	r4,0(sp)
    4760:	2839883a 	mov	fp,r5
    4764:	04800044 	movi	r18,1
    4768:	057fffc4 	movi	r21,-1
    476c:	00800074 	movhi	r2,1
    4770:	10829304 	addi	r2,r2,2636
    4774:	12000017 	ldw	r8,0(r2)
    4778:	45005217 	ldw	r20,328(r8)
    477c:	44c05204 	addi	r19,r8,328
    4780:	a0001c26 	beq	r20,zero,47f4 <__call_exitprocs+0xc4>
    4784:	a0800117 	ldw	r2,4(r20)
    4788:	15ffffc4 	addi	r23,r2,-1
    478c:	b8000d16 	blt	r23,zero,47c4 <__call_exitprocs+0x94>
    4790:	14000044 	addi	r16,r2,1
    4794:	8421883a 	add	r16,r16,r16
    4798:	8421883a 	add	r16,r16,r16
    479c:	84402004 	addi	r17,r16,128
    47a0:	a463883a 	add	r17,r20,r17
    47a4:	a421883a 	add	r16,r20,r16
    47a8:	e0001e26 	beq	fp,zero,4824 <__call_exitprocs+0xf4>
    47ac:	80804017 	ldw	r2,256(r16)
    47b0:	e0801c26 	beq	fp,r2,4824 <__call_exitprocs+0xf4>
    47b4:	bdffffc4 	addi	r23,r23,-1
    47b8:	843fff04 	addi	r16,r16,-4
    47bc:	8c7fff04 	addi	r17,r17,-4
    47c0:	bd7ff91e 	bne	r23,r21,47a8 <__call_exitprocs+0x78>
    47c4:	00800034 	movhi	r2,0
    47c8:	10800004 	addi	r2,r2,0
    47cc:	10000926 	beq	r2,zero,47f4 <__call_exitprocs+0xc4>
    47d0:	a0800117 	ldw	r2,4(r20)
    47d4:	1000301e 	bne	r2,zero,4898 <__call_exitprocs+0x168>
    47d8:	a0800017 	ldw	r2,0(r20)
    47dc:	10003226 	beq	r2,zero,48a8 <__call_exitprocs+0x178>
    47e0:	a009883a 	mov	r4,r20
    47e4:	98800015 	stw	r2,0(r19)
    47e8:	00000000 	call	0 <__alt_mem_onchip_memory2_1>
    47ec:	9d000017 	ldw	r20,0(r19)
    47f0:	a03fe41e 	bne	r20,zero,4784 <__call_exitprocs+0x54>
    47f4:	dfc00a17 	ldw	ra,40(sp)
    47f8:	df000917 	ldw	fp,36(sp)
    47fc:	ddc00817 	ldw	r23,32(sp)
    4800:	dd800717 	ldw	r22,28(sp)
    4804:	dd400617 	ldw	r21,24(sp)
    4808:	dd000517 	ldw	r20,20(sp)
    480c:	dcc00417 	ldw	r19,16(sp)
    4810:	dc800317 	ldw	r18,12(sp)
    4814:	dc400217 	ldw	r17,8(sp)
    4818:	dc000117 	ldw	r16,4(sp)
    481c:	dec00b04 	addi	sp,sp,44
    4820:	f800283a 	ret
    4824:	a0800117 	ldw	r2,4(r20)
    4828:	80c00017 	ldw	r3,0(r16)
    482c:	10bfffc4 	addi	r2,r2,-1
    4830:	15c01426 	beq	r2,r23,4884 <__call_exitprocs+0x154>
    4834:	80000015 	stw	zero,0(r16)
    4838:	183fde26 	beq	r3,zero,47b4 <__call_exitprocs+0x84>
    483c:	95c8983a 	sll	r4,r18,r23
    4840:	a0806217 	ldw	r2,392(r20)
    4844:	a5800117 	ldw	r22,4(r20)
    4848:	2084703a 	and	r2,r4,r2
    484c:	10000b26 	beq	r2,zero,487c <__call_exitprocs+0x14c>
    4850:	a0806317 	ldw	r2,396(r20)
    4854:	2088703a 	and	r4,r4,r2
    4858:	20000c1e 	bne	r4,zero,488c <__call_exitprocs+0x15c>
    485c:	89400017 	ldw	r5,0(r17)
    4860:	d9000017 	ldw	r4,0(sp)
    4864:	183ee83a 	callr	r3
    4868:	a0800117 	ldw	r2,4(r20)
    486c:	15bfbf1e 	bne	r2,r22,476c <__call_exitprocs+0x3c>
    4870:	98800017 	ldw	r2,0(r19)
    4874:	153fcf26 	beq	r2,r20,47b4 <__call_exitprocs+0x84>
    4878:	003fbc06 	br	476c <__call_exitprocs+0x3c>
    487c:	183ee83a 	callr	r3
    4880:	003ff906 	br	4868 <__call_exitprocs+0x138>
    4884:	a5c00115 	stw	r23,4(r20)
    4888:	003feb06 	br	4838 <__call_exitprocs+0x108>
    488c:	89000017 	ldw	r4,0(r17)
    4890:	183ee83a 	callr	r3
    4894:	003ff406 	br	4868 <__call_exitprocs+0x138>
    4898:	a0800017 	ldw	r2,0(r20)
    489c:	a027883a 	mov	r19,r20
    48a0:	1029883a 	mov	r20,r2
    48a4:	003fb606 	br	4780 <__call_exitprocs+0x50>
    48a8:	0005883a 	mov	r2,zero
    48ac:	003ffb06 	br	489c <__call_exitprocs+0x16c>

000048b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    48b0:	defffd04 	addi	sp,sp,-12
    48b4:	df000215 	stw	fp,8(sp)
    48b8:	df000204 	addi	fp,sp,8
    48bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    48c0:	0001883a 	nop
    48c4:	e0bfff17 	ldw	r2,-4(fp)
    48c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    48cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    48d0:	10000226 	beq	r2,zero,48dc <_exit+0x2c>
    ALT_SIM_FAIL();
    48d4:	002af070 	cmpltui	zero,zero,43969
    48d8:	00000106 	br	48e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    48dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    48e0:	003fff06 	br	48e0 <_exit+0x30>
